
rsense-micro-adc-dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008804  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000138a0  080089c4  080089c4  000189c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c264  0801c264  00030074  2**0
                  CONTENTS
  4 .ARM          00000008  0801c264  0801c264  0002c264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c26c  0801c26c  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c26c  0801c26c  0002c26c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c270  0801c270  0002c270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0801c274  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000223c  20000074  0801c2e8  00030074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022b0  0801c2e8  000322b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126f6  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000273c  00000000  00000000  0004279a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000df8  00000000  00000000  00044ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d18  00000000  00000000  00045cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003222d  00000000  00000000  000469e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cb71  00000000  00000000  00078c15  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00132d3b  00000000  00000000  00085786  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  001b84c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c24  00000000  00000000  001b85ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00003452  00000000  00000000  001bc1d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000074 	.word	0x20000074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080089ac 	.word	0x080089ac

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000078 	.word	0x20000078
 80001fc:	080089ac 	.word	0x080089ac

08000200 <arm_bitreversal_32>:
 8000200:	1c4b      	adds	r3, r1, #1
 8000202:	2b01      	cmp	r3, #1
 8000204:	bf98      	it	ls
 8000206:	4770      	bxls	lr
 8000208:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800020c:	1c91      	adds	r1, r2, #2
 800020e:	089b      	lsrs	r3, r3, #2

08000210 <arm_bitreversal_32_0>:
 8000210:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000214:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000218:	880a      	ldrh	r2, [r1, #0]
 800021a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800021e:	4480      	add	r8, r0
 8000220:	4481      	add	r9, r0
 8000222:	4402      	add	r2, r0
 8000224:	4484      	add	ip, r0
 8000226:	f8d9 7000 	ldr.w	r7, [r9]
 800022a:	f8d8 6000 	ldr.w	r6, [r8]
 800022e:	6815      	ldr	r5, [r2, #0]
 8000230:	f8dc 4000 	ldr.w	r4, [ip]
 8000234:	f8c9 6000 	str.w	r6, [r9]
 8000238:	f8c8 7000 	str.w	r7, [r8]
 800023c:	f8cc 5000 	str.w	r5, [ip]
 8000240:	6014      	str	r4, [r2, #0]
 8000242:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000246:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800024a:	6855      	ldr	r5, [r2, #4]
 800024c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000250:	f8c9 6004 	str.w	r6, [r9, #4]
 8000254:	f8c8 7004 	str.w	r7, [r8, #4]
 8000258:	f8cc 5004 	str.w	r5, [ip, #4]
 800025c:	6054      	str	r4, [r2, #4]
 800025e:	3108      	adds	r1, #8
 8000260:	3b01      	subs	r3, #1
 8000262:	d1d5      	bne.n	8000210 <arm_bitreversal_32_0>
 8000264:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000268:	4770      	bx	lr

0800026a <arm_bitreversal_16>:
 800026a:	1c4b      	adds	r3, r1, #1
 800026c:	2b01      	cmp	r3, #1
 800026e:	bf98      	it	ls
 8000270:	4770      	bxls	lr
 8000272:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000276:	1c91      	adds	r1, r2, #2
 8000278:	089b      	lsrs	r3, r3, #2

0800027a <arm_bitreversal_16_0>:
 800027a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800027e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000282:	880a      	ldrh	r2, [r1, #0]
 8000284:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000288:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800028c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000290:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000294:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000298:	f8d9 7000 	ldr.w	r7, [r9]
 800029c:	f8d8 6000 	ldr.w	r6, [r8]
 80002a0:	6815      	ldr	r5, [r2, #0]
 80002a2:	f8dc 4000 	ldr.w	r4, [ip]
 80002a6:	f8c9 6000 	str.w	r6, [r9]
 80002aa:	f8c8 7000 	str.w	r7, [r8]
 80002ae:	f8cc 5000 	str.w	r5, [ip]
 80002b2:	6014      	str	r4, [r2, #0]
 80002b4:	3108      	adds	r1, #8
 80002b6:	3b01      	subs	r3, #1
 80002b8:	d1df      	bne.n	800027a <arm_bitreversal_16_0>
 80002ba:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b972 	b.w	8000df8 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9e08      	ldr	r6, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	4688      	mov	r8, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d14b      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	4615      	mov	r5, r2
 8000b3e:	d967      	bls.n	8000c10 <__udivmoddi4+0xe4>
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	b14a      	cbz	r2, 8000b5a <__udivmoddi4+0x2e>
 8000b46:	f1c2 0720 	rsb	r7, r2, #32
 8000b4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b52:	4095      	lsls	r5, r2
 8000b54:	ea47 0803 	orr.w	r8, r7, r3
 8000b58:	4094      	lsls	r4, r2
 8000b5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b64:	fa1f fc85 	uxth.w	ip, r5
 8000b68:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b6c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b70:	fb07 f10c 	mul.w	r1, r7, ip
 8000b74:	4299      	cmp	r1, r3
 8000b76:	d909      	bls.n	8000b8c <__udivmoddi4+0x60>
 8000b78:	18eb      	adds	r3, r5, r3
 8000b7a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b7e:	f080 811b 	bcs.w	8000db8 <__udivmoddi4+0x28c>
 8000b82:	4299      	cmp	r1, r3
 8000b84:	f240 8118 	bls.w	8000db8 <__udivmoddi4+0x28c>
 8000b88:	3f02      	subs	r7, #2
 8000b8a:	442b      	add	r3, r5
 8000b8c:	1a5b      	subs	r3, r3, r1
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b9c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba0:	45a4      	cmp	ip, r4
 8000ba2:	d909      	bls.n	8000bb8 <__udivmoddi4+0x8c>
 8000ba4:	192c      	adds	r4, r5, r4
 8000ba6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000baa:	f080 8107 	bcs.w	8000dbc <__udivmoddi4+0x290>
 8000bae:	45a4      	cmp	ip, r4
 8000bb0:	f240 8104 	bls.w	8000dbc <__udivmoddi4+0x290>
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	442c      	add	r4, r5
 8000bb8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bbc:	eba4 040c 	sub.w	r4, r4, ip
 8000bc0:	2700      	movs	r7, #0
 8000bc2:	b11e      	cbz	r6, 8000bcc <__udivmoddi4+0xa0>
 8000bc4:	40d4      	lsrs	r4, r2
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bcc:	4639      	mov	r1, r7
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d909      	bls.n	8000bea <__udivmoddi4+0xbe>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	f000 80eb 	beq.w	8000db2 <__udivmoddi4+0x286>
 8000bdc:	2700      	movs	r7, #0
 8000bde:	e9c6 0100 	strd	r0, r1, [r6]
 8000be2:	4638      	mov	r0, r7
 8000be4:	4639      	mov	r1, r7
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	fab3 f783 	clz	r7, r3
 8000bee:	2f00      	cmp	r7, #0
 8000bf0:	d147      	bne.n	8000c82 <__udivmoddi4+0x156>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d302      	bcc.n	8000bfc <__udivmoddi4+0xd0>
 8000bf6:	4282      	cmp	r2, r0
 8000bf8:	f200 80fa 	bhi.w	8000df0 <__udivmoddi4+0x2c4>
 8000bfc:	1a84      	subs	r4, r0, r2
 8000bfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	4698      	mov	r8, r3
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	d0e0      	beq.n	8000bcc <__udivmoddi4+0xa0>
 8000c0a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c0e:	e7dd      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000c10:	b902      	cbnz	r2, 8000c14 <__udivmoddi4+0xe8>
 8000c12:	deff      	udf	#255	; 0xff
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	f040 808f 	bne.w	8000d3c <__udivmoddi4+0x210>
 8000c1e:	1b49      	subs	r1, r1, r5
 8000c20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c24:	fa1f f885 	uxth.w	r8, r5
 8000c28:	2701      	movs	r7, #1
 8000c2a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c2e:	0c23      	lsrs	r3, r4, #16
 8000c30:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c38:	fb08 f10c 	mul.w	r1, r8, ip
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x124>
 8000c40:	18eb      	adds	r3, r5, r3
 8000c42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x122>
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	f200 80cd 	bhi.w	8000de8 <__udivmoddi4+0x2bc>
 8000c4e:	4684      	mov	ip, r0
 8000c50:	1a59      	subs	r1, r3, r1
 8000c52:	b2a3      	uxth	r3, r4
 8000c54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c58:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c60:	fb08 f800 	mul.w	r8, r8, r0
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0x14c>
 8000c68:	192c      	adds	r4, r5, r4
 8000c6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x14a>
 8000c70:	45a0      	cmp	r8, r4
 8000c72:	f200 80b6 	bhi.w	8000de2 <__udivmoddi4+0x2b6>
 8000c76:	4618      	mov	r0, r3
 8000c78:	eba4 0408 	sub.w	r4, r4, r8
 8000c7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c80:	e79f      	b.n	8000bc2 <__udivmoddi4+0x96>
 8000c82:	f1c7 0c20 	rsb	ip, r7, #32
 8000c86:	40bb      	lsls	r3, r7
 8000c88:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c8c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c90:	fa01 f407 	lsl.w	r4, r1, r7
 8000c94:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c98:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca0:	4325      	orrs	r5, r4
 8000ca2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ca6:	0c2c      	lsrs	r4, r5, #16
 8000ca8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cac:	fa1f fa8e 	uxth.w	sl, lr
 8000cb0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cb8:	429c      	cmp	r4, r3
 8000cba:	fa02 f207 	lsl.w	r2, r2, r7
 8000cbe:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc2:	d90b      	bls.n	8000cdc <__udivmoddi4+0x1b0>
 8000cc4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ccc:	f080 8087 	bcs.w	8000dde <__udivmoddi4+0x2b2>
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	f240 8084 	bls.w	8000dde <__udivmoddi4+0x2b2>
 8000cd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cda:	4473      	add	r3, lr
 8000cdc:	1b1b      	subs	r3, r3, r4
 8000cde:	b2ad      	uxth	r5, r5
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cec:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf0:	45a2      	cmp	sl, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x1da>
 8000cf4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	d26b      	bcs.n	8000dd6 <__udivmoddi4+0x2aa>
 8000cfe:	45a2      	cmp	sl, r4
 8000d00:	d969      	bls.n	8000dd6 <__udivmoddi4+0x2aa>
 8000d02:	3802      	subs	r0, #2
 8000d04:	4474      	add	r4, lr
 8000d06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d0e:	eba4 040a 	sub.w	r4, r4, sl
 8000d12:	454c      	cmp	r4, r9
 8000d14:	46c2      	mov	sl, r8
 8000d16:	464b      	mov	r3, r9
 8000d18:	d354      	bcc.n	8000dc4 <__udivmoddi4+0x298>
 8000d1a:	d051      	beq.n	8000dc0 <__udivmoddi4+0x294>
 8000d1c:	2e00      	cmp	r6, #0
 8000d1e:	d069      	beq.n	8000df4 <__udivmoddi4+0x2c8>
 8000d20:	ebb1 050a 	subs.w	r5, r1, sl
 8000d24:	eb64 0403 	sbc.w	r4, r4, r3
 8000d28:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d2c:	40fd      	lsrs	r5, r7
 8000d2e:	40fc      	lsrs	r4, r7
 8000d30:	ea4c 0505 	orr.w	r5, ip, r5
 8000d34:	e9c6 5400 	strd	r5, r4, [r6]
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e747      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f703 	lsr.w	r7, r0, r3
 8000d44:	4095      	lsls	r5, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d52:	4338      	orrs	r0, r7
 8000d54:	0c01      	lsrs	r1, r0, #16
 8000d56:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5a:	fa1f f885 	uxth.w	r8, r5
 8000d5e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d66:	fb07 f308 	mul.w	r3, r7, r8
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d70:	d907      	bls.n	8000d82 <__udivmoddi4+0x256>
 8000d72:	1869      	adds	r1, r5, r1
 8000d74:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d78:	d22f      	bcs.n	8000dda <__udivmoddi4+0x2ae>
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d92d      	bls.n	8000dda <__udivmoddi4+0x2ae>
 8000d7e:	3f02      	subs	r7, #2
 8000d80:	4429      	add	r1, r5
 8000d82:	1acb      	subs	r3, r1, r3
 8000d84:	b281      	uxth	r1, r0
 8000d86:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d92:	fb00 f308 	mul.w	r3, r0, r8
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x27e>
 8000d9a:	1869      	adds	r1, r5, r1
 8000d9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da0:	d217      	bcs.n	8000dd2 <__udivmoddi4+0x2a6>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d915      	bls.n	8000dd2 <__udivmoddi4+0x2a6>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4429      	add	r1, r5
 8000daa:	1ac9      	subs	r1, r1, r3
 8000dac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db0:	e73b      	b.n	8000c2a <__udivmoddi4+0xfe>
 8000db2:	4637      	mov	r7, r6
 8000db4:	4630      	mov	r0, r6
 8000db6:	e709      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000db8:	4607      	mov	r7, r0
 8000dba:	e6e7      	b.n	8000b8c <__udivmoddi4+0x60>
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	e6fb      	b.n	8000bb8 <__udivmoddi4+0x8c>
 8000dc0:	4541      	cmp	r1, r8
 8000dc2:	d2ab      	bcs.n	8000d1c <__udivmoddi4+0x1f0>
 8000dc4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dc8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dcc:	3801      	subs	r0, #1
 8000dce:	4613      	mov	r3, r2
 8000dd0:	e7a4      	b.n	8000d1c <__udivmoddi4+0x1f0>
 8000dd2:	4660      	mov	r0, ip
 8000dd4:	e7e9      	b.n	8000daa <__udivmoddi4+0x27e>
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	e795      	b.n	8000d06 <__udivmoddi4+0x1da>
 8000dda:	4667      	mov	r7, ip
 8000ddc:	e7d1      	b.n	8000d82 <__udivmoddi4+0x256>
 8000dde:	4681      	mov	r9, r0
 8000de0:	e77c      	b.n	8000cdc <__udivmoddi4+0x1b0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	442c      	add	r4, r5
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0x14c>
 8000de8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dec:	442b      	add	r3, r5
 8000dee:	e72f      	b.n	8000c50 <__udivmoddi4+0x124>
 8000df0:	4638      	mov	r0, r7
 8000df2:	e708      	b.n	8000c06 <__udivmoddi4+0xda>
 8000df4:	4637      	mov	r7, r6
 8000df6:	e6e9      	b.n	8000bcc <__udivmoddi4+0xa0>

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <AUDIO_FFT_Init>:
* @brief  Initialize the FFT processing depending on the desired configuration
* @param  AUDIO_FFT_instance_t* AUDIO_FFT_instance
* @retval None
*/
int32_t AUDIO_FFT_Init(AUDIO_FFT_instance_t* AUDIO_FFT_instance)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Initialize FFT ARM structure */
  arm_rfft_fast_init_f32(&(AUDIO_FFT_instance->context.S), AUDIO_FFT_instance->FFT_len);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f103 0214 	add.w	r2, r3, #20
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	4619      	mov	r1, r3
 8000e12:	4610      	mov	r0, r2
 8000e14:	f005 fe68 	bl	8006ae8 <arm_rfft_fast_init_f32>

  /*Compute indexes to be used for overlap */
  AUDIO_FFT_instance->context.new_data_len = (uint32_t)((float)(AUDIO_FFT_instance->FFT_len) *  (1.0f - (float)(AUDIO_FFT_instance->overlap)));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	ee07 3a90 	vmov	s15, r3
 8000e20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000e2e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e3a:	ee17 2a90 	vmov	r2, s15
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	62da      	str	r2, [r3, #44]	; 0x2c
  AUDIO_FFT_instance->context.old_data_len = (uint32_t)((float)(AUDIO_FFT_instance->FFT_len) -  AUDIO_FFT_instance->context.new_data_len);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	ee07 3a90 	vmov	s15, r3
 8000e4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e52:	ee07 3a90 	vmov	s15, r3
 8000e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e62:	ee17 2a90 	vmov	r2, s15
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize scratch buffer index */
  AUDIO_FFT_instance->context.scratch_idx = 0;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Memory allocation */
  if(AUDIO_FFT_instance->win_type != AUDIO_FTT_RECT_WIN)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d009      	beq.n	8000e8c <AUDIO_FFT_Init+0x90>
  {
    AUDIO_FFT_instance->context.win = (float * )calloc(AUDIO_FFT_instance->FFT_len, sizeof(float));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2104      	movs	r1, #4
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f006 ff34 	bl	8007cec <calloc>
 8000e84:	4603      	mov	r3, r0
 8000e86:	461a      	mov	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  AUDIO_FFT_instance->context.scratch = (float * )calloc(AUDIO_FFT_instance->context.new_data_len, sizeof(float));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e90:	2104      	movs	r1, #4
 8000e92:	4618      	mov	r0, r3
 8000e94:	f006 ff2a 	bl	8007cec <calloc>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	63da      	str	r2, [r3, #60]	; 0x3c
  AUDIO_FFT_instance->context.dataIn = (float * )calloc(AUDIO_FFT_instance->FFT_len, sizeof(float));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	2104      	movs	r1, #4
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f006 ff20 	bl	8007cec <calloc>
 8000eac:	4603      	mov	r3, r0
 8000eae:	461a      	mov	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	641a      	str	r2, [r3, #64]	; 0x40
  AUDIO_FFT_instance->context.fftIn = (float * )calloc(AUDIO_FFT_instance->FFT_len, sizeof(float));
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	2104      	movs	r1, #4
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f006 ff16 	bl	8007cec <calloc>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	645a      	str	r2, [r3, #68]	; 0x44
  if(AUDIO_FFT_instance->output == MAGNITUDE || AUDIO_FFT_instance->output == PHASE)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	691b      	ldr	r3, [r3, #16]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d003      	beq.n	8000ed8 <AUDIO_FFT_Init+0xdc>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	691b      	ldr	r3, [r3, #16]
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d109      	bne.n	8000eec <AUDIO_FFT_Init+0xf0>
  {
  AUDIO_FFT_instance->context.fftOut = (float * )calloc(AUDIO_FFT_instance->FFT_len, sizeof(float));
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2104      	movs	r1, #4
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f006 ff04 	bl	8007cec <calloc>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Create window depending on the user choice */
  switch(AUDIO_FFT_instance->win_type)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	2b05      	cmp	r3, #5
 8000ef2:	d847      	bhi.n	8000f84 <AUDIO_FFT_Init+0x188>
 8000ef4:	a201      	add	r2, pc, #4	; (adr r2, 8000efc <AUDIO_FFT_Init+0x100>)
 8000ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efa:	bf00      	nop
 8000efc:	08000f85 	.word	0x08000f85
 8000f00:	08000f15 	.word	0x08000f15
 8000f04:	08000f29 	.word	0x08000f29
 8000f08:	08000f41 	.word	0x08000f41
 8000f0c:	08000f55 	.word	0x08000f55
 8000f10:	08000f6d 	.word	0x08000f6d
  {
  case AUDIO_FTT_RECT_WIN:
    break;
  case AUDIO_FTT_HAMMING_WIN:
    HammingWin(AUDIO_FFT_instance->FFT_len, AUDIO_FFT_instance->context.win);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4610      	mov	r0, r2
 8000f22:	f000 f9e9 	bl	80012f8 <HammingWin>
    break;
 8000f26:	e02d      	b.n	8000f84 <AUDIO_FFT_Init+0x188>
  case AUDIO_FTT_HANNING_WIN:
    TukeyWin(AUDIO_FFT_instance->FFT_len, 1.0f, AUDIO_FFT_instance->context.win);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f32:	4619      	mov	r1, r3
 8000f34:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000f38:	4610      	mov	r0, r2
 8000f3a:	f000 f8dd 	bl	80010f8 <TukeyWin>
    break;
 8000f3e:	e021      	b.n	8000f84 <AUDIO_FFT_Init+0x188>
  case AUDIO_FTT_BLACKMAN_HARRIS_WIN:
    BlackmanHarrisWin(AUDIO_FFT_instance->FFT_len, AUDIO_FFT_instance->context.win);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	f000 fa37 	bl	80013c0 <BlackmanHarrisWin>
    break;
 8000f52:	e017      	b.n	8000f84 <AUDIO_FFT_Init+0x188>
  case AUDIO_FTT_TUKEY_0_25_WIN:
    TukeyWin(AUDIO_FFT_instance->FFT_len, 0.25f, AUDIO_FFT_instance->context.win);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f5e:	4619      	mov	r1, r3
 8000f60:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8000f64:	4610      	mov	r0, r2
 8000f66:	f000 f8c7 	bl	80010f8 <TukeyWin>
    break;
 8000f6a:	e00b      	b.n	8000f84 <AUDIO_FFT_Init+0x188>
  case AUDIO_FTT_TUKEY_0_75_WIN:
    TukeyWin(AUDIO_FFT_instance->FFT_len, 0.75f, AUDIO_FFT_instance->context.win);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f76:	4619      	mov	r1, r3
 8000f78:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	f000 f8bb 	bl	80010f8 <TukeyWin>
    break;
 8000f82:	bf00      	nop
  }

  return 0;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop

08000f90 <AUDIO_FFT_Data_Input>:
* @param  data: input data buffer
* @param  len: length of input data buffer
* @retval None
*/
int32_t AUDIO_FFT_Data_Input(int16_t * data, uint32_t len, AUDIO_FFT_instance_t* AUDIO_FFT_instance)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08c      	sub	sp, #48	; 0x30
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  int32_t ret = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  int32_t index = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s_idx = AUDIO_FFT_instance->context.scratch_idx;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t new_data_len = AUDIO_FFT_instance->context.new_data_len;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fae:	61fb      	str	r3, [r7, #28]

  float * scratch_ptr = &AUDIO_FFT_instance->context.scratch[s_idx];
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4413      	add	r3, r2
 8000fba:	623b      	str	r3, [r7, #32]

  for (index = 0; index < len; index ++)
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fc0:	e041      	b.n	8001046 <AUDIO_FFT_Data_Input+0xb6>
  {
    *scratch_ptr++ = (float)data[index]/32.7680f;
 8000fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	4413      	add	r3, r2
 8000fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fce:	ee07 3a90 	vmov	s15, r3
 8000fd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fd6:	6a3b      	ldr	r3, [r7, #32]
 8000fd8:	1d1a      	adds	r2, r3, #4
 8000fda:	623a      	str	r2, [r7, #32]
 8000fdc:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001060 <AUDIO_FFT_Data_Input+0xd0>
 8000fe0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe4:	edc3 7a00 	vstr	s15, [r3]
    s_idx++;
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fea:	3301      	adds	r3, #1
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
    if (s_idx == new_data_len)
 8000fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d124      	bne.n	8001040 <AUDIO_FFT_Data_Input+0xb0>
    {
      float * data_in = AUDIO_FFT_instance->context.dataIn;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	61bb      	str	r3, [r7, #24]
      uint32_t old_data_len = AUDIO_FFT_instance->context.old_data_len;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	617b      	str	r3, [r7, #20]

      memcpy(data_in, &data_in[AUDIO_FFT_instance->FFT_len - old_data_len], old_data_len * sizeof(float));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	18d1      	adds	r1, r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	461a      	mov	r2, r3
 8001016:	69b8      	ldr	r0, [r7, #24]
 8001018:	f006 fe9a 	bl	8007d50 <memcpy>
      memcpy(&data_in[old_data_len], AUDIO_FFT_instance->context.scratch, new_data_len * sizeof(float));
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	18d0      	adds	r0, r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	461a      	mov	r2, r3
 800102e:	f006 fe8f 	bl	8007d50 <memcpy>

      ret = 1;
 8001032:	2301      	movs	r3, #1
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
      s_idx = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
      scratch_ptr = &AUDIO_FFT_instance->context.scratch[0];
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800103e:	623b      	str	r3, [r7, #32]
  for (index = 0; index < len; index ++)
 8001040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001042:	3301      	adds	r3, #1
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
 8001046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001048:	68ba      	ldr	r2, [r7, #8]
 800104a:	429a      	cmp	r2, r3
 800104c:	d8b9      	bhi.n	8000fc2 <AUDIO_FFT_Data_Input+0x32>

    }
  }

  AUDIO_FFT_instance->context.scratch_idx = s_idx;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001052:	635a      	str	r2, [r3, #52]	; 0x34

  return ret;
 8001054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001056:	4618      	mov	r0, r3
 8001058:	3730      	adds	r7, #48	; 0x30
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	4203126f 	.word	0x4203126f

08001064 <AUDIO_FFT_Process>:
* @param  AUDIO_FFT_instance_t* AUDIO_FFT_instance
* @param  output: FFT amplitude buffer
* @retval None
*/
int32_t AUDIO_FFT_Process(AUDIO_FFT_instance_t* AUDIO_FFT_instance, float * output)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]

  float * win = AUDIO_FFT_instance->context.win;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001072:	617b      	str	r3, [r7, #20]
  float * dataIn = AUDIO_FFT_instance->context.dataIn;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	613b      	str	r3, [r7, #16]
  float * fftIn = AUDIO_FFT_instance->context.fftIn;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	60fb      	str	r3, [r7, #12]

  if(AUDIO_FFT_instance->win_type != AUDIO_FTT_RECT_WIN)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d007      	beq.n	8001098 <AUDIO_FFT_Process+0x34>
  {
  arm_mult_f32(dataIn, win, fftIn, AUDIO_FFT_instance->FFT_len);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	6979      	ldr	r1, [r7, #20]
 8001090:	6938      	ldr	r0, [r7, #16]
 8001092:	f006 fb03 	bl	800769c <arm_mult_f32>
 8001096:	e007      	b.n	80010a8 <AUDIO_FFT_Process+0x44>
  }
  else
  {
    memcpy(fftIn, dataIn, sizeof(float) * AUDIO_FFT_instance->FFT_len);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	461a      	mov	r2, r3
 80010a0:	6939      	ldr	r1, [r7, #16]
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f006 fe54 	bl	8007d50 <memcpy>
  }

  if(AUDIO_FFT_instance->output == COMPLEX)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d107      	bne.n	80010c0 <AUDIO_FFT_Process+0x5c>
  {
  arm_rfft_fast_f32(&AUDIO_FFT_instance->context.S, fftIn, output, 0);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f103 0014 	add.w	r0, r3, #20
 80010b6:	2300      	movs	r3, #0
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	68f9      	ldr	r1, [r7, #12]
 80010bc:	f005 fd98 	bl	8006bf0 <arm_rfft_fast_f32>
  }

  if(AUDIO_FFT_instance->output == MAGNITUDE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d112      	bne.n	80010ee <AUDIO_FFT_Process+0x8a>
  {
    float * fftOut = AUDIO_FFT_instance->context.fftOut;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010cc:	60bb      	str	r3, [r7, #8]
    arm_rfft_fast_f32(&AUDIO_FFT_instance->context.S, fftIn, fftOut, 0);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f103 0014 	add.w	r0, r3, #20
 80010d4:	2300      	movs	r3, #0
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	68f9      	ldr	r1, [r7, #12]
 80010da:	f005 fd89 	bl	8006bf0 <arm_rfft_fast_f32>
    arm_cmplx_mag_f32(fftOut, output, AUDIO_FFT_instance->FFT_len / 2);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	085b      	lsrs	r3, r3, #1
 80010e4:	461a      	mov	r2, r3
 80010e6:	6839      	ldr	r1, [r7, #0]
 80010e8:	68b8      	ldr	r0, [r7, #8]
 80010ea:	f006 f9ef 	bl	80074cc <arm_cmplx_mag_f32>
  if(AUDIO_FFT_instance->output == PHASE)
  {
    /*Not implemented in v1.0.0*/
  }

  return 0;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <TukeyWin>:


static void TukeyWin(uint16_t len, float ratio, float * dest)
{
 80010f8:	b5b0      	push	{r4, r5, r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	ed87 0a02 	vstr	s0, [r7, #8]
 8001104:	6079      	str	r1, [r7, #4]
 8001106:	81fb      	strh	r3, [r7, #14]
  uint16_t x = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	82fb      	strh	r3, [r7, #22]
  for ( x = 0; x < len * (ratio / 2) ; x++)
 800110c:	2300      	movs	r3, #0
 800110e:	82fb      	strh	r3, [r7, #22]
 8001110:	e04f      	b.n	80011b2 <TukeyWin+0xba>
  {
    dest[x] = 0.5f * (1.0f + cosf(2.0f * M_PI / ratio * ( (float)x/(len - 1.0f) - (ratio / 2))));
 8001112:	68b8      	ldr	r0, [r7, #8]
 8001114:	f7ff fa38 	bl	8000588 <__aeabi_f2d>
 8001118:	4603      	mov	r3, r0
 800111a:	460c      	mov	r4, r1
 800111c:	461a      	mov	r2, r3
 800111e:	4623      	mov	r3, r4
 8001120:	a173      	add	r1, pc, #460	; (adr r1, 80012f0 <TukeyWin+0x1f8>)
 8001122:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001126:	f7ff fbb1 	bl	800088c <__aeabi_ddiv>
 800112a:	4603      	mov	r3, r0
 800112c:	460c      	mov	r4, r1
 800112e:	4625      	mov	r5, r4
 8001130:	461c      	mov	r4, r3
 8001132:	8afb      	ldrh	r3, [r7, #22]
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800113c:	89fb      	ldrh	r3, [r7, #14]
 800113e:	ee07 3a90 	vmov	s15, r3
 8001142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001146:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800114a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800114e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001152:	edd7 6a02 	vldr	s13, [r7, #8]
 8001156:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800115a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800115e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001162:	ee17 0a90 	vmov	r0, s15
 8001166:	f7ff fa0f 	bl	8000588 <__aeabi_f2d>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4620      	mov	r0, r4
 8001170:	4629      	mov	r1, r5
 8001172:	f7ff fa61 	bl	8000638 <__aeabi_dmul>
 8001176:	4603      	mov	r3, r0
 8001178:	460c      	mov	r4, r1
 800117a:	4618      	mov	r0, r3
 800117c:	4621      	mov	r1, r4
 800117e:	f7ff fc6d 	bl	8000a5c <__aeabi_d2f>
 8001182:	4603      	mov	r3, r0
 8001184:	ee00 3a10 	vmov	s0, r3
 8001188:	f006 fe70 	bl	8007e6c <cosf>
 800118c:	eeb0 7a40 	vmov.f32	s14, s0
 8001190:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001194:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001198:	8afb      	ldrh	r3, [r7, #22]
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80011a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011a8:	edc3 7a00 	vstr	s15, [r3]
  for ( x = 0; x < len * (ratio / 2) ; x++)
 80011ac:	8afb      	ldrh	r3, [r7, #22]
 80011ae:	3301      	adds	r3, #1
 80011b0:	82fb      	strh	r3, [r7, #22]
 80011b2:	8afb      	ldrh	r3, [r7, #22]
 80011b4:	ee07 3a90 	vmov	s15, r3
 80011b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011bc:	89fb      	ldrh	r3, [r7, #14]
 80011be:	ee07 3a90 	vmov	s15, r3
 80011c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80011ca:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80011ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80011d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011de:	d498      	bmi.n	8001112 <TukeyWin+0x1a>
  }
  for( ; x <  len - len * (ratio / 2); x++)
 80011e0:	e009      	b.n	80011f6 <TukeyWin+0xfe>
  {
    dest[x] = 1.0f;
 80011e2:	8afb      	ldrh	r3, [r7, #22]
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80011ee:	601a      	str	r2, [r3, #0]
  for( ; x <  len - len * (ratio / 2); x++)
 80011f0:	8afb      	ldrh	r3, [r7, #22]
 80011f2:	3301      	adds	r3, #1
 80011f4:	82fb      	strh	r3, [r7, #22]
 80011f6:	8afb      	ldrh	r3, [r7, #22]
 80011f8:	ee07 3a90 	vmov	s15, r3
 80011fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001200:	89fb      	ldrh	r3, [r7, #14]
 8001202:	ee07 3a90 	vmov	s15, r3
 8001206:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800120a:	89fb      	ldrh	r3, [r7, #14]
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001214:	edd7 5a02 	vldr	s11, [r7, #8]
 8001218:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800121c:	eec5 7a85 	vdiv.f32	s15, s11, s10
 8001220:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001224:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001228:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800122c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001230:	d4d7      	bmi.n	80011e2 <TukeyWin+0xea>
  }
  for( ; x <  len; x++)
 8001232:	e053      	b.n	80012dc <TukeyWin+0x1e4>
  {
    dest[x] = 0.5f * (1.0f + cosf(2.0f * M_PI / ratio * ( (float)x/(len - 1.0f) - 1 + (ratio / 2))));
 8001234:	68b8      	ldr	r0, [r7, #8]
 8001236:	f7ff f9a7 	bl	8000588 <__aeabi_f2d>
 800123a:	4603      	mov	r3, r0
 800123c:	460c      	mov	r4, r1
 800123e:	461a      	mov	r2, r3
 8001240:	4623      	mov	r3, r4
 8001242:	a12b      	add	r1, pc, #172	; (adr r1, 80012f0 <TukeyWin+0x1f8>)
 8001244:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001248:	f7ff fb20 	bl	800088c <__aeabi_ddiv>
 800124c:	4603      	mov	r3, r0
 800124e:	460c      	mov	r4, r1
 8001250:	4625      	mov	r5, r4
 8001252:	461c      	mov	r4, r3
 8001254:	8afb      	ldrh	r3, [r7, #22]
 8001256:	ee07 3a90 	vmov	s15, r3
 800125a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800125e:	89fb      	ldrh	r3, [r7, #14]
 8001260:	ee07 3a90 	vmov	s15, r3
 8001264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001268:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800126c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001270:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001274:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001278:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800127c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001280:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001284:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800128c:	ee17 0a90 	vmov	r0, s15
 8001290:	f7ff f97a 	bl	8000588 <__aeabi_f2d>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4620      	mov	r0, r4
 800129a:	4629      	mov	r1, r5
 800129c:	f7ff f9cc 	bl	8000638 <__aeabi_dmul>
 80012a0:	4603      	mov	r3, r0
 80012a2:	460c      	mov	r4, r1
 80012a4:	4618      	mov	r0, r3
 80012a6:	4621      	mov	r1, r4
 80012a8:	f7ff fbd8 	bl	8000a5c <__aeabi_d2f>
 80012ac:	4603      	mov	r3, r0
 80012ae:	ee00 3a10 	vmov	s0, r3
 80012b2:	f006 fddb 	bl	8007e6c <cosf>
 80012b6:	eeb0 7a40 	vmov.f32	s14, s0
 80012ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80012be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c2:	8afb      	ldrh	r3, [r7, #22]
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d2:	edc3 7a00 	vstr	s15, [r3]
  for( ; x <  len; x++)
 80012d6:	8afb      	ldrh	r3, [r7, #22]
 80012d8:	3301      	adds	r3, #1
 80012da:	82fb      	strh	r3, [r7, #22]
 80012dc:	8afa      	ldrh	r2, [r7, #22]
 80012de:	89fb      	ldrh	r3, [r7, #14]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d3a7      	bcc.n	8001234 <TukeyWin+0x13c>
  }
}
 80012e4:	bf00      	nop
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bdb0      	pop	{r4, r5, r7, pc}
 80012ec:	f3af 8000 	nop.w
 80012f0:	54442d18 	.word	0x54442d18
 80012f4:	401921fb 	.word	0x401921fb

080012f8 <HammingWin>:

static void HammingWin(uint16_t len, float * dest)
{
 80012f8:	b5b0      	push	{r4, r5, r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	6039      	str	r1, [r7, #0]
 8001302:	80fb      	strh	r3, [r7, #6]
  uint16_t x = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	82fb      	strh	r3, [r7, #22]
  float alpha0 = 0.53836f;
 8001308:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <HammingWin+0xc0>)
 800130a:	613b      	str	r3, [r7, #16]
  float alpha1 = 1.0f - alpha0;
 800130c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001310:	edd7 7a04 	vldr	s15, [r7, #16]
 8001314:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001318:	edc7 7a03 	vstr	s15, [r7, #12]

  for ( x = 0; x < len ; x++)
 800131c:	2300      	movs	r3, #0
 800131e:	82fb      	strh	r3, [r7, #22]
 8001320:	e03e      	b.n	80013a0 <HammingWin+0xa8>
  {
    dest[x] = alpha0 - alpha1 * cosf(2.0f * M_PI * (float)x / (float)len);
 8001322:	8afb      	ldrh	r3, [r7, #22]
 8001324:	ee07 3a90 	vmov	s15, r3
 8001328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800132c:	ee17 0a90 	vmov	r0, s15
 8001330:	f7ff f92a 	bl	8000588 <__aeabi_f2d>
 8001334:	a31e      	add	r3, pc, #120	; (adr r3, 80013b0 <HammingWin+0xb8>)
 8001336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133a:	f7ff f97d 	bl	8000638 <__aeabi_dmul>
 800133e:	4603      	mov	r3, r0
 8001340:	460c      	mov	r4, r1
 8001342:	4625      	mov	r5, r4
 8001344:	461c      	mov	r4, r3
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	ee07 3a90 	vmov	s15, r3
 800134c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001350:	ee17 0a90 	vmov	r0, s15
 8001354:	f7ff f918 	bl	8000588 <__aeabi_f2d>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4620      	mov	r0, r4
 800135e:	4629      	mov	r1, r5
 8001360:	f7ff fa94 	bl	800088c <__aeabi_ddiv>
 8001364:	4603      	mov	r3, r0
 8001366:	460c      	mov	r4, r1
 8001368:	4618      	mov	r0, r3
 800136a:	4621      	mov	r1, r4
 800136c:	f7ff fb76 	bl	8000a5c <__aeabi_d2f>
 8001370:	4603      	mov	r3, r0
 8001372:	ee00 3a10 	vmov	s0, r3
 8001376:	f006 fd79 	bl	8007e6c <cosf>
 800137a:	eeb0 7a40 	vmov.f32	s14, s0
 800137e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001386:	8afb      	ldrh	r3, [r7, #22]
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	4413      	add	r3, r2
 800138e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001392:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001396:	edc3 7a00 	vstr	s15, [r3]
  for ( x = 0; x < len ; x++)
 800139a:	8afb      	ldrh	r3, [r7, #22]
 800139c:	3301      	adds	r3, #1
 800139e:	82fb      	strh	r3, [r7, #22]
 80013a0:	8afa      	ldrh	r2, [r7, #22]
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d3bc      	bcc.n	8001322 <HammingWin+0x2a>
  }
}
 80013a8:	bf00      	nop
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bdb0      	pop	{r4, r5, r7, pc}
 80013b0:	54442d18 	.word	0x54442d18
 80013b4:	401921fb 	.word	0x401921fb
 80013b8:	3f09d1f6 	.word	0x3f09d1f6
 80013bc:	00000000 	.word	0x00000000

080013c0 <BlackmanHarrisWin>:

static void BlackmanHarrisWin(uint16_t len, float * dest)
{
 80013c0:	b5b0      	push	{r4, r5, r7, lr}
 80013c2:	ed2d 8b02 	vpush	{d8}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	80fb      	strh	r3, [r7, #6]
  uint16_t x = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	82fb      	strh	r3, [r7, #22]
  float alpha0 = 0.42f;
 80013d4:	4b48      	ldr	r3, [pc, #288]	; (80014f8 <BlackmanHarrisWin+0x138>)
 80013d6:	613b      	str	r3, [r7, #16]
  float alpha1 = 0.5;
 80013d8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80013dc:	60fb      	str	r3, [r7, #12]
  float alpha2 = 0.08f;
 80013de:	4b47      	ldr	r3, [pc, #284]	; (80014fc <BlackmanHarrisWin+0x13c>)
 80013e0:	60bb      	str	r3, [r7, #8]

  for ( x = 0; x < len ; x++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	82fb      	strh	r3, [r7, #22]
 80013e6:	e074      	b.n	80014d2 <BlackmanHarrisWin+0x112>
  {
    dest[x] = alpha0 - alpha1 * cosf(2.0f * M_PI * (float)x / (float)len) + - alpha2 * cosf(4.0f * M_PI * (float)x / (float)len);
 80013e8:	8afb      	ldrh	r3, [r7, #22]
 80013ea:	ee07 3a90 	vmov	s15, r3
 80013ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013f2:	ee17 0a90 	vmov	r0, s15
 80013f6:	f7ff f8c7 	bl	8000588 <__aeabi_f2d>
 80013fa:	a33b      	add	r3, pc, #236	; (adr r3, 80014e8 <BlackmanHarrisWin+0x128>)
 80013fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001400:	f7ff f91a 	bl	8000638 <__aeabi_dmul>
 8001404:	4603      	mov	r3, r0
 8001406:	460c      	mov	r4, r1
 8001408:	4625      	mov	r5, r4
 800140a:	461c      	mov	r4, r3
 800140c:	88fb      	ldrh	r3, [r7, #6]
 800140e:	ee07 3a90 	vmov	s15, r3
 8001412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001416:	ee17 0a90 	vmov	r0, s15
 800141a:	f7ff f8b5 	bl	8000588 <__aeabi_f2d>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4620      	mov	r0, r4
 8001424:	4629      	mov	r1, r5
 8001426:	f7ff fa31 	bl	800088c <__aeabi_ddiv>
 800142a:	4603      	mov	r3, r0
 800142c:	460c      	mov	r4, r1
 800142e:	4618      	mov	r0, r3
 8001430:	4621      	mov	r1, r4
 8001432:	f7ff fb13 	bl	8000a5c <__aeabi_d2f>
 8001436:	4603      	mov	r3, r0
 8001438:	ee00 3a10 	vmov	s0, r3
 800143c:	f006 fd16 	bl	8007e6c <cosf>
 8001440:	eeb0 7a40 	vmov.f32	s14, s0
 8001444:	edd7 7a03 	vldr	s15, [r7, #12]
 8001448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001450:	ee37 8a67 	vsub.f32	s16, s14, s15
 8001454:	edd7 7a02 	vldr	s15, [r7, #8]
 8001458:	eef1 8a67 	vneg.f32	s17, s15
 800145c:	8afb      	ldrh	r3, [r7, #22]
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001466:	ee17 0a90 	vmov	r0, s15
 800146a:	f7ff f88d 	bl	8000588 <__aeabi_f2d>
 800146e:	a320      	add	r3, pc, #128	; (adr r3, 80014f0 <BlackmanHarrisWin+0x130>)
 8001470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001474:	f7ff f8e0 	bl	8000638 <__aeabi_dmul>
 8001478:	4603      	mov	r3, r0
 800147a:	460c      	mov	r4, r1
 800147c:	4625      	mov	r5, r4
 800147e:	461c      	mov	r4, r3
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	ee07 3a90 	vmov	s15, r3
 8001486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800148a:	ee17 0a90 	vmov	r0, s15
 800148e:	f7ff f87b 	bl	8000588 <__aeabi_f2d>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4620      	mov	r0, r4
 8001498:	4629      	mov	r1, r5
 800149a:	f7ff f9f7 	bl	800088c <__aeabi_ddiv>
 800149e:	4603      	mov	r3, r0
 80014a0:	460c      	mov	r4, r1
 80014a2:	4618      	mov	r0, r3
 80014a4:	4621      	mov	r1, r4
 80014a6:	f7ff fad9 	bl	8000a5c <__aeabi_d2f>
 80014aa:	4603      	mov	r3, r0
 80014ac:	ee00 3a10 	vmov	s0, r3
 80014b0:	f006 fcdc 	bl	8007e6c <cosf>
 80014b4:	eef0 7a40 	vmov.f32	s15, s0
 80014b8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80014bc:	8afb      	ldrh	r3, [r7, #22]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80014c8:	edc3 7a00 	vstr	s15, [r3]
  for ( x = 0; x < len ; x++)
 80014cc:	8afb      	ldrh	r3, [r7, #22]
 80014ce:	3301      	adds	r3, #1
 80014d0:	82fb      	strh	r3, [r7, #22]
 80014d2:	8afa      	ldrh	r2, [r7, #22]
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d386      	bcc.n	80013e8 <BlackmanHarrisWin+0x28>
  }
}
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	ecbd 8b02 	vpop	{d8}
 80014e4:	bdb0      	pop	{r4, r5, r7, pc}
 80014e6:	bf00      	nop
 80014e8:	54442d18 	.word	0x54442d18
 80014ec:	401921fb 	.word	0x401921fb
 80014f0:	54442d18 	.word	0x54442d18
 80014f4:	402921fb 	.word	0x402921fb
 80014f8:	3ed70a3d 	.word	0x3ed70a3d
 80014fc:	3da3d70a 	.word	0x3da3d70a

08001500 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8001506:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001508:	f000 ff7d 	bl	8002406 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800150c:	f000 f91a 	bl	8001744 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001510:	f000 fa86 	bl	8001a20 <MX_GPIO_Init>
	MX_DMA_Init();
 8001514:	f000 fa52 	bl	80019bc <MX_DMA_Init>
	MX_ADC1_Init();
 8001518:	f000 f99c 	bl	8001854 <MX_ADC1_Init>
	MX_USART2_UART_Init();
 800151c:	f000 fa00 	bl	8001920 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_DMA_RegisterCallback(&hdma_usart2_tx, HAL_DMA_XFER_CPLT_CB_ID,
 8001520:	4a7a      	ldr	r2, [pc, #488]	; (800170c <main+0x20c>)
 8001522:	2100      	movs	r1, #0
 8001524:	487a      	ldr	r0, [pc, #488]	; (8001710 <main+0x210>)
 8001526:	f002 fd79 	bl	800401c <HAL_DMA_RegisterCallback>
			&DMATransferComplete);
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 800152a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800152e:	4979      	ldr	r1, [pc, #484]	; (8001714 <main+0x214>)
 8001530:	4879      	ldr	r0, [pc, #484]	; (8001718 <main+0x218>)
 8001532:	f001 fb4f 	bl	8002bd4 <HAL_ADC_Start_DMA>
	/* USER CODE END 2 */

	audio_fft_M1.sampling_frequency = 192000;
 8001536:	4b79      	ldr	r3, [pc, #484]	; (800171c <main+0x21c>)
 8001538:	4a79      	ldr	r2, [pc, #484]	; (8001720 <main+0x220>)
 800153a:	601a      	str	r2, [r3, #0]
	audio_fft_M1.FFT_len = 512;
 800153c:	4b77      	ldr	r3, [pc, #476]	; (800171c <main+0x21c>)
 800153e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001542:	605a      	str	r2, [r3, #4]
	audio_fft_M1.overlap = 0.5f;
 8001544:	4b75      	ldr	r3, [pc, #468]	; (800171c <main+0x21c>)
 8001546:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800154a:	609a      	str	r2, [r3, #8]
	audio_fft_M1.win_type = AUDIO_FTT_HANNING_WIN;
 800154c:	4b73      	ldr	r3, [pc, #460]	; (800171c <main+0x21c>)
 800154e:	2202      	movs	r2, #2
 8001550:	60da      	str	r2, [r3, #12]
	audio_fft_M1.output = MAGNITUDE;
 8001552:	4b72      	ldr	r3, [pc, #456]	; (800171c <main+0x21c>)
 8001554:	2201      	movs	r2, #1
 8001556:	611a      	str	r2, [r3, #16]
	AUDIO_FFT_Init(&audio_fft_M1);
 8001558:	4870      	ldr	r0, [pc, #448]	; (800171c <main+0x21c>)
 800155a:	f7ff fc4f 	bl	8000dfc <AUDIO_FFT_Init>

	/* Allocate output buffer */
	FFT_Out = calloc(audio_fft_M1.FFT_len / 2, sizeof(float));
 800155e:	4b6f      	ldr	r3, [pc, #444]	; (800171c <main+0x21c>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	085b      	lsrs	r3, r3, #1
 8001564:	2104      	movs	r1, #4
 8001566:	4618      	mov	r0, r3
 8001568:	f006 fbc0 	bl	8007cec <calloc>
 800156c:	4603      	mov	r3, r0
 800156e:	461a      	mov	r2, r3
 8001570:	4b6c      	ldr	r3, [pc, #432]	; (8001724 <main+0x224>)
 8001572:	601a      	str	r2, [r3, #0]
	FFT_Average = calloc(audio_fft_M1.FFT_len / 2, sizeof(float));
 8001574:	4b69      	ldr	r3, [pc, #420]	; (800171c <main+0x21c>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	085b      	lsrs	r3, r3, #1
 800157a:	2104      	movs	r1, #4
 800157c:	4618      	mov	r0, r3
 800157e:	f006 fbb5 	bl	8007cec <calloc>
 8001582:	4603      	mov	r3, r0
 8001584:	461a      	mov	r2, r3
 8001586:	4b68      	ldr	r3, [pc, #416]	; (8001728 <main+0x228>)
 8001588:	601a      	str	r2, [r3, #0]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		if (completo==1)
 800158a:	4b68      	ldr	r3, [pc, #416]	; (800172c <main+0x22c>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d1fb      	bne.n	800158a <main+0x8a>
		{
			AUDIO_FFT_Data_Input(adc_buf, ADC_BUF_LEN, &audio_fft_M1);
 8001592:	4a62      	ldr	r2, [pc, #392]	; (800171c <main+0x21c>)
 8001594:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001598:	485e      	ldr	r0, [pc, #376]	; (8001714 <main+0x214>)
 800159a:	f7ff fcf9 	bl	8000f90 <AUDIO_FFT_Data_Input>
			AUDIO_FFT_Process(&audio_fft_M1, FFT_Out);
 800159e:	4b61      	ldr	r3, [pc, #388]	; (8001724 <main+0x224>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4619      	mov	r1, r3
 80015a4:	485d      	ldr	r0, [pc, #372]	; (800171c <main+0x21c>)
 80015a6:	f7ff fd5d 	bl	8001064 <AUDIO_FFT_Process>

			completo = 0;
 80015aa:	4b60      	ldr	r3, [pc, #384]	; (800172c <main+0x22c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
			uint16_t prueba[513] ;
			prueba[0]=0xabcd;
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 80015b6:	801a      	strh	r2, [r3, #0]
			for (int i=0; i<512; i++){
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 80015be:	e017      	b.n	80015f0 <main+0xf0>
				prueba[i+1]=FFT_Out[i];
 80015c0:	4b58      	ldr	r3, [pc, #352]	; (8001724 <main+0x224>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015da:	ee17 3a90 	vmov	r3, s15
 80015de:	b299      	uxth	r1, r3
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0; i<512; i++){
 80015e6:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80015ea:	3301      	adds	r3, #1
 80015ec:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 80015f0:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80015f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015f8:	dbe2      	blt.n	80015c0 <main+0xc0>
			}
			//memcpy(prueba, FFT_Out, 512);
			//HAL_UART_Transmit_IT(&huart2, &prueba, 513);
			float suma = FFT_Out[2]+FFT_Out[3]+FFT_Out[4]+FFT_Out[5]+FFT_Out[6]+FFT_Out[7]+FFT_Out[8]+FFT_Out[9];
 80015fa:	4b4a      	ldr	r3, [pc, #296]	; (8001724 <main+0x224>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	3308      	adds	r3, #8
 8001600:	ed93 7a00 	vldr	s14, [r3]
 8001604:	4b47      	ldr	r3, [pc, #284]	; (8001724 <main+0x224>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	330c      	adds	r3, #12
 800160a:	edd3 7a00 	vldr	s15, [r3]
 800160e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001612:	4b44      	ldr	r3, [pc, #272]	; (8001724 <main+0x224>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	3310      	adds	r3, #16
 8001618:	edd3 7a00 	vldr	s15, [r3]
 800161c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001620:	4b40      	ldr	r3, [pc, #256]	; (8001724 <main+0x224>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	3314      	adds	r3, #20
 8001626:	edd3 7a00 	vldr	s15, [r3]
 800162a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800162e:	4b3d      	ldr	r3, [pc, #244]	; (8001724 <main+0x224>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	3318      	adds	r3, #24
 8001634:	edd3 7a00 	vldr	s15, [r3]
 8001638:	ee37 7a27 	vadd.f32	s14, s14, s15
 800163c:	4b39      	ldr	r3, [pc, #228]	; (8001724 <main+0x224>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	331c      	adds	r3, #28
 8001642:	edd3 7a00 	vldr	s15, [r3]
 8001646:	ee37 7a27 	vadd.f32	s14, s14, s15
 800164a:	4b36      	ldr	r3, [pc, #216]	; (8001724 <main+0x224>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	3320      	adds	r3, #32
 8001650:	edd3 7a00 	vldr	s15, [r3]
 8001654:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001658:	4b32      	ldr	r3, [pc, #200]	; (8001724 <main+0x224>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3324      	adds	r3, #36	; 0x24
 800165e:	edd3 7a00 	vldr	s15, [r3]
 8001662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001666:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800166a:	edc3 7a00 	vstr	s15, [r3]
			if (suma>0.03f){
 800166e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001672:	edd3 7a00 	vldr	s15, [r3]
 8001676:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001730 <main+0x230>
 800167a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800167e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001682:	dd0a      	ble.n	800169a <main+0x19a>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001684:	2201      	movs	r2, #1
 8001686:	2102      	movs	r1, #2
 8001688:	482a      	ldr	r0, [pc, #168]	; (8001734 <main+0x234>)
 800168a:	f002 ff43 	bl	8004514 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	2101      	movs	r1, #1
 8001692:	4829      	ldr	r0, [pc, #164]	; (8001738 <main+0x238>)
 8001694:	f002 ff3e 	bl	8004514 <HAL_GPIO_WritePin>
 8001698:	e01f      	b.n	80016da <main+0x1da>
			}
			else if(suma>0.02f) {
 800169a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800169e:	edd3 7a00 	vldr	s15, [r3]
 80016a2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800173c <main+0x23c>
 80016a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ae:	dd0a      	ble.n	80016c6 <main+0x1c6>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2102      	movs	r1, #2
 80016b4:	481f      	ldr	r0, [pc, #124]	; (8001734 <main+0x234>)
 80016b6:	f002 ff2d 	bl	8004514 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80016ba:	2201      	movs	r2, #1
 80016bc:	2101      	movs	r1, #1
 80016be:	481e      	ldr	r0, [pc, #120]	; (8001738 <main+0x238>)
 80016c0:	f002 ff28 	bl	8004514 <HAL_GPIO_WritePin>
 80016c4:	e009      	b.n	80016da <main+0x1da>
			}
			else{
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2102      	movs	r1, #2
 80016ca:	481a      	ldr	r0, [pc, #104]	; (8001734 <main+0x234>)
 80016cc:	f002 ff22 	bl	8004514 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2101      	movs	r1, #1
 80016d4:	4818      	ldr	r0, [pc, #96]	; (8001738 <main+0x238>)
 80016d6:	f002 ff1d 	bl	8004514 <HAL_GPIO_WritePin>
			}

			huart2.Instance->CR3 |= USART_CR3_DMAT;
 80016da:	4b19      	ldr	r3, [pc, #100]	; (8001740 <main+0x240>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	4b17      	ldr	r3, [pc, #92]	; (8001740 <main+0x240>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016e8:	609a      	str	r2, [r3, #8]
			HAL_DMA_Start_IT(&hdma_usart2_tx, prueba, (uint32_t)&huart2.Instance->TDR, 513);
 80016ea:	1d39      	adds	r1, r7, #4
 80016ec:	4b14      	ldr	r3, [pc, #80]	; (8001740 <main+0x240>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	3328      	adds	r3, #40	; 0x28
 80016f2:	461a      	mov	r2, r3
 80016f4:	f240 2301 	movw	r3, #513	; 0x201
 80016f8:	4805      	ldr	r0, [pc, #20]	; (8001710 <main+0x210>)
 80016fa:	f002 fb09 	bl	8003d10 <HAL_DMA_Start_IT>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 80016fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001702:	4904      	ldr	r1, [pc, #16]	; (8001714 <main+0x214>)
 8001704:	4804      	ldr	r0, [pc, #16]	; (8001718 <main+0x218>)
 8001706:	f001 fa65 	bl	8002bd4 <HAL_ADC_Start_DMA>
		if (completo==1)
 800170a:	e73e      	b.n	800158a <main+0x8a>
 800170c:	08001fed 	.word	0x08001fed
 8001710:	20000108 	.word	0x20000108
 8001714:	2000021c 	.word	0x2000021c
 8001718:	200000a0 	.word	0x200000a0
 800171c:	200001cc 	.word	0x200001cc
 8001720:	0002ee00 	.word	0x0002ee00
 8001724:	20000218 	.word	0x20000218
 8001728:	20000168 	.word	0x20000168
 800172c:	20000090 	.word	0x20000090
 8001730:	3cf5c28f 	.word	0x3cf5c28f
 8001734:	48001000 	.word	0x48001000
 8001738:	48000c00 	.word	0x48000c00
 800173c:	3ca3d70a 	.word	0x3ca3d70a
 8001740:	2000221c 	.word	0x2000221c

08001744 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b0be      	sub	sp, #248	; 0xf8
 8001748:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800174a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800174e:	2244      	movs	r2, #68	; 0x44
 8001750:	2100      	movs	r1, #0
 8001752:	4618      	mov	r0, r3
 8001754:	f006 fb07 	bl	8007d66 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001758:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	229c      	movs	r2, #156	; 0x9c
 800176c:	2100      	movs	r1, #0
 800176e:	4618      	mov	r0, r3
 8001770:	f006 faf9 	bl	8007d66 <memset>

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001774:	2000      	movs	r0, #0
 8001776:	f002 ff1f 	bl	80045b8 <HAL_PWREx_ControlVoltageScaling>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <SystemClock_Config+0x40>
	{
		Error_Handler();
 8001780:	f000 fc68 	bl	8002054 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001784:	2302      	movs	r3, #2
 8001786:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800178a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800178e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001792:	2340      	movs	r3, #64	; 0x40
 8001794:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001798:	2302      	movs	r3, #2
 800179a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800179e:	2302      	movs	r3, #2
 80017a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	RCC_OscInitStruct.PLL.PLLM = 2;
 80017a4:	2302      	movs	r3, #2
 80017a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	RCC_OscInitStruct.PLL.PLLN = 30;
 80017aa:	231e      	movs	r3, #30
 80017ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017b0:	2302      	movs	r3, #2
 80017b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017b6:	2302      	movs	r3, #2
 80017b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017bc:	2302      	movs	r3, #2
 80017be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80017c6:	4618      	mov	r0, r3
 80017c8:	f002 ffaa 	bl	8004720 <HAL_RCC_OscConfig>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <SystemClock_Config+0x92>
	{
		Error_Handler();
 80017d2:	f000 fc3f 	bl	8002054 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d6:	230f      	movs	r3, #15
 80017d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017dc:	2303      	movs	r3, #3
 80017de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017f4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80017f8:	2105      	movs	r1, #5
 80017fa:	4618      	mov	r0, r3
 80017fc:	f003 fbb6 	bl	8004f6c <HAL_RCC_ClockConfig>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8001806:	f000 fc25 	bl	8002054 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 800180a:	f244 0302 	movw	r3, #16386	; 0x4002
 800180e:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001810:	2300      	movs	r3, #0
 8001812:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001814:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001818:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800181c:	2302      	movs	r3, #2
 800181e:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8001820:	2305      	movs	r3, #5
 8001822:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 8001824:	2360      	movs	r3, #96	; 0x60
 8001826:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV25;
 8001828:	2319      	movs	r3, #25
 800182a:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 800182c:	2304      	movs	r3, #4
 800182e:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8001830:	2304      	movs	r3, #4
 8001832:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001834:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001838:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	4618      	mov	r0, r3
 800183e:	f003 fe41 	bl	80054c4 <HAL_RCCEx_PeriphCLKConfig>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <SystemClock_Config+0x108>
	{
		Error_Handler();
 8001848:	f000 fc04 	bl	8002054 <Error_Handler>
	}
}
 800184c:	bf00      	nop
 800184e:	37f8      	adds	r7, #248	; 0xf8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800185a:	463b      	mov	r3, r7
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
 8001868:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 800186a:	4b29      	ldr	r3, [pc, #164]	; (8001910 <MX_ADC1_Init+0xbc>)
 800186c:	4a29      	ldr	r2, [pc, #164]	; (8001914 <MX_ADC1_Init+0xc0>)
 800186e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001870:	4b27      	ldr	r3, [pc, #156]	; (8001910 <MX_ADC1_Init+0xbc>)
 8001872:	2200      	movs	r2, #0
 8001874:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001876:	4b26      	ldr	r3, [pc, #152]	; (8001910 <MX_ADC1_Init+0xbc>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800187c:	4b24      	ldr	r3, [pc, #144]	; (8001910 <MX_ADC1_Init+0xbc>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001882:	4b23      	ldr	r3, [pc, #140]	; (8001910 <MX_ADC1_Init+0xbc>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001888:	4b21      	ldr	r3, [pc, #132]	; (8001910 <MX_ADC1_Init+0xbc>)
 800188a:	2204      	movs	r2, #4
 800188c:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800188e:	4b20      	ldr	r3, [pc, #128]	; (8001910 <MX_ADC1_Init+0xbc>)
 8001890:	2200      	movs	r2, #0
 8001892:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001894:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <MX_ADC1_Init+0xbc>)
 8001896:	2201      	movs	r2, #1
 8001898:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 800189a:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <MX_ADC1_Init+0xbc>)
 800189c:	2201      	movs	r2, #1
 800189e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018a0:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <MX_ADC1_Init+0xbc>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018a8:	4b19      	ldr	r3, [pc, #100]	; (8001910 <MX_ADC1_Init+0xbc>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018ae:	4b18      	ldr	r3, [pc, #96]	; (8001910 <MX_ADC1_Init+0xbc>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = ENABLE;
 80018b4:	4b16      	ldr	r3, [pc, #88]	; (8001910 <MX_ADC1_Init+0xbc>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018bc:	4b14      	ldr	r3, [pc, #80]	; (8001910 <MX_ADC1_Init+0xbc>)
 80018be:	2200      	movs	r2, #0
 80018c0:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80018c2:	4b13      	ldr	r3, [pc, #76]	; (8001910 <MX_ADC1_Init+0xbc>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018ca:	4811      	ldr	r0, [pc, #68]	; (8001910 <MX_ADC1_Init+0xbc>)
 80018cc:	f001 f838 	bl	8002940 <HAL_ADC_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_ADC1_Init+0x86>
	{
		Error_Handler();
 80018d6:	f000 fbbd 	bl	8002054 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80018da:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <MX_ADC1_Init+0xc4>)
 80018dc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80018de:	2306      	movs	r3, #6
 80018e0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80018e6:	4b0d      	ldr	r3, [pc, #52]	; (800191c <MX_ADC1_Init+0xc8>)
 80018e8:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018ea:	2304      	movs	r3, #4
 80018ec:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018f2:	463b      	mov	r3, r7
 80018f4:	4619      	mov	r1, r3
 80018f6:	4806      	ldr	r0, [pc, #24]	; (8001910 <MX_ADC1_Init+0xbc>)
 80018f8:	f001 fa5c 	bl	8002db4 <HAL_ADC_ConfigChannel>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_ADC1_Init+0xb2>
	{
		Error_Handler();
 8001902:	f000 fba7 	bl	8002054 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200000a0 	.word	0x200000a0
 8001914:	50040000 	.word	0x50040000
 8001918:	04300002 	.word	0x04300002
 800191c:	407f0000 	.word	0x407f0000

08001920 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001924:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <MX_USART2_UART_Init+0x94>)
 8001926:	4a24      	ldr	r2, [pc, #144]	; (80019b8 <MX_USART2_UART_Init+0x98>)
 8001928:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800192a:	4b22      	ldr	r3, [pc, #136]	; (80019b4 <MX_USART2_UART_Init+0x94>)
 800192c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001930:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001932:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <MX_USART2_UART_Init+0x94>)
 8001934:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001938:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800193a:	4b1e      	ldr	r3, [pc, #120]	; (80019b4 <MX_USART2_UART_Init+0x94>)
 800193c:	2200      	movs	r2, #0
 800193e:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001940:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <MX_USART2_UART_Init+0x94>)
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001946:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <MX_USART2_UART_Init+0x94>)
 8001948:	220c      	movs	r2, #12
 800194a:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <MX_USART2_UART_Init+0x94>)
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001952:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <MX_USART2_UART_Init+0x94>)
 8001954:	2200      	movs	r2, #0
 8001956:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001958:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <MX_USART2_UART_Init+0x94>)
 800195a:	2200      	movs	r2, #0
 800195c:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <MX_USART2_UART_Init+0x94>)
 8001960:	2200      	movs	r2, #0
 8001962:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <MX_USART2_UART_Init+0x94>)
 8001966:	2200      	movs	r2, #0
 8001968:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800196a:	4812      	ldr	r0, [pc, #72]	; (80019b4 <MX_USART2_UART_Init+0x94>)
 800196c:	f004 fb12 	bl	8005f94 <HAL_UART_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_USART2_UART_Init+0x5a>
	{
		Error_Handler();
 8001976:	f000 fb6d 	bl	8002054 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800197a:	2100      	movs	r1, #0
 800197c:	480d      	ldr	r0, [pc, #52]	; (80019b4 <MX_USART2_UART_Init+0x94>)
 800197e:	f004 ffce 	bl	800691e <HAL_UARTEx_SetTxFifoThreshold>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_USART2_UART_Init+0x6c>
	{
		Error_Handler();
 8001988:	f000 fb64 	bl	8002054 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800198c:	2100      	movs	r1, #0
 800198e:	4809      	ldr	r0, [pc, #36]	; (80019b4 <MX_USART2_UART_Init+0x94>)
 8001990:	f005 f803 	bl	800699a <HAL_UARTEx_SetRxFifoThreshold>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_USART2_UART_Init+0x7e>
	{
		Error_Handler();
 800199a:	f000 fb5b 	bl	8002054 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <MX_USART2_UART_Init+0x94>)
 80019a0:	f004 ff84 	bl	80068ac <HAL_UARTEx_DisableFifoMode>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_USART2_UART_Init+0x8e>
	{
		Error_Handler();
 80019aa:	f000 fb53 	bl	8002054 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	2000221c 	.word	0x2000221c
 80019b8:	40004400 	.word	0x40004400

080019bc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80019c2:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <MX_DMA_Init+0x60>)
 80019c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c6:	4a15      	ldr	r2, [pc, #84]	; (8001a1c <MX_DMA_Init+0x60>)
 80019c8:	f043 0304 	orr.w	r3, r3, #4
 80019cc:	6493      	str	r3, [r2, #72]	; 0x48
 80019ce:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <MX_DMA_Init+0x60>)
 80019d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019d2:	f003 0304 	and.w	r3, r3, #4
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <MX_DMA_Init+0x60>)
 80019dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019de:	4a0f      	ldr	r2, [pc, #60]	; (8001a1c <MX_DMA_Init+0x60>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6493      	str	r3, [r2, #72]	; 0x48
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <MX_DMA_Init+0x60>)
 80019e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	200b      	movs	r0, #11
 80019f8:	f002 f8ab 	bl	8003b52 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019fc:	200b      	movs	r0, #11
 80019fe:	f002 f8c4 	bl	8003b8a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	200c      	movs	r0, #12
 8001a08:	f002 f8a3 	bl	8003b52 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a0c:	200c      	movs	r0, #12
 8001a0e:	f002 f8bc 	bl	8003b8a <HAL_NVIC_EnableIRQ>

}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000

08001a20 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08e      	sub	sp, #56	; 0x38
 8001a24:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
 8001a34:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001a36:	4bb5      	ldr	r3, [pc, #724]	; (8001d0c <MX_GPIO_Init+0x2ec>)
 8001a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3a:	4ab4      	ldr	r2, [pc, #720]	; (8001d0c <MX_GPIO_Init+0x2ec>)
 8001a3c:	f043 0310 	orr.w	r3, r3, #16
 8001a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a42:	4bb2      	ldr	r3, [pc, #712]	; (8001d0c <MX_GPIO_Init+0x2ec>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	623b      	str	r3, [r7, #32]
 8001a4c:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4e:	4baf      	ldr	r3, [pc, #700]	; (8001d0c <MX_GPIO_Init+0x2ec>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a52:	4aae      	ldr	r2, [pc, #696]	; (8001d0c <MX_GPIO_Init+0x2ec>)
 8001a54:	f043 0302 	orr.w	r3, r3, #2
 8001a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a5a:	4bac      	ldr	r3, [pc, #688]	; (8001d0c <MX_GPIO_Init+0x2ec>)
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	61fb      	str	r3, [r7, #28]
 8001a64:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001a66:	4ba9      	ldr	r3, [pc, #676]	; (8001d0c <MX_GPIO_Init+0x2ec>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6a:	4aa8      	ldr	r2, [pc, #672]	; (8001d0c <MX_GPIO_Init+0x2ec>)
 8001a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a72:	4ba6      	ldr	r3, [pc, #664]	; (8001d0c <MX_GPIO_Init+0x2ec>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a7a:	61bb      	str	r3, [r7, #24]
 8001a7c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7e:	4ba3      	ldr	r3, [pc, #652]	; (8001d0c <MX_GPIO_Init+0x2ec>)
 8001a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a82:	4aa2      	ldr	r2, [pc, #648]	; (8001d0c <MX_GPIO_Init+0x2ec>)
 8001a84:	f043 0304 	orr.w	r3, r3, #4
 8001a88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a8a:	4ba0      	ldr	r3, [pc, #640]	; (8001d0c <MX_GPIO_Init+0x2ec>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	4b9d      	ldr	r3, [pc, #628]	; (8001d0c <MX_GPIO_Init+0x2ec>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9a:	4a9c      	ldr	r2, [pc, #624]	; (8001d0c <MX_GPIO_Init+0x2ec>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa2:	4b9a      	ldr	r3, [pc, #616]	; (8001d0c <MX_GPIO_Init+0x2ec>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001aae:	4b97      	ldr	r3, [pc, #604]	; (8001d0c <MX_GPIO_Init+0x2ec>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab2:	4a96      	ldr	r2, [pc, #600]	; (8001d0c <MX_GPIO_Init+0x2ec>)
 8001ab4:	f043 0308 	orr.w	r3, r3, #8
 8001ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aba:	4b94      	ldr	r3, [pc, #592]	; (8001d0c <MX_GPIO_Init+0x2ec>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001ac6:	4b91      	ldr	r3, [pc, #580]	; (8001d0c <MX_GPIO_Init+0x2ec>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aca:	4a90      	ldr	r2, [pc, #576]	; (8001d0c <MX_GPIO_Init+0x2ec>)
 8001acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad2:	4b8e      	ldr	r3, [pc, #568]	; (8001d0c <MX_GPIO_Init+0x2ec>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
	HAL_PWREx_EnableVddIO2();
 8001ade:	f002 fe0f 	bl	8004700 <HAL_PWREx_EnableVddIO2>
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001ae2:	4b8a      	ldr	r3, [pc, #552]	; (8001d0c <MX_GPIO_Init+0x2ec>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae6:	4a89      	ldr	r2, [pc, #548]	; (8001d0c <MX_GPIO_Init+0x2ec>)
 8001ae8:	f043 0320 	orr.w	r3, r3, #32
 8001aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aee:	4b87      	ldr	r3, [pc, #540]	; (8001d0c <MX_GPIO_Init+0x2ec>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	f003 0320 	and.w	r3, r3, #32
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, LED1_Pin|DCDC_2_EN_Pin, GPIO_PIN_RESET);
 8001afa:	2200      	movs	r2, #0
 8001afc:	f242 0102 	movw	r1, #8194	; 0x2002
 8001b00:	4883      	ldr	r0, [pc, #524]	; (8001d10 <MX_GPIO_Init+0x2f0>)
 8001b02:	f002 fd07 	bl	8004514 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin, GPIO_PIN_RESET);
 8001b06:	2200      	movs	r2, #0
 8001b08:	f648 0181 	movw	r1, #34945	; 0x8881
 8001b0c:	4881      	ldr	r0, [pc, #516]	; (8001d14 <MX_GPIO_Init+0x2f4>)
 8001b0e:	f002 fd01 	bl	8004514 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BLE_RST_GPIO_Port, BLE_RST_Pin, GPIO_PIN_RESET);
 8001b12:	2200      	movs	r2, #0
 8001b14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b1c:	f002 fcfa 	bl	8004514 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2140      	movs	r1, #64	; 0x40
 8001b24:	487c      	ldr	r0, [pc, #496]	; (8001d18 <MX_GPIO_Init+0x2f8>)
 8001b26:	f002 fcf5 	bl	8004514 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f247 5128 	movw	r1, #29992	; 0x7528
 8001b30:	487a      	ldr	r0, [pc, #488]	; (8001d1c <MX_GPIO_Init+0x2fc>)
 8001b32:	f002 fcef 	bl	8004514 <HAL_GPIO_WritePin>
			|WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, BLE_SPI_CS_Pin|SEL1_2_Pin, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2121      	movs	r1, #33	; 0x21
 8001b3a:	4879      	ldr	r0, [pc, #484]	; (8001d20 <MX_GPIO_Init+0x300>)
 8001b3c:	f002 fcea 	bl	8004514 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SPI2_MOSI_p2_Pin|PB11_Pin, GPIO_PIN_RESET);
 8001b40:	2200      	movs	r2, #0
 8001b42:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8001b46:	4877      	ldr	r0, [pc, #476]	; (8001d24 <MX_GPIO_Init+0x304>)
 8001b48:	f002 fce4 	bl	8004514 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : BOOT0_PE0_Pin BLE_TEST8_Pin */
	GPIO_InitStruct.Pin = BOOT0_PE0_Pin|BLE_TEST8_Pin;
 8001b4c:	f240 4301 	movw	r3, #1025	; 0x401
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b52:	2300      	movs	r3, #0
 8001b54:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b5e:	4619      	mov	r1, r3
 8001b60:	486b      	ldr	r0, [pc, #428]	; (8001d10 <MX_GPIO_Init+0x2f0>)
 8001b62:	f002 fb45 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB9_Pin PB8_Pin PB14_Pin CHRGB0_Pin */
	GPIO_InitStruct.Pin = PB9_Pin|PB8_Pin|PB14_Pin|CHRGB0_Pin;
 8001b66:	f244 3301 	movw	r3, #17153	; 0x4301
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b78:	4619      	mov	r1, r3
 8001b7a:	486a      	ldr	r0, [pc, #424]	; (8001d24 <MX_GPIO_Init+0x304>)
 8001b7c:	f002 fb38 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT0_PE0H3_Pin */
	GPIO_InitStruct.Pin = BOOT0_PE0H3_Pin;
 8001b80:	2308      	movs	r3, #8
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(BOOT0_PE0H3_GPIO_Port, &GPIO_InitStruct);
 8001b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b90:	4619      	mov	r1, r3
 8001b92:	4865      	ldr	r0, [pc, #404]	; (8001d28 <MX_GPIO_Init+0x308>)
 8001b94:	f002 fb2c 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI3_MISO_Pin SPI3_MOSI_Pin SPI3_CLK_Pin */
	GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin|SPI3_CLK_Pin;
 8001b98:	2338      	movs	r3, #56	; 0x38
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ba8:	2306      	movs	r3, #6
 8001baa:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	485c      	ldr	r0, [pc, #368]	; (8001d24 <MX_GPIO_Init+0x304>)
 8001bb4:	f002 fb1c 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SDMMC_D3_Pin SDMMC_D2_Pin SDMMC_D1_Pin SDMMC_CK_Pin
                           SDMMC_D0_Pin */
	GPIO_InitStruct.Pin = SDMMC_D3_Pin|SDMMC_D2_Pin|SDMMC_D1_Pin|SDMMC_CK_Pin
 8001bb8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
			|SDMMC_D0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001bca:	230c      	movs	r3, #12
 8001bcc:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4850      	ldr	r0, [pc, #320]	; (8001d18 <MX_GPIO_Init+0x2f8>)
 8001bd6:	f002 fb0b 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : BLE_TEST9_Pin WIFI_DRDY_Pin INT1_DHC_Pin INT_STT_Pin
                           INT1_ADWB_Pin */
	GPIO_InitStruct.Pin = BLE_TEST9_Pin|WIFI_DRDY_Pin|INT1_DHC_Pin|INT_STT_Pin
 8001bda:	f64c 1308 	movw	r3, #51464	; 0xc908
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
			|INT1_ADWB_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001be0:	4b52      	ldr	r3, [pc, #328]	; (8001d2c <MX_GPIO_Init+0x30c>)
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bec:	4619      	mov	r1, r3
 8001bee:	4848      	ldr	r0, [pc, #288]	; (8001d10 <MX_GPIO_Init+0x2f0>)
 8001bf0:	f002 fafe 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI2_CLK_Pin */
	GPIO_InitStruct.Pin = SPI2_CLK_Pin;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c00:	2303      	movs	r3, #3
 8001c02:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c04:	2305      	movs	r3, #5
 8001c06:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(SPI2_CLK_GPIO_Port, &GPIO_InitStruct);
 8001c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4841      	ldr	r0, [pc, #260]	; (8001d14 <MX_GPIO_Init+0x2f4>)
 8001c10:	f002 faee 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : EX_PWM_Pin */
	GPIO_InitStruct.Pin = EX_PWM_Pin;
 8001c14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2300      	movs	r3, #0
 8001c24:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c26:	2301      	movs	r3, #1
 8001c28:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(EX_PWM_GPIO_Port, &GPIO_InitStruct);
 8001c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c34:	f002 fadc 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_DP_Pin OTG_FS_DM_Pin */
	GPIO_InitStruct.Pin = OTG_FS_DP_Pin|OTG_FS_DM_Pin;
 8001c38:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c46:	2303      	movs	r3, #3
 8001c48:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c4a:	230a      	movs	r3, #10
 8001c4c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c52:	4619      	mov	r1, r3
 8001c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c58:	f002 faca 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SAI1_SCK_A_Pin SAI1_MCLK_A_Pin SAI1_FS_A_DFSDM_D3_Pin SAI1_SD_A_Pin
                           SAI1_SD_B_Pin */
	GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_MCLK_A_Pin|SAI1_FS_A_DFSDM_D3_Pin|SAI1_SD_A_Pin
 8001c5c:	23f4      	movs	r3, #244	; 0xf4
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
			|SAI1_SD_B_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001c6c:	230d      	movs	r3, #13
 8001c6e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c74:	4619      	mov	r1, r3
 8001c76:	4826      	ldr	r0, [pc, #152]	; (8001d10 <MX_GPIO_Init+0x2f0>)
 8001c78:	f002 faba 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_Pin DCDC_2_EN_Pin */
	GPIO_InitStruct.Pin = LED1_Pin|DCDC_2_EN_Pin;
 8001c7c:	f242 0302 	movw	r3, #8194	; 0x2002
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c82:	2301      	movs	r3, #1
 8001c84:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c92:	4619      	mov	r1, r3
 8001c94:	481e      	ldr	r0, [pc, #120]	; (8001d10 <MX_GPIO_Init+0x2f0>)
 8001c96:	f002 faab 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED2_Pin WIFI_WAKEUP_Pin CS_DH_Pin EX_RESET_Pin */
	GPIO_InitStruct.Pin = LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin;
 8001c9a:	f648 0381 	movw	r3, #34945	; 0x8881
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4818      	ldr	r0, [pc, #96]	; (8001d14 <MX_GPIO_Init+0x2f4>)
 8001cb4:	f002 fa9c 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA10_Pin PA9_Pin PA0_Pin DAC1_OUT1_Pin
                           PA1_Pin */
	GPIO_InitStruct.Pin = PA10_Pin|PA9_Pin|PA0_Pin|DAC1_OUT1_Pin
 8001cb8:	f240 6313 	movw	r3, #1555	; 0x613
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
			|PA1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd0:	f002 fa8e 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : DFSDM1_DATIN5_Pin DFSDM1_D7_Pin */
	GPIO_InitStruct.Pin = DFSDM1_DATIN5_Pin|DFSDM1_D7_Pin;
 8001cd4:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001ce6:	2306      	movs	r3, #6
 8001ce8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cee:	4619      	mov	r1, r3
 8001cf0:	480c      	ldr	r0, [pc, #48]	; (8001d24 <MX_GPIO_Init+0x304>)
 8001cf2:	f002 fa7d 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG12_Pin PG10_Pin PG9_Pin */
	GPIO_InitStruct.Pin = PG12_Pin|PG10_Pin|PG9_Pin;
 8001cf6:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d08:	4619      	mov	r1, r3
 8001d0a:	e011      	b.n	8001d30 <MX_GPIO_Init+0x310>
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	48001000 	.word	0x48001000
 8001d14:	48000c00 	.word	0x48000c00
 8001d18:	48000800 	.word	0x48000800
 8001d1c:	48001400 	.word	0x48001400
 8001d20:	48001800 	.word	0x48001800
 8001d24:	48000400 	.word	0x48000400
 8001d28:	48001c00 	.word	0x48001c00
 8001d2c:	10110000 	.word	0x10110000
 8001d30:	48a7      	ldr	r0, [pc, #668]	; (8001fd0 <MX_GPIO_Init+0x5b0>)
 8001d32:	f002 fa5d 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SDMMC_CMD_Pin */
	GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001d36:	2304      	movs	r3, #4
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d42:	2303      	movs	r3, #3
 8001d44:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d46:	230c      	movs	r3, #12
 8001d48:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4e:	4619      	mov	r1, r3
 8001d50:	48a0      	ldr	r0, [pc, #640]	; (8001fd4 <MX_GPIO_Init+0x5b4>)
 8001d52:	f002 fa4d 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : BLE_RST_Pin */
	GPIO_InitStruct.Pin = BLE_RST_Pin;
 8001d56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d64:	2300      	movs	r3, #0
 8001d66:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(BLE_RST_GPIO_Port, &GPIO_InitStruct);
 8001d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d72:	f002 fa3d 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : WIFI_RST_Pin */
	GPIO_InitStruct.Pin = WIFI_RST_Pin;
 8001d76:	2340      	movs	r3, #64	; 0x40
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d82:	2300      	movs	r3, #0
 8001d84:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 8001d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4892      	ldr	r0, [pc, #584]	; (8001fd8 <MX_GPIO_Init+0x5b8>)
 8001d8e:	f002 fa2f 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : I2C2_SMBA_Pin I2C2_SDA_Pin I2C2_SDAF0_Pin */
	GPIO_InitStruct.Pin = I2C2_SMBA_Pin|I2C2_SDA_Pin|I2C2_SDAF0_Pin;
 8001d92:	2307      	movs	r3, #7
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d96:	2312      	movs	r3, #18
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001da2:	2304      	movs	r3, #4
 8001da4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001daa:	4619      	mov	r1, r3
 8001dac:	488b      	ldr	r0, [pc, #556]	; (8001fdc <MX_GPIO_Init+0x5bc>)
 8001dae:	f002 fa1f 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_WIFI_Pin C_EN_Pin CS_ADWB_Pin STSAFE_RESET_Pin
                           WIFI_BOOT0_Pin CS_DHC_Pin SEL3_4_Pin */
	GPIO_InitStruct.Pin = CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 8001db2:	f247 5328 	movw	r3, #29992	; 0x7528
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
			|WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db8:	2301      	movs	r3, #1
 8001dba:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4884      	ldr	r0, [pc, #528]	; (8001fdc <MX_GPIO_Init+0x5bc>)
 8001dcc:	f002 fa10 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : I2C3_SDA_Pin I2C3_SCL_Pin */
	GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 8001dd0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd6:	2312      	movs	r3, #18
 8001dd8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dde:	2303      	movs	r3, #3
 8001de0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001de2:	2304      	movs	r3, #4
 8001de4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dea:	4619      	mov	r1, r3
 8001dec:	4878      	ldr	r0, [pc, #480]	; (8001fd0 <MX_GPIO_Init+0x5b0>)
 8001dee:	f002 f9ff 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SW_SEL_Pin */
	GPIO_InitStruct.Pin = SW_SEL_Pin;
 8001df2:	2340      	movs	r3, #64	; 0x40
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001e02:	2302      	movs	r3, #2
 8001e04:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(SW_SEL_GPIO_Port, &GPIO_InitStruct);
 8001e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4873      	ldr	r0, [pc, #460]	; (8001fdc <MX_GPIO_Init+0x5bc>)
 8001e0e:	f002 f9ef 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : INT2_DHC_Pin PGOOD_Pin INT_M_Pin */
	GPIO_InitStruct.Pin = INT2_DHC_Pin|PGOOD_Pin|INT_M_Pin;
 8001e12:	f44f 7324 	mov.w	r3, #656	; 0x290
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e18:	4b71      	ldr	r3, [pc, #452]	; (8001fe0 <MX_GPIO_Init+0x5c0>)
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e24:	4619      	mov	r1, r3
 8001e26:	486d      	ldr	r0, [pc, #436]	; (8001fdc <MX_GPIO_Init+0x5bc>)
 8001e28:	f002 f9e2 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin SPI1_CLK_Pin */
	GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin|SPI1_CLK_Pin;
 8001e2c:	231c      	movs	r3, #28
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	2302      	movs	r3, #2
 8001e32:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e3c:	2305      	movs	r3, #5
 8001e3e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e44:	4619      	mov	r1, r3
 8001e46:	4862      	ldr	r0, [pc, #392]	; (8001fd0 <MX_GPIO_Init+0x5b0>)
 8001e48:	f002 f9d2 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : BLE_SPI_CS_Pin SEL1_2_Pin */
	GPIO_InitStruct.Pin = BLE_SPI_CS_Pin|SEL1_2_Pin;
 8001e4c:	2321      	movs	r3, #33	; 0x21
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e50:	2301      	movs	r3, #1
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e60:	4619      	mov	r1, r3
 8001e62:	485b      	ldr	r0, [pc, #364]	; (8001fd0 <MX_GPIO_Init+0x5b0>)
 8001e64:	f002 f9c4 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : INT_HTS_Pin BLE_INT_Pin */
	GPIO_InitStruct.Pin = INT_HTS_Pin|BLE_INT_Pin;
 8001e68:	2342      	movs	r3, #66	; 0x42
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e6c:	4b5c      	ldr	r3, [pc, #368]	; (8001fe0 <MX_GPIO_Init+0x5c0>)
 8001e6e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4855      	ldr	r0, [pc, #340]	; (8001fd0 <MX_GPIO_Init+0x5b0>)
 8001e7c:	f002 f9b8 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : I2C4_SCL_Pin I2C4_SDA_Pin */
	GPIO_InitStruct.Pin = I2C4_SCL_Pin|I2C4_SDA_Pin;
 8001e80:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e86:	2312      	movs	r3, #18
 8001e88:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001e92:	2304      	movs	r3, #4
 8001e94:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	484d      	ldr	r0, [pc, #308]	; (8001fd4 <MX_GPIO_Init+0x5b4>)
 8001e9e:	f002 f9a7 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI2_MISO_Pin SPI2_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8001ea2:	230c      	movs	r3, #12
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001eb2:	2305      	movs	r3, #5
 8001eb4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4846      	ldr	r0, [pc, #280]	; (8001fd8 <MX_GPIO_Init+0x5b8>)
 8001ebe:	f002 f997 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : INT2_ADWB_Pin SD_DETECT_Pin */
	GPIO_InitStruct.Pin = INT2_ADWB_Pin|SD_DETECT_Pin;
 8001ec2:	f241 0304 	movw	r3, #4100	; 0x1004
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4843      	ldr	r0, [pc, #268]	; (8001fe4 <MX_GPIO_Init+0x5c4>)
 8001ed8:	f002 f98a 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : CHRG_Pin */
	GPIO_InitStruct.Pin = CHRG_Pin;
 8001edc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CHRG_GPIO_Port, &GPIO_InitStruct);
 8001eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eee:	4619      	mov	r1, r3
 8001ef0:	483a      	ldr	r0, [pc, #232]	; (8001fdc <MX_GPIO_Init+0x5bc>)
 8001ef2:	f002 f97d 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : BUTTON_PWR_Pin */
	GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 8001ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001efc:	4b38      	ldr	r3, [pc, #224]	; (8001fe0 <MX_GPIO_Init+0x5c0>)
 8001efe:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8001f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4832      	ldr	r0, [pc, #200]	; (8001fd4 <MX_GPIO_Init+0x5b4>)
 8001f0c:	f002 f970 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
	GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8001f10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f22:	2307      	movs	r3, #7
 8001f24:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4829      	ldr	r0, [pc, #164]	; (8001fd4 <MX_GPIO_Init+0x5b4>)
 8001f2e:	f002 f95f 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : USART3_RTS_Pin USART3_CTS_Pin */
	GPIO_InitStruct.Pin = USART3_RTS_Pin|USART3_CTS_Pin;
 8001f32:	f242 0302 	movw	r3, #8194	; 0x2002
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f40:	2303      	movs	r3, #3
 8001f42:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f44:	2307      	movs	r3, #7
 8001f46:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4825      	ldr	r0, [pc, #148]	; (8001fe4 <MX_GPIO_Init+0x5c4>)
 8001f50:	f002 f94e 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : DFSDM1_CKOUT_Pin */
	GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001f54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f62:	2303      	movs	r3, #3
 8001f64:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001f66:	2306      	movs	r3, #6
 8001f68:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f6e:	4619      	mov	r1, r3
 8001f70:	481d      	ldr	r0, [pc, #116]	; (8001fe8 <MX_GPIO_Init+0x5c8>)
 8001f72:	f002 f93d 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI2_MOSI_p2_Pin PB11_Pin */
	GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|PB11_Pin;
 8001f76:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f84:	2300      	movs	r3, #0
 8001f86:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4815      	ldr	r0, [pc, #84]	; (8001fe4 <MX_GPIO_Init+0x5c4>)
 8001f90:	f002 f92e 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : INT2_DH_Pin */
	GPIO_InitStruct.Pin = INT2_DH_Pin;
 8001f94:	2304      	movs	r3, #4
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <MX_GPIO_Init+0x5c0>)
 8001f9a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(INT2_DH_GPIO_Port, &GPIO_InitStruct);
 8001fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001faa:	f002 f921 	bl	80041f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE12_Pin */
	GPIO_InitStruct.Pin = PE12_Pin;
 8001fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PE12_GPIO_Port, &GPIO_InitStruct);
 8001fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4809      	ldr	r0, [pc, #36]	; (8001fe8 <MX_GPIO_Init+0x5c8>)
 8001fc4:	f002 f914 	bl	80041f0 <HAL_GPIO_Init>

}
 8001fc8:	bf00      	nop
 8001fca:	3738      	adds	r7, #56	; 0x38
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	48001800 	.word	0x48001800
 8001fd4:	48000c00 	.word	0x48000c00
 8001fd8:	48000800 	.word	0x48000800
 8001fdc:	48001400 	.word	0x48001400
 8001fe0:	10110000 	.word	0x10110000
 8001fe4:	48000400 	.word	0x48000400
 8001fe8:	48001000 	.word	0x48001000

08001fec <DMATransferComplete>:

/* USER CODE BEGIN 4 */
void DMATransferComplete(DMA_HandleTypeDef *hdma) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]

	// Disable UART DMA mode
	huart2.Instance->CR3 &= ~USART_CR3_DMAT;
 8001ff4:	4b07      	ldr	r3, [pc, #28]	; (8002014 <DMATransferComplete+0x28>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <DMATransferComplete+0x28>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002002:	609a      	str	r2, [r3, #8]

	// Toggle LD2
	HAL_GPIO_TogglePin(GPIOE, LED1_Pin);
 8002004:	2102      	movs	r1, #2
 8002006:	4804      	ldr	r0, [pc, #16]	; (8002018 <DMATransferComplete+0x2c>)
 8002008:	f002 fa9c 	bl	8004544 <HAL_GPIO_TogglePin>
}
 800200c:	bf00      	nop
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	2000221c 	.word	0x2000221c
 8002018:	48001000 	.word	0x48001000

0800201c <HAL_ADC_ConvHalfCpltCallback>:
//Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
	// Toggle LD2

	//completo = 1;
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_ADC_ConvCpltCallback>:

//Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
	// Toggle LD2
	//HAL_GPIO_TogglePin(GPIOE, LED1_Pin);
	completo = 1;
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <HAL_ADC_ConvCpltCallback+0x1c>)
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Stop_DMA(&hadc1);
 800203e:	4804      	ldr	r0, [pc, #16]	; (8002050 <HAL_ADC_ConvCpltCallback+0x20>)
 8002040:	f000 fe4c 	bl	8002cdc <HAL_ADC_Stop_DMA>
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20000090 	.word	0x20000090
 8002050:	200000a0 	.word	0x200000a0

08002054 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002058:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800205a:	e7fe      	b.n	800205a <Error_Handler+0x6>

0800205c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002062:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <HAL_MspInit+0x44>)
 8002064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002066:	4a0e      	ldr	r2, [pc, #56]	; (80020a0 <HAL_MspInit+0x44>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6613      	str	r3, [r2, #96]	; 0x60
 800206e:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <HAL_MspInit+0x44>)
 8002070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	607b      	str	r3, [r7, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_MspInit+0x44>)
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	4a08      	ldr	r2, [pc, #32]	; (80020a0 <HAL_MspInit+0x44>)
 8002080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002084:	6593      	str	r3, [r2, #88]	; 0x58
 8002086:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_MspInit+0x44>)
 8002088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000

080020a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08a      	sub	sp, #40	; 0x28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a2a      	ldr	r2, [pc, #168]	; (800216c <HAL_ADC_MspInit+0xc8>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d14e      	bne.n	8002164 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80020c6:	4b2a      	ldr	r3, [pc, #168]	; (8002170 <HAL_ADC_MspInit+0xcc>)
 80020c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ca:	4a29      	ldr	r2, [pc, #164]	; (8002170 <HAL_ADC_MspInit+0xcc>)
 80020cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020d2:	4b27      	ldr	r3, [pc, #156]	; (8002170 <HAL_ADC_MspInit+0xcc>)
 80020d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020de:	4b24      	ldr	r3, [pc, #144]	; (8002170 <HAL_ADC_MspInit+0xcc>)
 80020e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e2:	4a23      	ldr	r2, [pc, #140]	; (8002170 <HAL_ADC_MspInit+0xcc>)
 80020e4:	f043 0304 	orr.w	r3, r3, #4
 80020e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ea:	4b21      	ldr	r3, [pc, #132]	; (8002170 <HAL_ADC_MspInit+0xcc>)
 80020ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC1_IN1_Pin|ADC1_IN2_Pin;
 80020f6:	2303      	movs	r3, #3
 80020f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80020fa:	230b      	movs	r3, #11
 80020fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002102:	f107 0314 	add.w	r3, r7, #20
 8002106:	4619      	mov	r1, r3
 8002108:	481a      	ldr	r0, [pc, #104]	; (8002174 <HAL_ADC_MspInit+0xd0>)
 800210a:	f002 f871 	bl	80041f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800210e:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <HAL_ADC_MspInit+0xd4>)
 8002110:	4a1a      	ldr	r2, [pc, #104]	; (800217c <HAL_ADC_MspInit+0xd8>)
 8002112:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002114:	4b18      	ldr	r3, [pc, #96]	; (8002178 <HAL_ADC_MspInit+0xd4>)
 8002116:	2205      	movs	r2, #5
 8002118:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800211a:	4b17      	ldr	r3, [pc, #92]	; (8002178 <HAL_ADC_MspInit+0xd4>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002120:	4b15      	ldr	r3, [pc, #84]	; (8002178 <HAL_ADC_MspInit+0xd4>)
 8002122:	2200      	movs	r2, #0
 8002124:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002126:	4b14      	ldr	r3, [pc, #80]	; (8002178 <HAL_ADC_MspInit+0xd4>)
 8002128:	2280      	movs	r2, #128	; 0x80
 800212a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800212c:	4b12      	ldr	r3, [pc, #72]	; (8002178 <HAL_ADC_MspInit+0xd4>)
 800212e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002132:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002134:	4b10      	ldr	r3, [pc, #64]	; (8002178 <HAL_ADC_MspInit+0xd4>)
 8002136:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800213a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800213c:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <HAL_ADC_MspInit+0xd4>)
 800213e:	2220      	movs	r2, #32
 8002140:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002142:	4b0d      	ldr	r3, [pc, #52]	; (8002178 <HAL_ADC_MspInit+0xd4>)
 8002144:	2200      	movs	r2, #0
 8002146:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002148:	480b      	ldr	r0, [pc, #44]	; (8002178 <HAL_ADC_MspInit+0xd4>)
 800214a:	f001 fd39 	bl	8003bc0 <HAL_DMA_Init>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8002154:	f7ff ff7e 	bl	8002054 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a07      	ldr	r2, [pc, #28]	; (8002178 <HAL_ADC_MspInit+0xd4>)
 800215c:	651a      	str	r2, [r3, #80]	; 0x50
 800215e:	4a06      	ldr	r2, [pc, #24]	; (8002178 <HAL_ADC_MspInit+0xd4>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002164:	bf00      	nop
 8002166:	3728      	adds	r7, #40	; 0x28
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	50040000 	.word	0x50040000
 8002170:	40021000 	.word	0x40021000
 8002174:	48000800 	.word	0x48000800
 8002178:	2000016c 	.word	0x2000016c
 800217c:	40020008 	.word	0x40020008

08002180 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08a      	sub	sp, #40	; 0x28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
 8002196:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a2b      	ldr	r2, [pc, #172]	; (800224c <HAL_UART_MspInit+0xcc>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d150      	bne.n	8002244 <HAL_UART_MspInit+0xc4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021a2:	4b2b      	ldr	r3, [pc, #172]	; (8002250 <HAL_UART_MspInit+0xd0>)
 80021a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a6:	4a2a      	ldr	r2, [pc, #168]	; (8002250 <HAL_UART_MspInit+0xd0>)
 80021a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ac:	6593      	str	r3, [r2, #88]	; 0x58
 80021ae:	4b28      	ldr	r3, [pc, #160]	; (8002250 <HAL_UART_MspInit+0xd0>)
 80021b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ba:	4b25      	ldr	r3, [pc, #148]	; (8002250 <HAL_UART_MspInit+0xd0>)
 80021bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021be:	4a24      	ldr	r2, [pc, #144]	; (8002250 <HAL_UART_MspInit+0xd0>)
 80021c0:	f043 0308 	orr.w	r3, r3, #8
 80021c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021c6:	4b22      	ldr	r3, [pc, #136]	; (8002250 <HAL_UART_MspInit+0xd0>)
 80021c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 80021d2:	2370      	movs	r3, #112	; 0x70
 80021d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d6:	2302      	movs	r3, #2
 80021d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021de:	2303      	movs	r3, #3
 80021e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021e2:	2307      	movs	r3, #7
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021e6:	f107 0314 	add.w	r3, r7, #20
 80021ea:	4619      	mov	r1, r3
 80021ec:	4819      	ldr	r0, [pc, #100]	; (8002254 <HAL_UART_MspInit+0xd4>)
 80021ee:	f001 ffff 	bl	80041f0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80021f2:	4b19      	ldr	r3, [pc, #100]	; (8002258 <HAL_UART_MspInit+0xd8>)
 80021f4:	4a19      	ldr	r2, [pc, #100]	; (800225c <HAL_UART_MspInit+0xdc>)
 80021f6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80021f8:	4b17      	ldr	r3, [pc, #92]	; (8002258 <HAL_UART_MspInit+0xd8>)
 80021fa:	221b      	movs	r2, #27
 80021fc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021fe:	4b16      	ldr	r3, [pc, #88]	; (8002258 <HAL_UART_MspInit+0xd8>)
 8002200:	2210      	movs	r2, #16
 8002202:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002204:	4b14      	ldr	r3, [pc, #80]	; (8002258 <HAL_UART_MspInit+0xd8>)
 8002206:	2200      	movs	r2, #0
 8002208:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800220a:	4b13      	ldr	r3, [pc, #76]	; (8002258 <HAL_UART_MspInit+0xd8>)
 800220c:	2280      	movs	r2, #128	; 0x80
 800220e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002210:	4b11      	ldr	r3, [pc, #68]	; (8002258 <HAL_UART_MspInit+0xd8>)
 8002212:	2200      	movs	r2, #0
 8002214:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <HAL_UART_MspInit+0xd8>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800221c:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <HAL_UART_MspInit+0xd8>)
 800221e:	2200      	movs	r2, #0
 8002220:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002222:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <HAL_UART_MspInit+0xd8>)
 8002224:	2200      	movs	r2, #0
 8002226:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002228:	480b      	ldr	r0, [pc, #44]	; (8002258 <HAL_UART_MspInit+0xd8>)
 800222a:	f001 fcc9 	bl	8003bc0 <HAL_DMA_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 8002234:	f7ff ff0e 	bl	8002054 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a07      	ldr	r2, [pc, #28]	; (8002258 <HAL_UART_MspInit+0xd8>)
 800223c:	675a      	str	r2, [r3, #116]	; 0x74
 800223e:	4a06      	ldr	r2, [pc, #24]	; (8002258 <HAL_UART_MspInit+0xd8>)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002244:	bf00      	nop
 8002246:	3728      	adds	r7, #40	; 0x28
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40004400 	.word	0x40004400
 8002250:	40021000 	.word	0x40021000
 8002254:	48000c00 	.word	0x48000c00
 8002258:	20000108 	.word	0x20000108
 800225c:	4002001c 	.word	0x4002001c

08002260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002264:	e7fe      	b.n	8002264 <NMI_Handler+0x4>

08002266 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800226a:	e7fe      	b.n	800226a <HardFault_Handler+0x4>

0800226c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002270:	e7fe      	b.n	8002270 <MemManage_Handler+0x4>

08002272 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002276:	e7fe      	b.n	8002276 <BusFault_Handler+0x4>

08002278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800227c:	e7fe      	b.n	800227c <UsageFault_Handler+0x4>

0800227e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ac:	f000 f900 	bl	80024b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022b0:	bf00      	nop
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022b8:	4802      	ldr	r0, [pc, #8]	; (80022c4 <DMA1_Channel1_IRQHandler+0x10>)
 80022ba:	f001 fe00 	bl	8003ebe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	2000016c 	.word	0x2000016c

080022c8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80022cc:	4802      	ldr	r0, [pc, #8]	; (80022d8 <DMA1_Channel2_IRQHandler+0x10>)
 80022ce:	f001 fdf6 	bl	8003ebe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000108 	.word	0x20000108

080022dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022e4:	4a14      	ldr	r2, [pc, #80]	; (8002338 <_sbrk+0x5c>)
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <_sbrk+0x60>)
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022f0:	4b13      	ldr	r3, [pc, #76]	; (8002340 <_sbrk+0x64>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d102      	bne.n	80022fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022f8:	4b11      	ldr	r3, [pc, #68]	; (8002340 <_sbrk+0x64>)
 80022fa:	4a12      	ldr	r2, [pc, #72]	; (8002344 <_sbrk+0x68>)
 80022fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022fe:	4b10      	ldr	r3, [pc, #64]	; (8002340 <_sbrk+0x64>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	429a      	cmp	r2, r3
 800230a:	d207      	bcs.n	800231c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800230c:	f005 fcf6 	bl	8007cfc <__errno>
 8002310:	4602      	mov	r2, r0
 8002312:	230c      	movs	r3, #12
 8002314:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002316:	f04f 33ff 	mov.w	r3, #4294967295
 800231a:	e009      	b.n	8002330 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <_sbrk+0x64>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002322:	4b07      	ldr	r3, [pc, #28]	; (8002340 <_sbrk+0x64>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4413      	add	r3, r2
 800232a:	4a05      	ldr	r2, [pc, #20]	; (8002340 <_sbrk+0x64>)
 800232c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800232e:	68fb      	ldr	r3, [r7, #12]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	200a0000 	.word	0x200a0000
 800233c:	00000400 	.word	0x00000400
 8002340:	20000094 	.word	0x20000094
 8002344:	200022b0 	.word	0x200022b0

08002348 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800234c:	4b17      	ldr	r3, [pc, #92]	; (80023ac <SystemInit+0x64>)
 800234e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002352:	4a16      	ldr	r2, [pc, #88]	; (80023ac <SystemInit+0x64>)
 8002354:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002358:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800235c:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <SystemInit+0x68>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a13      	ldr	r2, [pc, #76]	; (80023b0 <SystemInit+0x68>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002368:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <SystemInit+0x68>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800236e:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <SystemInit+0x68>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a0f      	ldr	r2, [pc, #60]	; (80023b0 <SystemInit+0x68>)
 8002374:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002378:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800237c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800237e:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <SystemInit+0x68>)
 8002380:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002384:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <SystemInit+0x68>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a09      	ldr	r2, [pc, #36]	; (80023b0 <SystemInit+0x68>)
 800238c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002390:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002392:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <SystemInit+0x68>)
 8002394:	2200      	movs	r2, #0
 8002396:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <SystemInit+0x64>)
 800239a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800239e:	609a      	str	r2, [r3, #8]
#endif
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	e000ed00 	.word	0xe000ed00
 80023b0:	40021000 	.word	0x40021000

080023b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023b8:	f7ff ffc6 	bl	8002348 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80023bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80023be:	e003      	b.n	80023c8 <LoopCopyDataInit>

080023c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80023c0:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80023c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80023c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80023c6:	3104      	adds	r1, #4

080023c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80023c8:	480a      	ldr	r0, [pc, #40]	; (80023f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80023ca:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80023cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80023ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80023d0:	d3f6      	bcc.n	80023c0 <CopyDataInit>
	ldr	r2, =_sbss
 80023d2:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80023d4:	e002      	b.n	80023dc <LoopFillZerobss>

080023d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80023d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80023d8:	f842 3b04 	str.w	r3, [r2], #4

080023dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80023dc:	4b08      	ldr	r3, [pc, #32]	; (8002400 <LoopForever+0x16>)
	cmp	r2, r3
 80023de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80023e0:	d3f9      	bcc.n	80023d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023e2:	f005 fc91 	bl	8007d08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023e6:	f7ff f88b 	bl	8001500 <main>

080023ea <LoopForever>:

LoopForever:
    b LoopForever
 80023ea:	e7fe      	b.n	80023ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023ec:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80023f0:	0801c274 	.word	0x0801c274
	ldr	r0, =_sdata
 80023f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80023f8:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 80023fc:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8002400:	200022b0 	.word	0x200022b0

08002404 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002404:	e7fe      	b.n	8002404 <ADC1_IRQHandler>

08002406 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002410:	2003      	movs	r0, #3
 8002412:	f001 fb93 	bl	8003b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002416:	2000      	movs	r0, #0
 8002418:	f000 f80e 	bl	8002438 <HAL_InitTick>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d002      	beq.n	8002428 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	71fb      	strb	r3, [r7, #7]
 8002426:	e001      	b.n	800242c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002428:	f7ff fe18 	bl	800205c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800242c:	79fb      	ldrb	r3, [r7, #7]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002440:	2300      	movs	r3, #0
 8002442:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002444:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <HAL_InitTick+0x6c>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d023      	beq.n	8002494 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800244c:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <HAL_InitTick+0x70>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <HAL_InitTick+0x6c>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	4619      	mov	r1, r3
 8002456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800245a:	fbb3 f3f1 	udiv	r3, r3, r1
 800245e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002462:	4618      	mov	r0, r3
 8002464:	f001 fb9f 	bl	8003ba6 <HAL_SYSTICK_Config>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10f      	bne.n	800248e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b0f      	cmp	r3, #15
 8002472:	d809      	bhi.n	8002488 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002474:	2200      	movs	r2, #0
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	f04f 30ff 	mov.w	r0, #4294967295
 800247c:	f001 fb69 	bl	8003b52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002480:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <HAL_InitTick+0x74>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e007      	b.n	8002498 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
 800248c:	e004      	b.n	8002498 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
 8002492:	e001      	b.n	8002498 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002498:	7bfb      	ldrb	r3, [r7, #15]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000008 	.word	0x20000008
 80024a8:	20000000 	.word	0x20000000
 80024ac:	20000004 	.word	0x20000004

080024b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_IncTick+0x20>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_IncTick+0x24>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4413      	add	r3, r2
 80024c0:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <HAL_IncTick+0x24>)
 80024c2:	6013      	str	r3, [r2, #0]
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20000008 	.word	0x20000008
 80024d4:	200022a8 	.word	0x200022a8

080024d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return uwTick;
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <HAL_GetTick+0x14>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	200022a8 	.word	0x200022a8

080024f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	431a      	orrs	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	609a      	str	r2, [r3, #8]
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	609a      	str	r2, [r3, #8]
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002558:	b480      	push	{r7}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	3360      	adds	r3, #96	; 0x60
 800256a:	461a      	mov	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b08      	ldr	r3, [pc, #32]	; (800259c <LL_ADC_SetOffset+0x44>)
 800257a:	4013      	ands	r3, r2
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	4313      	orrs	r3, r2
 8002588:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002590:	bf00      	nop
 8002592:	371c      	adds	r7, #28
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	03fff000 	.word	0x03fff000

080025a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3360      	adds	r3, #96	; 0x60
 80025ae:	461a      	mov	r2, r3
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	3360      	adds	r3, #96	; 0x60
 80025dc:	461a      	mov	r2, r3
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	431a      	orrs	r2, r3
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80025f6:	bf00      	nop
 80025f8:	371c      	adds	r7, #28
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	615a      	str	r2, [r3, #20]
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800263c:	2301      	movs	r3, #1
 800263e:	e000      	b.n	8002642 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800264e:	b480      	push	{r7}
 8002650:	b087      	sub	sp, #28
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	3330      	adds	r3, #48	; 0x30
 800265e:	461a      	mov	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	0a1b      	lsrs	r3, r3, #8
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	4413      	add	r3, r2
 800266c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	f003 031f 	and.w	r3, r3, #31
 8002678:	211f      	movs	r1, #31
 800267a:	fa01 f303 	lsl.w	r3, r1, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	401a      	ands	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	0e9b      	lsrs	r3, r3, #26
 8002686:	f003 011f 	and.w	r1, r3, #31
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f003 031f 	and.w	r3, r3, #31
 8002690:	fa01 f303 	lsl.w	r3, r1, r3
 8002694:	431a      	orrs	r2, r3
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800269a:	bf00      	nop
 800269c:	371c      	adds	r7, #28
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b087      	sub	sp, #28
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	60f8      	str	r0, [r7, #12]
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	3314      	adds	r3, #20
 80026b6:	461a      	mov	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	0e5b      	lsrs	r3, r3, #25
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	4413      	add	r3, r2
 80026c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	0d1b      	lsrs	r3, r3, #20
 80026ce:	f003 031f 	and.w	r3, r3, #31
 80026d2:	2107      	movs	r1, #7
 80026d4:	fa01 f303 	lsl.w	r3, r1, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	401a      	ands	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	0d1b      	lsrs	r3, r3, #20
 80026e0:	f003 031f 	and.w	r3, r3, #31
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ea:	431a      	orrs	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026f0:	bf00      	nop
 80026f2:	371c      	adds	r7, #28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002714:	43db      	mvns	r3, r3
 8002716:	401a      	ands	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f003 0318 	and.w	r3, r3, #24
 800271e:	4908      	ldr	r1, [pc, #32]	; (8002740 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002720:	40d9      	lsrs	r1, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	400b      	ands	r3, r1
 8002726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272a:	431a      	orrs	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002732:	bf00      	nop
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	0007ffff 	.word	0x0007ffff

08002744 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002754:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6093      	str	r3, [r2, #8]
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800277c:	d101      	bne.n	8002782 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80027a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027cc:	d101      	bne.n	80027d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027f4:	f043 0201 	orr.w	r2, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002818:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800281c:	f043 0202 	orr.w	r2, r3, #2
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <LL_ADC_IsEnabled+0x18>
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <LL_ADC_IsEnabled+0x1a>
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b02      	cmp	r3, #2
 8002868:	d101      	bne.n	800286e <LL_ADC_IsDisableOngoing+0x18>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <LL_ADC_IsDisableOngoing+0x1a>
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800288c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002890:	f043 0204 	orr.w	r2, r3, #4
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028b8:	f043 0210 	orr.w	r2, r3, #16
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d101      	bne.n	80028e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028e0:	2301      	movs	r3, #1
 80028e2:	e000      	b.n	80028e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002902:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002906:	f043 0220 	orr.w	r2, r3, #32
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b08      	cmp	r3, #8
 800292c:	d101      	bne.n	8002932 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002948:	2300      	movs	r3, #0
 800294a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800294c:	2300      	movs	r3, #0
 800294e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e12d      	b.n	8002bb6 <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002964:	2b00      	cmp	r3, #0
 8002966:	d109      	bne.n	800297c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff fb9b 	bl	80020a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fef1 	bl	8002768 <LL_ADC_IsDeepPowerDownEnabled>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d004      	beq.n	8002996 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff fed7 	bl	8002744 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff ff0c 	bl	80027b8 <LL_ADC_IsInternalRegulatorEnabled>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d113      	bne.n	80029ce <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fef0 	bl	8002790 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80029b0:	4b83      	ldr	r3, [pc, #524]	; (8002bc0 <HAL_ADC_Init+0x280>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	099b      	lsrs	r3, r3, #6
 80029b6:	4a83      	ldr	r2, [pc, #524]	; (8002bc4 <HAL_ADC_Init+0x284>)
 80029b8:	fba2 2303 	umull	r2, r3, r2, r3
 80029bc:	099b      	lsrs	r3, r3, #6
 80029be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80029c0:	e002      	b.n	80029c8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	3b01      	subs	r3, #1
 80029c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f9      	bne.n	80029c2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff fef0 	bl	80027b8 <LL_ADC_IsInternalRegulatorEnabled>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10d      	bne.n	80029fa <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e2:	f043 0210 	orr.w	r2, r3, #16
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ee:	f043 0201 	orr.w	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff ff64 	bl	80028cc <LL_ADC_REG_IsConversionOngoing>
 8002a04:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f040 80c8 	bne.w	8002ba4 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f040 80c4 	bne.w	8002ba4 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a20:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a24:	f043 0202 	orr.w	r2, r3, #2
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fefd 	bl	8002830 <LL_ADC_IsEnabled>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10b      	bne.n	8002a54 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a3c:	4862      	ldr	r0, [pc, #392]	; (8002bc8 <HAL_ADC_Init+0x288>)
 8002a3e:	f7ff fef7 	bl	8002830 <LL_ADC_IsEnabled>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d105      	bne.n	8002a54 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	485f      	ldr	r0, [pc, #380]	; (8002bcc <HAL_ADC_Init+0x28c>)
 8002a50:	f7ff fd4e 	bl	80024f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	7e5b      	ldrb	r3, [r3, #25]
 8002a58:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a5e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002a64:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002a6a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a72:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d106      	bne.n	8002a90 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	3b01      	subs	r3, #1
 8002a88:	045b      	lsls	r3, r3, #17
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d009      	beq.n	8002aac <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	4b47      	ldr	r3, [pc, #284]	; (8002bd0 <HAL_ADC_Init+0x290>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	69b9      	ldr	r1, [r7, #24]
 8002abc:	430b      	orrs	r3, r1
 8002abe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff ff01 	bl	80028cc <LL_ADC_REG_IsConversionOngoing>
 8002aca:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff ff22 	bl	800291a <LL_ADC_INJ_IsConversionOngoing>
 8002ad6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d140      	bne.n	8002b60 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d13d      	bne.n	8002b60 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	7e1b      	ldrb	r3, [r3, #24]
 8002aec:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002aee:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002af6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b06:	f023 0306 	bic.w	r3, r3, #6
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6812      	ldr	r2, [r2, #0]
 8002b0e:	69b9      	ldr	r1, [r7, #24]
 8002b10:	430b      	orrs	r3, r1
 8002b12:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d118      	bne.n	8002b50 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002b28:	f023 0304 	bic.w	r3, r3, #4
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b34:	4311      	orrs	r1, r2
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b3a:	4311      	orrs	r1, r2
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b40:	430a      	orrs	r2, r1
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0201 	orr.w	r2, r2, #1
 8002b4c:	611a      	str	r2, [r3, #16]
 8002b4e:	e007      	b.n	8002b60 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691a      	ldr	r2, [r3, #16]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0201 	bic.w	r2, r2, #1
 8002b5e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d10c      	bne.n	8002b82 <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	f023 010f 	bic.w	r1, r3, #15
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	1e5a      	subs	r2, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b80:	e007      	b.n	8002b92 <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 020f 	bic.w	r2, r2, #15
 8002b90:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b96:	f023 0303 	bic.w	r3, r3, #3
 8002b9a:	f043 0201 	orr.w	r2, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	659a      	str	r2, [r3, #88]	; 0x58
 8002ba2:	e007      	b.n	8002bb4 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba8:	f043 0210 	orr.w	r2, r3, #16
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3720      	adds	r7, #32
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000000 	.word	0x20000000
 8002bc4:	053e2d63 	.word	0x053e2d63
 8002bc8:	50040000 	.word	0x50040000
 8002bcc:	50040300 	.word	0x50040300
 8002bd0:	fff0c007 	.word	0xfff0c007

08002bd4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff fe71 	bl	80028cc <LL_ADC_REG_IsConversionOngoing>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d167      	bne.n	8002cc0 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_ADC_Start_DMA+0x2a>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e063      	b.n	8002cc6 <HAL_ADC_Start_DMA+0xf2>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 fd82 	bl	8003710 <ADC_Enable>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002c10:	7dfb      	ldrb	r3, [r7, #23]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d14f      	bne.n	8002cb6 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c1e:	f023 0301 	bic.w	r3, r3, #1
 8002c22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d006      	beq.n	8002c44 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3a:	f023 0206 	bic.w	r2, r3, #6
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c42:	e002      	b.n	8002c4a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c4e:	4a20      	ldr	r2, [pc, #128]	; (8002cd0 <HAL_ADC_Start_DMA+0xfc>)
 8002c50:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c56:	4a1f      	ldr	r2, [pc, #124]	; (8002cd4 <HAL_ADC_Start_DMA+0x100>)
 8002c58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c5e:	4a1e      	ldr	r2, [pc, #120]	; (8002cd8 <HAL_ADC_Start_DMA+0x104>)
 8002c60:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	221c      	movs	r2, #28
 8002c68:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f042 0210 	orr.w	r2, r2, #16
 8002c80:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f042 0201 	orr.w	r2, r2, #1
 8002c90:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	3340      	adds	r3, #64	; 0x40
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f001 f835 	bl	8003d10 <HAL_DMA_Start_IT>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff fde4 	bl	800287c <LL_ADC_REG_StartConversion>
 8002cb4:	e006      	b.n	8002cc4 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002cbe:	e001      	b.n	8002cc4 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	08003875 	.word	0x08003875
 8002cd4:	0800394d 	.word	0x0800394d
 8002cd8:	08003969 	.word	0x08003969

08002cdc <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_ADC_Stop_DMA+0x16>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e051      	b.n	8002d96 <HAL_ADC_Stop_DMA+0xba>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002cfa:	2103      	movs	r1, #3
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 fc53 	bl	80035a8 <ADC_ConversionStop>
 8002d02:	4603      	mov	r3, r0
 8002d04:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d13f      	bne.n	8002d8c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0201 	bic.w	r2, r2, #1
 8002d1a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d20:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d10f      	bne.n	8002d4a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f001 f869 	bl	8003e06 <HAL_DMA_Abort>
 8002d34:	4603      	mov	r3, r0
 8002d36:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d005      	beq.n	8002d4a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0210 	bic.w	r2, r2, #16
 8002d58:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d105      	bne.n	8002d6c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 fd2f 	bl	80037c4 <ADC_Disable>
 8002d66:	4603      	mov	r3, r0
 8002d68:	73fb      	strb	r3, [r7, #15]
 8002d6a:	e002      	b.n	8002d72 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fd29 	bl	80037c4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d109      	bne.n	8002d8c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	f043 0201 	orr.w	r2, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b0b6      	sub	sp, #216	; 0xd8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d101      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x22>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e3d4      	b.n	8003580 <HAL_ADC_ConfigChannel+0x7cc>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff fd72 	bl	80028cc <LL_ADC_REG_IsConversionOngoing>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f040 83b9 	bne.w	8003562 <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b05      	cmp	r3, #5
 8002df6:	d824      	bhi.n	8002e42 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	3b02      	subs	r3, #2
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	d81b      	bhi.n	8002e3a <HAL_ADC_ConfigChannel+0x86>
 8002e02:	a201      	add	r2, pc, #4	; (adr r2, 8002e08 <HAL_ADC_ConfigChannel+0x54>)
 8002e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e08:	08002e19 	.word	0x08002e19
 8002e0c:	08002e21 	.word	0x08002e21
 8002e10:	08002e29 	.word	0x08002e29
 8002e14:	08002e31 	.word	0x08002e31
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	220c      	movs	r2, #12
 8002e1c:	605a      	str	r2, [r3, #4]
          break;
 8002e1e:	e011      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2212      	movs	r2, #18
 8002e24:	605a      	str	r2, [r3, #4]
          break;
 8002e26:	e00d      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	2218      	movs	r2, #24
 8002e2c:	605a      	str	r2, [r3, #4]
          break;
 8002e2e:	e009      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e36:	605a      	str	r2, [r3, #4]
          break;
 8002e38:	e004      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2206      	movs	r2, #6
 8002e3e:	605a      	str	r2, [r3, #4]
          break;
 8002e40:	e000      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002e42:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6818      	ldr	r0, [r3, #0]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	6859      	ldr	r1, [r3, #4]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	f7ff fbfc 	bl	800264e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff fd36 	bl	80028cc <LL_ADC_REG_IsConversionOngoing>
 8002e60:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff fd56 	bl	800291a <LL_ADC_INJ_IsConversionOngoing>
 8002e6e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e72:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f040 81c1 	bne.w	80031fe <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f040 81bc 	bne.w	80031fe <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e8e:	d10f      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6818      	ldr	r0, [r3, #0]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	f7ff fc03 	bl	80026a6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fbaa 	bl	8002602 <LL_ADC_SetSamplingTimeCommonConfig>
 8002eae:	e00e      	b.n	8002ece <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6818      	ldr	r0, [r3, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	6819      	ldr	r1, [r3, #0]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	f7ff fbf2 	bl	80026a6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff fb9a 	bl	8002602 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	695a      	ldr	r2, [r3, #20]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	08db      	lsrs	r3, r3, #3
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d00a      	beq.n	8002f06 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	6919      	ldr	r1, [r3, #16]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f00:	f7ff fb2a 	bl	8002558 <LL_ADC_SetOffset>
 8002f04:	e17b      	b.n	80031fe <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff fb47 	bl	80025a0 <LL_ADC_GetOffsetChannel>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10a      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x17e>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2100      	movs	r1, #0
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff fb3c 	bl	80025a0 <LL_ADC_GetOffsetChannel>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	0e9b      	lsrs	r3, r3, #26
 8002f2c:	f003 021f 	and.w	r2, r3, #31
 8002f30:	e01e      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x1bc>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2100      	movs	r1, #0
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fb31 	bl	80025a0 <LL_ADC_GetOffsetChannel>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f48:	fa93 f3a3 	rbit	r3, r3
 8002f4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002f60:	2320      	movs	r3, #32
 8002f62:	e004      	b.n	8002f6e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002f64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d105      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x1d4>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	0e9b      	lsrs	r3, r3, #26
 8002f82:	f003 031f 	and.w	r3, r3, #31
 8002f86:	e018      	b.n	8002fba <HAL_ADC_ConfigChannel+0x206>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f94:	fa93 f3a3 	rbit	r3, r3
 8002f98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002f9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002fa4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002fac:	2320      	movs	r3, #32
 8002fae:	e004      	b.n	8002fba <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002fb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002fb4:	fab3 f383 	clz	r3, r3
 8002fb8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d106      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff fb00 	bl	80025cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff fae4 	bl	80025a0 <LL_ADC_GetOffsetChannel>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10a      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x244>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff fad9 	bl	80025a0 <LL_ADC_GetOffsetChannel>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	0e9b      	lsrs	r3, r3, #26
 8002ff2:	f003 021f 	and.w	r2, r3, #31
 8002ff6:	e01e      	b.n	8003036 <HAL_ADC_ConfigChannel+0x282>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff face 	bl	80025a0 <LL_ADC_GetOffsetChannel>
 8003004:	4603      	mov	r3, r0
 8003006:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800300e:	fa93 f3a3 	rbit	r3, r3
 8003012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800301a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800301e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8003026:	2320      	movs	r3, #32
 8003028:	e004      	b.n	8003034 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800302a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800302e:	fab3 f383 	clz	r3, r3
 8003032:	b2db      	uxtb	r3, r3
 8003034:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800303e:	2b00      	cmp	r3, #0
 8003040:	d105      	bne.n	800304e <HAL_ADC_ConfigChannel+0x29a>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	0e9b      	lsrs	r3, r3, #26
 8003048:	f003 031f 	and.w	r3, r3, #31
 800304c:	e018      	b.n	8003080 <HAL_ADC_ConfigChannel+0x2cc>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003056:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800305a:	fa93 f3a3 	rbit	r3, r3
 800305e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003062:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003066:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800306a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8003072:	2320      	movs	r3, #32
 8003074:	e004      	b.n	8003080 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003076:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800307a:	fab3 f383 	clz	r3, r3
 800307e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003080:	429a      	cmp	r2, r3
 8003082:	d106      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2200      	movs	r2, #0
 800308a:	2101      	movs	r1, #1
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff fa9d 	bl	80025cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2102      	movs	r1, #2
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff fa81 	bl	80025a0 <LL_ADC_GetOffsetChannel>
 800309e:	4603      	mov	r3, r0
 80030a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10a      	bne.n	80030be <HAL_ADC_ConfigChannel+0x30a>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2102      	movs	r1, #2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff fa76 	bl	80025a0 <LL_ADC_GetOffsetChannel>
 80030b4:	4603      	mov	r3, r0
 80030b6:	0e9b      	lsrs	r3, r3, #26
 80030b8:	f003 021f 	and.w	r2, r3, #31
 80030bc:	e01e      	b.n	80030fc <HAL_ADC_ConfigChannel+0x348>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2102      	movs	r1, #2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff fa6b 	bl	80025a0 <LL_ADC_GetOffsetChannel>
 80030ca:	4603      	mov	r3, r0
 80030cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030d4:	fa93 f3a3 	rbit	r3, r3
 80030d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80030dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80030e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80030ec:	2320      	movs	r3, #32
 80030ee:	e004      	b.n	80030fa <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80030f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80030f4:	fab3 f383 	clz	r3, r3
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003104:	2b00      	cmp	r3, #0
 8003106:	d105      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x360>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	0e9b      	lsrs	r3, r3, #26
 800310e:	f003 031f 	and.w	r3, r3, #31
 8003112:	e016      	b.n	8003142 <HAL_ADC_ConfigChannel+0x38e>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003120:	fa93 f3a3 	rbit	r3, r3
 8003124:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003126:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003128:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800312c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003134:	2320      	movs	r3, #32
 8003136:	e004      	b.n	8003142 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003138:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800313c:	fab3 f383 	clz	r3, r3
 8003140:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003142:	429a      	cmp	r2, r3
 8003144:	d106      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2200      	movs	r2, #0
 800314c:	2102      	movs	r1, #2
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fa3c 	bl	80025cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2103      	movs	r1, #3
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fa20 	bl	80025a0 <LL_ADC_GetOffsetChannel>
 8003160:	4603      	mov	r3, r0
 8003162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10a      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x3cc>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2103      	movs	r1, #3
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff fa15 	bl	80025a0 <LL_ADC_GetOffsetChannel>
 8003176:	4603      	mov	r3, r0
 8003178:	0e9b      	lsrs	r3, r3, #26
 800317a:	f003 021f 	and.w	r2, r3, #31
 800317e:	e017      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x3fc>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2103      	movs	r1, #3
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fa0a 	bl	80025a0 <LL_ADC_GetOffsetChannel>
 800318c:	4603      	mov	r3, r0
 800318e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003190:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003192:	fa93 f3a3 	rbit	r3, r3
 8003196:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003198:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800319a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800319c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80031a2:	2320      	movs	r3, #32
 80031a4:	e003      	b.n	80031ae <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80031a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031a8:	fab3 f383 	clz	r3, r3
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d105      	bne.n	80031c8 <HAL_ADC_ConfigChannel+0x414>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	0e9b      	lsrs	r3, r3, #26
 80031c2:	f003 031f 	and.w	r3, r3, #31
 80031c6:	e011      	b.n	80031ec <HAL_ADC_ConfigChannel+0x438>
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031d0:	fa93 f3a3 	rbit	r3, r3
 80031d4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80031d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80031da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80031e0:	2320      	movs	r3, #32
 80031e2:	e003      	b.n	80031ec <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80031e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031e6:	fab3 f383 	clz	r3, r3
 80031ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d106      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2200      	movs	r2, #0
 80031f6:	2103      	movs	r1, #3
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff f9e7 	bl	80025cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff fb14 	bl	8002830 <LL_ADC_IsEnabled>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	f040 8140 	bne.w	8003490 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	6819      	ldr	r1, [r3, #0]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	461a      	mov	r2, r3
 800321e:	f7ff fa6d 	bl	80026fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	4a8f      	ldr	r2, [pc, #572]	; (8003464 <HAL_ADC_ConfigChannel+0x6b0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	f040 8131 	bne.w	8003490 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10b      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x4a2>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	0e9b      	lsrs	r3, r3, #26
 8003244:	3301      	adds	r3, #1
 8003246:	f003 031f 	and.w	r3, r3, #31
 800324a:	2b09      	cmp	r3, #9
 800324c:	bf94      	ite	ls
 800324e:	2301      	movls	r3, #1
 8003250:	2300      	movhi	r3, #0
 8003252:	b2db      	uxtb	r3, r3
 8003254:	e019      	b.n	800328a <HAL_ADC_ConfigChannel+0x4d6>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800325e:	fa93 f3a3 	rbit	r3, r3
 8003262:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003264:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003266:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003268:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800326e:	2320      	movs	r3, #32
 8003270:	e003      	b.n	800327a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003272:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003274:	fab3 f383 	clz	r3, r3
 8003278:	b2db      	uxtb	r3, r3
 800327a:	3301      	adds	r3, #1
 800327c:	f003 031f 	and.w	r3, r3, #31
 8003280:	2b09      	cmp	r3, #9
 8003282:	bf94      	ite	ls
 8003284:	2301      	movls	r3, #1
 8003286:	2300      	movhi	r3, #0
 8003288:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800328a:	2b00      	cmp	r3, #0
 800328c:	d079      	beq.n	8003382 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003296:	2b00      	cmp	r3, #0
 8003298:	d107      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x4f6>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	0e9b      	lsrs	r3, r3, #26
 80032a0:	3301      	adds	r3, #1
 80032a2:	069b      	lsls	r3, r3, #26
 80032a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032a8:	e015      	b.n	80032d6 <HAL_ADC_ConfigChannel+0x522>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032b2:	fa93 f3a3 	rbit	r3, r3
 80032b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80032b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80032bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80032c2:	2320      	movs	r3, #32
 80032c4:	e003      	b.n	80032ce <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80032c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032c8:	fab3 f383 	clz	r3, r3
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	3301      	adds	r3, #1
 80032d0:	069b      	lsls	r3, r3, #26
 80032d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d109      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x542>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	0e9b      	lsrs	r3, r3, #26
 80032e8:	3301      	adds	r3, #1
 80032ea:	f003 031f 	and.w	r3, r3, #31
 80032ee:	2101      	movs	r1, #1
 80032f0:	fa01 f303 	lsl.w	r3, r1, r3
 80032f4:	e017      	b.n	8003326 <HAL_ADC_ConfigChannel+0x572>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032fe:	fa93 f3a3 	rbit	r3, r3
 8003302:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003306:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800330e:	2320      	movs	r3, #32
 8003310:	e003      	b.n	800331a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003314:	fab3 f383 	clz	r3, r3
 8003318:	b2db      	uxtb	r3, r3
 800331a:	3301      	adds	r3, #1
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	2101      	movs	r1, #1
 8003322:	fa01 f303 	lsl.w	r3, r1, r3
 8003326:	ea42 0103 	orr.w	r1, r2, r3
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10a      	bne.n	800334c <HAL_ADC_ConfigChannel+0x598>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	0e9b      	lsrs	r3, r3, #26
 800333c:	3301      	adds	r3, #1
 800333e:	f003 021f 	and.w	r2, r3, #31
 8003342:	4613      	mov	r3, r2
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	4413      	add	r3, r2
 8003348:	051b      	lsls	r3, r3, #20
 800334a:	e018      	b.n	800337e <HAL_ADC_ConfigChannel+0x5ca>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003354:	fa93 f3a3 	rbit	r3, r3
 8003358:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800335a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800335c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800335e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003364:	2320      	movs	r3, #32
 8003366:	e003      	b.n	8003370 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800336a:	fab3 f383 	clz	r3, r3
 800336e:	b2db      	uxtb	r3, r3
 8003370:	3301      	adds	r3, #1
 8003372:	f003 021f 	and.w	r2, r3, #31
 8003376:	4613      	mov	r3, r2
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	4413      	add	r3, r2
 800337c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800337e:	430b      	orrs	r3, r1
 8003380:	e081      	b.n	8003486 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800338a:	2b00      	cmp	r3, #0
 800338c:	d107      	bne.n	800339e <HAL_ADC_ConfigChannel+0x5ea>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	0e9b      	lsrs	r3, r3, #26
 8003394:	3301      	adds	r3, #1
 8003396:	069b      	lsls	r3, r3, #26
 8003398:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800339c:	e015      	b.n	80033ca <HAL_ADC_ConfigChannel+0x616>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a6:	fa93 f3a3 	rbit	r3, r3
 80033aa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80033ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ae:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80033b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80033b6:	2320      	movs	r3, #32
 80033b8:	e003      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80033ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033bc:	fab3 f383 	clz	r3, r3
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	3301      	adds	r3, #1
 80033c4:	069b      	lsls	r3, r3, #26
 80033c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d109      	bne.n	80033ea <HAL_ADC_ConfigChannel+0x636>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	0e9b      	lsrs	r3, r3, #26
 80033dc:	3301      	adds	r3, #1
 80033de:	f003 031f 	and.w	r3, r3, #31
 80033e2:	2101      	movs	r1, #1
 80033e4:	fa01 f303 	lsl.w	r3, r1, r3
 80033e8:	e017      	b.n	800341a <HAL_ADC_ConfigChannel+0x666>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	61fb      	str	r3, [r7, #28]
  return result;
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8003402:	2320      	movs	r3, #32
 8003404:	e003      	b.n	800340e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	fab3 f383 	clz	r3, r3
 800340c:	b2db      	uxtb	r3, r3
 800340e:	3301      	adds	r3, #1
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	2101      	movs	r1, #1
 8003416:	fa01 f303 	lsl.w	r3, r1, r3
 800341a:	ea42 0103 	orr.w	r1, r2, r3
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10d      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x692>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	0e9b      	lsrs	r3, r3, #26
 8003430:	3301      	adds	r3, #1
 8003432:	f003 021f 	and.w	r2, r3, #31
 8003436:	4613      	mov	r3, r2
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	4413      	add	r3, r2
 800343c:	3b1e      	subs	r3, #30
 800343e:	051b      	lsls	r3, r3, #20
 8003440:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003444:	e01e      	b.n	8003484 <HAL_ADC_ConfigChannel+0x6d0>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	fa93 f3a3 	rbit	r3, r3
 8003452:	613b      	str	r3, [r7, #16]
  return result;
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d104      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800345e:	2320      	movs	r3, #32
 8003460:	e006      	b.n	8003470 <HAL_ADC_ConfigChannel+0x6bc>
 8003462:	bf00      	nop
 8003464:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	fab3 f383 	clz	r3, r3
 800346e:	b2db      	uxtb	r3, r3
 8003470:	3301      	adds	r3, #1
 8003472:	f003 021f 	and.w	r2, r3, #31
 8003476:	4613      	mov	r3, r2
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	4413      	add	r3, r2
 800347c:	3b1e      	subs	r3, #30
 800347e:	051b      	lsls	r3, r3, #20
 8003480:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003484:	430b      	orrs	r3, r1
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	6892      	ldr	r2, [r2, #8]
 800348a:	4619      	mov	r1, r3
 800348c:	f7ff f90b 	bl	80026a6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	4b3c      	ldr	r3, [pc, #240]	; (8003588 <HAL_ADC_ConfigChannel+0x7d4>)
 8003496:	4013      	ands	r3, r2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d06b      	beq.n	8003574 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800349c:	483b      	ldr	r0, [pc, #236]	; (800358c <HAL_ADC_ConfigChannel+0x7d8>)
 800349e:	f7ff f84d 	bl	800253c <LL_ADC_GetCommonPathInternalCh>
 80034a2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a39      	ldr	r2, [pc, #228]	; (8003590 <HAL_ADC_ConfigChannel+0x7dc>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d126      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d120      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a34      	ldr	r2, [pc, #208]	; (8003594 <HAL_ADC_ConfigChannel+0x7e0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d156      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034ce:	4619      	mov	r1, r3
 80034d0:	482e      	ldr	r0, [pc, #184]	; (800358c <HAL_ADC_ConfigChannel+0x7d8>)
 80034d2:	f7ff f820 	bl	8002516 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80034d6:	4b30      	ldr	r3, [pc, #192]	; (8003598 <HAL_ADC_ConfigChannel+0x7e4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	099b      	lsrs	r3, r3, #6
 80034dc:	4a2f      	ldr	r2, [pc, #188]	; (800359c <HAL_ADC_ConfigChannel+0x7e8>)
 80034de:	fba2 2303 	umull	r2, r3, r2, r3
 80034e2:	099a      	lsrs	r2, r3, #6
 80034e4:	4613      	mov	r3, r2
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	4413      	add	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80034ee:	e002      	b.n	80034f6 <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1f9      	bne.n	80034f0 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034fc:	e03a      	b.n	8003574 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a27      	ldr	r2, [pc, #156]	; (80035a0 <HAL_ADC_ConfigChannel+0x7ec>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d113      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x77c>
 8003508:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800350c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10d      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a1e      	ldr	r2, [pc, #120]	; (8003594 <HAL_ADC_ConfigChannel+0x7e0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d12a      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800351e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003526:	4619      	mov	r1, r3
 8003528:	4818      	ldr	r0, [pc, #96]	; (800358c <HAL_ADC_ConfigChannel+0x7d8>)
 800352a:	f7fe fff4 	bl	8002516 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800352e:	e021      	b.n	8003574 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a1b      	ldr	r2, [pc, #108]	; (80035a4 <HAL_ADC_ConfigChannel+0x7f0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d11c      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800353a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800353e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d116      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a12      	ldr	r2, [pc, #72]	; (8003594 <HAL_ADC_ConfigChannel+0x7e0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d111      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003550:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003554:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003558:	4619      	mov	r1, r3
 800355a:	480c      	ldr	r0, [pc, #48]	; (800358c <HAL_ADC_ConfigChannel+0x7d8>)
 800355c:	f7fe ffdb 	bl	8002516 <LL_ADC_SetCommonPathInternalCh>
 8003560:	e008      	b.n	8003574 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003566:	f043 0220 	orr.w	r2, r3, #32
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800357c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003580:	4618      	mov	r0, r3
 8003582:	37d8      	adds	r7, #216	; 0xd8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	80080000 	.word	0x80080000
 800358c:	50040300 	.word	0x50040300
 8003590:	c7520000 	.word	0xc7520000
 8003594:	50040000 	.word	0x50040000
 8003598:	20000000 	.word	0x20000000
 800359c:	053e2d63 	.word	0x053e2d63
 80035a0:	cb840000 	.word	0xcb840000
 80035a4:	80000001 	.word	0x80000001

080035a8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b088      	sub	sp, #32
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff f984 	bl	80028cc <LL_ADC_REG_IsConversionOngoing>
 80035c4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff f9a5 	bl	800291a <LL_ADC_INJ_IsConversionOngoing>
 80035d0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d103      	bne.n	80035e0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 8090 	beq.w	8003700 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d02a      	beq.n	8003644 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	7e5b      	ldrb	r3, [r3, #25]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d126      	bne.n	8003644 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	7e1b      	ldrb	r3, [r3, #24]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d122      	bne.n	8003644 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80035fe:	2301      	movs	r3, #1
 8003600:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003602:	e014      	b.n	800362e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	4a41      	ldr	r2, [pc, #260]	; (800370c <ADC_ConversionStop+0x164>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d90d      	bls.n	8003628 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003610:	f043 0210 	orr.w	r2, r3, #16
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361c:	f043 0201 	orr.w	r2, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e06c      	b.n	8003702 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	3301      	adds	r3, #1
 800362c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003638:	2b40      	cmp	r3, #64	; 0x40
 800363a:	d1e3      	bne.n	8003604 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2240      	movs	r2, #64	; 0x40
 8003642:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d014      	beq.n	8003674 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff f93c 	bl	80028cc <LL_ADC_REG_IsConversionOngoing>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00c      	beq.n	8003674 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff f8f9 	bl	8002856 <LL_ADC_IsDisableOngoing>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d104      	bne.n	8003674 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff f918 	bl	80028a4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d014      	beq.n	80036a4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff f94b 	bl	800291a <LL_ADC_INJ_IsConversionOngoing>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00c      	beq.n	80036a4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff f8e1 	bl	8002856 <LL_ADC_IsDisableOngoing>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d104      	bne.n	80036a4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff f927 	bl	80028f2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d004      	beq.n	80036b4 <ADC_ConversionStop+0x10c>
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	d105      	bne.n	80036ba <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80036ae:	230c      	movs	r3, #12
 80036b0:	617b      	str	r3, [r7, #20]
        break;
 80036b2:	e005      	b.n	80036c0 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80036b4:	2308      	movs	r3, #8
 80036b6:	617b      	str	r3, [r7, #20]
        break;
 80036b8:	e002      	b.n	80036c0 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80036ba:	2304      	movs	r3, #4
 80036bc:	617b      	str	r3, [r7, #20]
        break;
 80036be:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80036c0:	f7fe ff0a 	bl	80024d8 <HAL_GetTick>
 80036c4:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80036c6:	e014      	b.n	80036f2 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80036c8:	f7fe ff06 	bl	80024d8 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b05      	cmp	r3, #5
 80036d4:	d90d      	bls.n	80036f2 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036da:	f043 0210 	orr.w	r2, r3, #16
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e6:	f043 0201 	orr.w	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e007      	b.n	8003702 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1e3      	bne.n	80036c8 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3720      	adds	r7, #32
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	a33fffff 	.word	0xa33fffff

08003710 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff f887 	bl	8002830 <LL_ADC_IsEnabled>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d146      	bne.n	80037b6 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	4b24      	ldr	r3, [pc, #144]	; (80037c0 <ADC_Enable+0xb0>)
 8003730:	4013      	ands	r3, r2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00d      	beq.n	8003752 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373a:	f043 0210 	orr.w	r2, r3, #16
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003746:	f043 0201 	orr.w	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e032      	b.n	80037b8 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff f842 	bl	80027e0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800375c:	f7fe febc 	bl	80024d8 <HAL_GetTick>
 8003760:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003762:	e021      	b.n	80037a8 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff f861 	bl	8002830 <LL_ADC_IsEnabled>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d104      	bne.n	800377e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff f831 	bl	80027e0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800377e:	f7fe feab 	bl	80024d8 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d90d      	bls.n	80037a8 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003790:	f043 0210 	orr.w	r2, r3, #16
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379c:	f043 0201 	orr.w	r2, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e007      	b.n	80037b8 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d1d6      	bne.n	8003764 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	8000003f 	.word	0x8000003f

080037c4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff f840 	bl	8002856 <LL_ADC_IsDisableOngoing>
 80037d6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff f827 	bl	8002830 <LL_ADC_IsEnabled>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d040      	beq.n	800386a <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d13d      	bne.n	800386a <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 030d 	and.w	r3, r3, #13
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d10c      	bne.n	8003816 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff f801 	bl	8002808 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2203      	movs	r2, #3
 800380c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800380e:	f7fe fe63 	bl	80024d8 <HAL_GetTick>
 8003812:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003814:	e022      	b.n	800385c <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381a:	f043 0210 	orr.w	r2, r3, #16
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003826:	f043 0201 	orr.w	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e01c      	b.n	800386c <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003832:	f7fe fe51 	bl	80024d8 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d90d      	bls.n	800385c <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003844:	f043 0210 	orr.w	r2, r3, #16
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003850:	f043 0201 	orr.w	r2, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e007      	b.n	800386c <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1e3      	bne.n	8003832 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003886:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800388a:	2b00      	cmp	r3, #0
 800388c:	d14b      	bne.n	8003926 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003892:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d021      	beq.n	80038ec <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fe febb 	bl	8002628 <LL_ADC_REG_IsTriggerSourceSWStart>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d032      	beq.n	800391e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d12b      	bne.n	800391e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d11f      	bne.n	800391e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e2:	f043 0201 	orr.w	r2, r3, #1
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	659a      	str	r2, [r3, #88]	; 0x58
 80038ea:	e018      	b.n	800391e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d111      	bne.n	800391e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d105      	bne.n	800391e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003916:	f043 0201 	orr.w	r2, r3, #1
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f7fe fb86 	bl	8002030 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003924:	e00e      	b.n	8003944 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f7ff fa33 	bl	8002d9e <HAL_ADC_ErrorCallback>
}
 8003938:	e004      	b.n	8003944 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800393e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	4798      	blx	r3
}
 8003944:	bf00      	nop
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003958:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f7fe fb5e 	bl	800201c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003960:	bf00      	nop
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003974:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003986:	f043 0204 	orr.w	r2, r3, #4
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f7ff fa05 	bl	8002d9e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003994:	bf00      	nop
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039ac:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <__NVIC_SetPriorityGrouping+0x44>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039b8:	4013      	ands	r3, r2
 80039ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039ce:	4a04      	ldr	r2, [pc, #16]	; (80039e0 <__NVIC_SetPriorityGrouping+0x44>)
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	60d3      	str	r3, [r2, #12]
}
 80039d4:	bf00      	nop
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	e000ed00 	.word	0xe000ed00

080039e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039e8:	4b04      	ldr	r3, [pc, #16]	; (80039fc <__NVIC_GetPriorityGrouping+0x18>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	0a1b      	lsrs	r3, r3, #8
 80039ee:	f003 0307 	and.w	r3, r3, #7
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	e000ed00 	.word	0xe000ed00

08003a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	db0b      	blt.n	8003a2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	f003 021f 	and.w	r2, r3, #31
 8003a18:	4907      	ldr	r1, [pc, #28]	; (8003a38 <__NVIC_EnableIRQ+0x38>)
 8003a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	2001      	movs	r0, #1
 8003a22:	fa00 f202 	lsl.w	r2, r0, r2
 8003a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	e000e100 	.word	0xe000e100

08003a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4603      	mov	r3, r0
 8003a44:	6039      	str	r1, [r7, #0]
 8003a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	db0a      	blt.n	8003a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	490c      	ldr	r1, [pc, #48]	; (8003a88 <__NVIC_SetPriority+0x4c>)
 8003a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5a:	0112      	lsls	r2, r2, #4
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	440b      	add	r3, r1
 8003a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a64:	e00a      	b.n	8003a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	4908      	ldr	r1, [pc, #32]	; (8003a8c <__NVIC_SetPriority+0x50>)
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	3b04      	subs	r3, #4
 8003a74:	0112      	lsls	r2, r2, #4
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	440b      	add	r3, r1
 8003a7a:	761a      	strb	r2, [r3, #24]
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	e000e100 	.word	0xe000e100
 8003a8c:	e000ed00 	.word	0xe000ed00

08003a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b089      	sub	sp, #36	; 0x24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f1c3 0307 	rsb	r3, r3, #7
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	bf28      	it	cs
 8003aae:	2304      	movcs	r3, #4
 8003ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	2b06      	cmp	r3, #6
 8003ab8:	d902      	bls.n	8003ac0 <NVIC_EncodePriority+0x30>
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	3b03      	subs	r3, #3
 8003abe:	e000      	b.n	8003ac2 <NVIC_EncodePriority+0x32>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43da      	mvns	r2, r3
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	401a      	ands	r2, r3
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae2:	43d9      	mvns	r1, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ae8:	4313      	orrs	r3, r2
         );
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3724      	adds	r7, #36	; 0x24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
	...

08003af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b08:	d301      	bcc.n	8003b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e00f      	b.n	8003b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b0e:	4a0a      	ldr	r2, [pc, #40]	; (8003b38 <SysTick_Config+0x40>)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b16:	210f      	movs	r1, #15
 8003b18:	f04f 30ff 	mov.w	r0, #4294967295
 8003b1c:	f7ff ff8e 	bl	8003a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b20:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <SysTick_Config+0x40>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b26:	4b04      	ldr	r3, [pc, #16]	; (8003b38 <SysTick_Config+0x40>)
 8003b28:	2207      	movs	r2, #7
 8003b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	e000e010 	.word	0xe000e010

08003b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff ff29 	bl	800399c <__NVIC_SetPriorityGrouping>
}
 8003b4a:	bf00      	nop
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b086      	sub	sp, #24
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	4603      	mov	r3, r0
 8003b5a:	60b9      	str	r1, [r7, #8]
 8003b5c:	607a      	str	r2, [r7, #4]
 8003b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b60:	2300      	movs	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b64:	f7ff ff3e 	bl	80039e4 <__NVIC_GetPriorityGrouping>
 8003b68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	68b9      	ldr	r1, [r7, #8]
 8003b6e:	6978      	ldr	r0, [r7, #20]
 8003b70:	f7ff ff8e 	bl	8003a90 <NVIC_EncodePriority>
 8003b74:	4602      	mov	r2, r0
 8003b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff ff5d 	bl	8003a3c <__NVIC_SetPriority>
}
 8003b82:	bf00      	nop
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b082      	sub	sp, #8
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	4603      	mov	r3, r0
 8003b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff ff31 	bl	8003a00 <__NVIC_EnableIRQ>
}
 8003b9e:	bf00      	nop
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b082      	sub	sp, #8
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff ffa2 	bl	8003af8 <SysTick_Config>
 8003bb4:	4603      	mov	r3, r0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e08d      	b.n	8003cee <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	4b47      	ldr	r3, [pc, #284]	; (8003cf8 <HAL_DMA_Init+0x138>)
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d80f      	bhi.n	8003bfe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	4b45      	ldr	r3, [pc, #276]	; (8003cfc <HAL_DMA_Init+0x13c>)
 8003be6:	4413      	add	r3, r2
 8003be8:	4a45      	ldr	r2, [pc, #276]	; (8003d00 <HAL_DMA_Init+0x140>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	091b      	lsrs	r3, r3, #4
 8003bf0:	009a      	lsls	r2, r3, #2
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a42      	ldr	r2, [pc, #264]	; (8003d04 <HAL_DMA_Init+0x144>)
 8003bfa:	641a      	str	r2, [r3, #64]	; 0x40
 8003bfc:	e00e      	b.n	8003c1c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	4b40      	ldr	r3, [pc, #256]	; (8003d08 <HAL_DMA_Init+0x148>)
 8003c06:	4413      	add	r3, r2
 8003c08:	4a3d      	ldr	r2, [pc, #244]	; (8003d00 <HAL_DMA_Init+0x140>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	091b      	lsrs	r3, r3, #4
 8003c10:	009a      	lsls	r2, r3, #2
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a3c      	ldr	r2, [pc, #240]	; (8003d0c <HAL_DMA_Init+0x14c>)
 8003c1a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003c40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fa5c 	bl	800412c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c7c:	d102      	bne.n	8003c84 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c98:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d010      	beq.n	8003cc4 <HAL_DMA_Init+0x104>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d80c      	bhi.n	8003cc4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 fa7c 	bl	80041a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003cc0:	605a      	str	r2, [r3, #4]
 8003cc2:	e008      	b.n	8003cd6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40020407 	.word	0x40020407
 8003cfc:	bffdfff8 	.word	0xbffdfff8
 8003d00:	cccccccd 	.word	0xcccccccd
 8003d04:	40020000 	.word	0x40020000
 8003d08:	bffdfbf8 	.word	0xbffdfbf8
 8003d0c:	40020400 	.word	0x40020400

08003d10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_DMA_Start_IT+0x20>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e066      	b.n	8003dfe <HAL_DMA_Start_IT+0xee>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d155      	bne.n	8003df0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0201 	bic.w	r2, r2, #1
 8003d60:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	68b9      	ldr	r1, [r7, #8]
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f9a1 	bl	80040b0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d008      	beq.n	8003d88 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f042 020e 	orr.w	r2, r2, #14
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	e00f      	b.n	8003da8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0204 	bic.w	r2, r2, #4
 8003d96:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 020a 	orr.w	r2, r2, #10
 8003da6:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d007      	beq.n	8003dc6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dc4:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d007      	beq.n	8003dde <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ddc:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f042 0201 	orr.w	r2, r2, #1
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	e005      	b.n	8003dfc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003df8:	2302      	movs	r3, #2
 8003dfa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b085      	sub	sp, #20
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d008      	beq.n	8003e30 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2204      	movs	r2, #4
 8003e22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e040      	b.n	8003eb2 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 020e 	bic.w	r2, r2, #14
 8003e3e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e4e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0201 	bic.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e64:	f003 021c 	and.w	r2, r3, #28
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e72:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e7c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00c      	beq.n	8003ea0 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e94:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e9e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eda:	f003 031c 	and.w	r3, r3, #28
 8003ede:	2204      	movs	r2, #4
 8003ee0:	409a      	lsls	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d026      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x7a>
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d021      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0320 	and.w	r3, r3, #32
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d107      	bne.n	8003f12 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0204 	bic.w	r2, r2, #4
 8003f10:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f16:	f003 021c 	and.w	r2, r3, #28
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	2104      	movs	r1, #4
 8003f20:	fa01 f202 	lsl.w	r2, r1, r2
 8003f24:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d071      	beq.n	8004012 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003f36:	e06c      	b.n	8004012 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3c:	f003 031c 	and.w	r3, r3, #28
 8003f40:	2202      	movs	r2, #2
 8003f42:	409a      	lsls	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4013      	ands	r3, r2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d02e      	beq.n	8003faa <HAL_DMA_IRQHandler+0xec>
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d029      	beq.n	8003faa <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0320 	and.w	r3, r3, #32
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10b      	bne.n	8003f7c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 020a 	bic.w	r2, r2, #10
 8003f72:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f80:	f003 021c 	and.w	r2, r3, #28
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	2102      	movs	r1, #2
 8003f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f8e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d038      	beq.n	8004012 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003fa8:	e033      	b.n	8004012 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fae:	f003 031c 	and.w	r3, r3, #28
 8003fb2:	2208      	movs	r2, #8
 8003fb4:	409a      	lsls	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d02a      	beq.n	8004014 <HAL_DMA_IRQHandler+0x156>
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d025      	beq.n	8004014 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 020e 	bic.w	r2, r2, #14
 8003fd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fdc:	f003 021c 	and.w	r2, r3, #28
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8003fea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004006:	2b00      	cmp	r3, #0
 8004008:	d004      	beq.n	8004014 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004012:	bf00      	nop
 8004014:	bf00      	nop
}
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	460b      	mov	r3, r1
 8004026:	607a      	str	r2, [r7, #4]
 8004028:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_DMA_RegisterCallback+0x20>
 8004038:	2302      	movs	r3, #2
 800403a:	e032      	b.n	80040a2 <HAL_DMA_RegisterCallback+0x86>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b01      	cmp	r3, #1
 800404e:	d121      	bne.n	8004094 <HAL_DMA_RegisterCallback+0x78>
  {
    switch (CallbackID)
 8004050:	7afb      	ldrb	r3, [r7, #11]
 8004052:	2b03      	cmp	r3, #3
 8004054:	d81a      	bhi.n	800408c <HAL_DMA_RegisterCallback+0x70>
 8004056:	a201      	add	r2, pc, #4	; (adr r2, 800405c <HAL_DMA_RegisterCallback+0x40>)
 8004058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405c:	0800406d 	.word	0x0800406d
 8004060:	08004075 	.word	0x08004075
 8004064:	0800407d 	.word	0x0800407d
 8004068:	08004085 	.word	0x08004085
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 8004072:	e011      	b.n	8004098 <HAL_DMA_RegisterCallback+0x7c>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 800407a:	e00d      	b.n	8004098 <HAL_DMA_RegisterCallback+0x7c>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 8004082:	e009      	b.n	8004098 <HAL_DMA_RegisterCallback+0x7c>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 800408a:	e005      	b.n	8004098 <HAL_DMA_RegisterCallback+0x7c>

     default:
           status = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	75fb      	strb	r3, [r7, #23]
           break;
 8004090:	bf00      	nop
 8004092:	e001      	b.n	8004098 <HAL_DMA_RegisterCallback+0x7c>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80040a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	371c      	adds	r7, #28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop

080040b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040c6:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d004      	beq.n	80040da <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80040d8:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040de:	f003 021c 	and.w	r2, r3, #28
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	2101      	movs	r1, #1
 80040e8:	fa01 f202 	lsl.w	r2, r1, r2
 80040ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	2b10      	cmp	r3, #16
 80040fc:	d108      	bne.n	8004110 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800410e:	e007      	b.n	8004120 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	60da      	str	r2, [r3, #12]
}
 8004120:	bf00      	nop
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	461a      	mov	r2, r3
 800413a:	4b17      	ldr	r3, [pc, #92]	; (8004198 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800413c:	429a      	cmp	r2, r3
 800413e:	d80a      	bhi.n	8004156 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004144:	089b      	lsrs	r3, r3, #2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800414c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6493      	str	r3, [r2, #72]	; 0x48
 8004154:	e007      	b.n	8004166 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415a:	089b      	lsrs	r3, r3, #2
 800415c:	009a      	lsls	r2, r3, #2
 800415e:	4b0f      	ldr	r3, [pc, #60]	; (800419c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004160:	4413      	add	r3, r2
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	b2db      	uxtb	r3, r3
 800416c:	3b08      	subs	r3, #8
 800416e:	4a0c      	ldr	r2, [pc, #48]	; (80041a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004170:	fba2 2303 	umull	r2, r3, r2, r3
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a0a      	ldr	r2, [pc, #40]	; (80041a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800417c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f003 031f 	and.w	r3, r3, #31
 8004184:	2201      	movs	r2, #1
 8004186:	409a      	lsls	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800418c:	bf00      	nop
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	40020407 	.word	0x40020407
 800419c:	4002081c 	.word	0x4002081c
 80041a0:	cccccccd 	.word	0xcccccccd
 80041a4:	40020880 	.word	0x40020880

080041a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80041bc:	4413      	add	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	461a      	mov	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a08      	ldr	r2, [pc, #32]	; (80041ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80041ca:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	f003 0303 	and.w	r3, r3, #3
 80041d4:	2201      	movs	r2, #1
 80041d6:	409a      	lsls	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80041dc:	bf00      	nop
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	1000823f 	.word	0x1000823f
 80041ec:	40020940 	.word	0x40020940

080041f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041fa:	2300      	movs	r3, #0
 80041fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041fe:	e166      	b.n	80044ce <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	2101      	movs	r1, #1
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	fa01 f303 	lsl.w	r3, r1, r3
 800420c:	4013      	ands	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 8158 	beq.w	80044c8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d00b      	beq.n	8004238 <HAL_GPIO_Init+0x48>
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2b02      	cmp	r3, #2
 8004226:	d007      	beq.n	8004238 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800422c:	2b11      	cmp	r3, #17
 800422e:	d003      	beq.n	8004238 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b12      	cmp	r3, #18
 8004236:	d130      	bne.n	800429a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	2203      	movs	r2, #3
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	43db      	mvns	r3, r3
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4013      	ands	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800426e:	2201      	movs	r2, #1
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43db      	mvns	r3, r3
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4013      	ands	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	091b      	lsrs	r3, r3, #4
 8004284:	f003 0201 	and.w	r2, r3, #1
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	2203      	movs	r2, #3
 80042a6:	fa02 f303 	lsl.w	r3, r2, r3
 80042aa:	43db      	mvns	r3, r3
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4013      	ands	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	fa02 f303 	lsl.w	r3, r2, r3
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d003      	beq.n	80042da <HAL_GPIO_Init+0xea>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b12      	cmp	r3, #18
 80042d8:	d123      	bne.n	8004322 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	08da      	lsrs	r2, r3, #3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3208      	adds	r2, #8
 80042e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	220f      	movs	r2, #15
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	43db      	mvns	r3, r3
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4013      	ands	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	691a      	ldr	r2, [r3, #16]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	4313      	orrs	r3, r2
 8004312:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	08da      	lsrs	r2, r3, #3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3208      	adds	r2, #8
 800431c:	6939      	ldr	r1, [r7, #16]
 800431e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	2203      	movs	r2, #3
 800432e:	fa02 f303 	lsl.w	r3, r2, r3
 8004332:	43db      	mvns	r3, r3
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4013      	ands	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f003 0203 	and.w	r2, r3, #3
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	fa02 f303 	lsl.w	r3, r2, r3
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 80b2 	beq.w	80044c8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004364:	4b61      	ldr	r3, [pc, #388]	; (80044ec <HAL_GPIO_Init+0x2fc>)
 8004366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004368:	4a60      	ldr	r2, [pc, #384]	; (80044ec <HAL_GPIO_Init+0x2fc>)
 800436a:	f043 0301 	orr.w	r3, r3, #1
 800436e:	6613      	str	r3, [r2, #96]	; 0x60
 8004370:	4b5e      	ldr	r3, [pc, #376]	; (80044ec <HAL_GPIO_Init+0x2fc>)
 8004372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	60bb      	str	r3, [r7, #8]
 800437a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800437c:	4a5c      	ldr	r2, [pc, #368]	; (80044f0 <HAL_GPIO_Init+0x300>)
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	089b      	lsrs	r3, r3, #2
 8004382:	3302      	adds	r3, #2
 8004384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004388:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f003 0303 	and.w	r3, r3, #3
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	220f      	movs	r2, #15
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	43db      	mvns	r3, r3
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4013      	ands	r3, r2
 800439e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80043a6:	d02b      	beq.n	8004400 <HAL_GPIO_Init+0x210>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a52      	ldr	r2, [pc, #328]	; (80044f4 <HAL_GPIO_Init+0x304>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d025      	beq.n	80043fc <HAL_GPIO_Init+0x20c>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a51      	ldr	r2, [pc, #324]	; (80044f8 <HAL_GPIO_Init+0x308>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d01f      	beq.n	80043f8 <HAL_GPIO_Init+0x208>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a50      	ldr	r2, [pc, #320]	; (80044fc <HAL_GPIO_Init+0x30c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d019      	beq.n	80043f4 <HAL_GPIO_Init+0x204>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a4f      	ldr	r2, [pc, #316]	; (8004500 <HAL_GPIO_Init+0x310>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d013      	beq.n	80043f0 <HAL_GPIO_Init+0x200>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a4e      	ldr	r2, [pc, #312]	; (8004504 <HAL_GPIO_Init+0x314>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00d      	beq.n	80043ec <HAL_GPIO_Init+0x1fc>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a4d      	ldr	r2, [pc, #308]	; (8004508 <HAL_GPIO_Init+0x318>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d007      	beq.n	80043e8 <HAL_GPIO_Init+0x1f8>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a4c      	ldr	r2, [pc, #304]	; (800450c <HAL_GPIO_Init+0x31c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d101      	bne.n	80043e4 <HAL_GPIO_Init+0x1f4>
 80043e0:	2307      	movs	r3, #7
 80043e2:	e00e      	b.n	8004402 <HAL_GPIO_Init+0x212>
 80043e4:	2308      	movs	r3, #8
 80043e6:	e00c      	b.n	8004402 <HAL_GPIO_Init+0x212>
 80043e8:	2306      	movs	r3, #6
 80043ea:	e00a      	b.n	8004402 <HAL_GPIO_Init+0x212>
 80043ec:	2305      	movs	r3, #5
 80043ee:	e008      	b.n	8004402 <HAL_GPIO_Init+0x212>
 80043f0:	2304      	movs	r3, #4
 80043f2:	e006      	b.n	8004402 <HAL_GPIO_Init+0x212>
 80043f4:	2303      	movs	r3, #3
 80043f6:	e004      	b.n	8004402 <HAL_GPIO_Init+0x212>
 80043f8:	2302      	movs	r3, #2
 80043fa:	e002      	b.n	8004402 <HAL_GPIO_Init+0x212>
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <HAL_GPIO_Init+0x212>
 8004400:	2300      	movs	r3, #0
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	f002 0203 	and.w	r2, r2, #3
 8004408:	0092      	lsls	r2, r2, #2
 800440a:	4093      	lsls	r3, r2
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	4313      	orrs	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004412:	4937      	ldr	r1, [pc, #220]	; (80044f0 <HAL_GPIO_Init+0x300>)
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	089b      	lsrs	r3, r3, #2
 8004418:	3302      	adds	r3, #2
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004420:	4b3b      	ldr	r3, [pc, #236]	; (8004510 <HAL_GPIO_Init+0x320>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	43db      	mvns	r3, r3
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	4013      	ands	r3, r2
 800442e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4313      	orrs	r3, r2
 8004442:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004444:	4a32      	ldr	r2, [pc, #200]	; (8004510 <HAL_GPIO_Init+0x320>)
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800444a:	4b31      	ldr	r3, [pc, #196]	; (8004510 <HAL_GPIO_Init+0x320>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	43db      	mvns	r3, r3
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	4013      	ands	r3, r2
 8004458:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4313      	orrs	r3, r2
 800446c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800446e:	4a28      	ldr	r2, [pc, #160]	; (8004510 <HAL_GPIO_Init+0x320>)
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004474:	4b26      	ldr	r3, [pc, #152]	; (8004510 <HAL_GPIO_Init+0x320>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	43db      	mvns	r3, r3
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	4013      	ands	r3, r2
 8004482:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	4313      	orrs	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004498:	4a1d      	ldr	r2, [pc, #116]	; (8004510 <HAL_GPIO_Init+0x320>)
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800449e:	4b1c      	ldr	r3, [pc, #112]	; (8004510 <HAL_GPIO_Init+0x320>)
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	43db      	mvns	r3, r3
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4013      	ands	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80044c2:	4a13      	ldr	r2, [pc, #76]	; (8004510 <HAL_GPIO_Init+0x320>)
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	3301      	adds	r3, #1
 80044cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	fa22 f303 	lsr.w	r3, r2, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f47f ae91 	bne.w	8004200 <HAL_GPIO_Init+0x10>
  }
}
 80044de:	bf00      	nop
 80044e0:	371c      	adds	r7, #28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	40021000 	.word	0x40021000
 80044f0:	40010000 	.word	0x40010000
 80044f4:	48000400 	.word	0x48000400
 80044f8:	48000800 	.word	0x48000800
 80044fc:	48000c00 	.word	0x48000c00
 8004500:	48001000 	.word	0x48001000
 8004504:	48001400 	.word	0x48001400
 8004508:	48001800 	.word	0x48001800
 800450c:	48001c00 	.word	0x48001c00
 8004510:	40010400 	.word	0x40010400

08004514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	807b      	strh	r3, [r7, #2]
 8004520:	4613      	mov	r3, r2
 8004522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004524:	787b      	ldrb	r3, [r7, #1]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800452a:	887a      	ldrh	r2, [r7, #2]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004530:	e002      	b.n	8004538 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004532:	887a      	ldrh	r2, [r7, #2]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	460b      	mov	r3, r1
 800454e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004556:	887a      	ldrh	r2, [r7, #2]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4013      	ands	r3, r2
 800455c:	041a      	lsls	r2, r3, #16
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	43d9      	mvns	r1, r3
 8004562:	887b      	ldrh	r3, [r7, #2]
 8004564:	400b      	ands	r3, r1
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	619a      	str	r2, [r3, #24]
}
 800456c:	bf00      	nop
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800457c:	4b0d      	ldr	r3, [pc, #52]	; (80045b4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004588:	d102      	bne.n	8004590 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800458a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800458e:	e00b      	b.n	80045a8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004590:	4b08      	ldr	r3, [pc, #32]	; (80045b4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800459e:	d102      	bne.n	80045a6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80045a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045a4:	e000      	b.n	80045a8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80045a6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	40007000 	.word	0x40007000

080045b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d141      	bne.n	800464a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045c6:	4b4b      	ldr	r3, [pc, #300]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80045ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d2:	d131      	bne.n	8004638 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045d4:	4b47      	ldr	r3, [pc, #284]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045da:	4a46      	ldr	r2, [pc, #280]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045e4:	4b43      	ldr	r3, [pc, #268]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045ec:	4a41      	ldr	r2, [pc, #260]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80045f4:	4b40      	ldr	r3, [pc, #256]	; (80046f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2232      	movs	r2, #50	; 0x32
 80045fa:	fb02 f303 	mul.w	r3, r2, r3
 80045fe:	4a3f      	ldr	r2, [pc, #252]	; (80046fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004600:	fba2 2303 	umull	r2, r3, r2, r3
 8004604:	0c9b      	lsrs	r3, r3, #18
 8004606:	3301      	adds	r3, #1
 8004608:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800460a:	e002      	b.n	8004612 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	3b01      	subs	r3, #1
 8004610:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004612:	4b38      	ldr	r3, [pc, #224]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800461a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800461e:	d102      	bne.n	8004626 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f2      	bne.n	800460c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004626:	4b33      	ldr	r3, [pc, #204]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800462e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004632:	d158      	bne.n	80046e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e057      	b.n	80046e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004638:	4b2e      	ldr	r3, [pc, #184]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800463a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800463e:	4a2d      	ldr	r2, [pc, #180]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004644:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004648:	e04d      	b.n	80046e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004650:	d141      	bne.n	80046d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004652:	4b28      	ldr	r3, [pc, #160]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800465a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800465e:	d131      	bne.n	80046c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004660:	4b24      	ldr	r3, [pc, #144]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004666:	4a23      	ldr	r2, [pc, #140]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800466c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004670:	4b20      	ldr	r3, [pc, #128]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004678:	4a1e      	ldr	r2, [pc, #120]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800467a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800467e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004680:	4b1d      	ldr	r3, [pc, #116]	; (80046f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2232      	movs	r2, #50	; 0x32
 8004686:	fb02 f303 	mul.w	r3, r2, r3
 800468a:	4a1c      	ldr	r2, [pc, #112]	; (80046fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800468c:	fba2 2303 	umull	r2, r3, r2, r3
 8004690:	0c9b      	lsrs	r3, r3, #18
 8004692:	3301      	adds	r3, #1
 8004694:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004696:	e002      	b.n	800469e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	3b01      	subs	r3, #1
 800469c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800469e:	4b15      	ldr	r3, [pc, #84]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046aa:	d102      	bne.n	80046b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f2      	bne.n	8004698 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046b2:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046be:	d112      	bne.n	80046e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e011      	b.n	80046e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046c4:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ca:	4a0a      	ldr	r2, [pc, #40]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80046d4:	e007      	b.n	80046e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80046d6:	4b07      	ldr	r3, [pc, #28]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046de:	4a05      	ldr	r2, [pc, #20]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046e4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	40007000 	.word	0x40007000
 80046f8:	20000000 	.word	0x20000000
 80046fc:	431bde83 	.word	0x431bde83

08004700 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004704:	4b05      	ldr	r3, [pc, #20]	; (800471c <HAL_PWREx_EnableVddIO2+0x1c>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	4a04      	ldr	r2, [pc, #16]	; (800471c <HAL_PWREx_EnableVddIO2+0x1c>)
 800470a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800470e:	6053      	str	r3, [r2, #4]
}
 8004710:	bf00      	nop
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	40007000 	.word	0x40007000

08004720 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b088      	sub	sp, #32
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d102      	bne.n	8004734 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	f000 bc16 	b.w	8004f60 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004734:	4ba0      	ldr	r3, [pc, #640]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f003 030c 	and.w	r3, r3, #12
 800473c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800473e:	4b9e      	ldr	r3, [pc, #632]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0310 	and.w	r3, r3, #16
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 80e4 	beq.w	800491e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d007      	beq.n	800476c <HAL_RCC_OscConfig+0x4c>
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	2b0c      	cmp	r3, #12
 8004760:	f040 808b 	bne.w	800487a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	2b01      	cmp	r3, #1
 8004768:	f040 8087 	bne.w	800487a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800476c:	4b92      	ldr	r3, [pc, #584]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_RCC_OscConfig+0x64>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e3ed      	b.n	8004f60 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a1a      	ldr	r2, [r3, #32]
 8004788:	4b8b      	ldr	r3, [pc, #556]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b00      	cmp	r3, #0
 8004792:	d004      	beq.n	800479e <HAL_RCC_OscConfig+0x7e>
 8004794:	4b88      	ldr	r3, [pc, #544]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800479c:	e005      	b.n	80047aa <HAL_RCC_OscConfig+0x8a>
 800479e:	4b86      	ldr	r3, [pc, #536]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 80047a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047a4:	091b      	lsrs	r3, r3, #4
 80047a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d223      	bcs.n	80047f6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fdc6 	bl	8005344 <RCC_SetFlashLatencyFromMSIRange>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e3ce      	b.n	8004f60 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047c2:	4b7d      	ldr	r3, [pc, #500]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a7c      	ldr	r2, [pc, #496]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 80047c8:	f043 0308 	orr.w	r3, r3, #8
 80047cc:	6013      	str	r3, [r2, #0]
 80047ce:	4b7a      	ldr	r3, [pc, #488]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	4977      	ldr	r1, [pc, #476]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047e0:	4b75      	ldr	r3, [pc, #468]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	021b      	lsls	r3, r3, #8
 80047ee:	4972      	ldr	r1, [pc, #456]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	604b      	str	r3, [r1, #4]
 80047f4:	e025      	b.n	8004842 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047f6:	4b70      	ldr	r3, [pc, #448]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a6f      	ldr	r2, [pc, #444]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 80047fc:	f043 0308 	orr.w	r3, r3, #8
 8004800:	6013      	str	r3, [r2, #0]
 8004802:	4b6d      	ldr	r3, [pc, #436]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	496a      	ldr	r1, [pc, #424]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 8004810:	4313      	orrs	r3, r2
 8004812:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004814:	4b68      	ldr	r3, [pc, #416]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	021b      	lsls	r3, r3, #8
 8004822:	4965      	ldr	r1, [pc, #404]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 8004824:	4313      	orrs	r3, r2
 8004826:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d109      	bne.n	8004842 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fd86 	bl	8005344 <RCC_SetFlashLatencyFromMSIRange>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e38e      	b.n	8004f60 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004842:	f000 fcbf 	bl	80051c4 <HAL_RCC_GetSysClockFreq>
 8004846:	4601      	mov	r1, r0
 8004848:	4b5b      	ldr	r3, [pc, #364]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	091b      	lsrs	r3, r3, #4
 800484e:	f003 030f 	and.w	r3, r3, #15
 8004852:	4a5a      	ldr	r2, [pc, #360]	; (80049bc <HAL_RCC_OscConfig+0x29c>)
 8004854:	5cd3      	ldrb	r3, [r2, r3]
 8004856:	f003 031f 	and.w	r3, r3, #31
 800485a:	fa21 f303 	lsr.w	r3, r1, r3
 800485e:	4a58      	ldr	r2, [pc, #352]	; (80049c0 <HAL_RCC_OscConfig+0x2a0>)
 8004860:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004862:	4b58      	ldr	r3, [pc, #352]	; (80049c4 <HAL_RCC_OscConfig+0x2a4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f7fd fde6 	bl	8002438 <HAL_InitTick>
 800486c:	4603      	mov	r3, r0
 800486e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d052      	beq.n	800491c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004876:	7bfb      	ldrb	r3, [r7, #15]
 8004878:	e372      	b.n	8004f60 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d032      	beq.n	80048e8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004882:	4b4d      	ldr	r3, [pc, #308]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a4c      	ldr	r2, [pc, #304]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 8004888:	f043 0301 	orr.w	r3, r3, #1
 800488c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800488e:	f7fd fe23 	bl	80024d8 <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004896:	f7fd fe1f 	bl	80024d8 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e35b      	b.n	8004f60 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048a8:	4b43      	ldr	r3, [pc, #268]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0f0      	beq.n	8004896 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048b4:	4b40      	ldr	r3, [pc, #256]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a3f      	ldr	r2, [pc, #252]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 80048ba:	f043 0308 	orr.w	r3, r3, #8
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	4b3d      	ldr	r3, [pc, #244]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	493a      	ldr	r1, [pc, #232]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048d2:	4b39      	ldr	r3, [pc, #228]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	021b      	lsls	r3, r3, #8
 80048e0:	4935      	ldr	r1, [pc, #212]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	604b      	str	r3, [r1, #4]
 80048e6:	e01a      	b.n	800491e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80048e8:	4b33      	ldr	r3, [pc, #204]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a32      	ldr	r2, [pc, #200]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 80048ee:	f023 0301 	bic.w	r3, r3, #1
 80048f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048f4:	f7fd fdf0 	bl	80024d8 <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048fc:	f7fd fdec 	bl	80024d8 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e328      	b.n	8004f60 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800490e:	4b2a      	ldr	r3, [pc, #168]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1f0      	bne.n	80048fc <HAL_RCC_OscConfig+0x1dc>
 800491a:	e000      	b.n	800491e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800491c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d073      	beq.n	8004a12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	2b08      	cmp	r3, #8
 800492e:	d005      	beq.n	800493c <HAL_RCC_OscConfig+0x21c>
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	2b0c      	cmp	r3, #12
 8004934:	d10e      	bne.n	8004954 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2b03      	cmp	r3, #3
 800493a:	d10b      	bne.n	8004954 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800493c:	4b1e      	ldr	r3, [pc, #120]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d063      	beq.n	8004a10 <HAL_RCC_OscConfig+0x2f0>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d15f      	bne.n	8004a10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e305      	b.n	8004f60 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800495c:	d106      	bne.n	800496c <HAL_RCC_OscConfig+0x24c>
 800495e:	4b16      	ldr	r3, [pc, #88]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a15      	ldr	r2, [pc, #84]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 8004964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004968:	6013      	str	r3, [r2, #0]
 800496a:	e01d      	b.n	80049a8 <HAL_RCC_OscConfig+0x288>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004974:	d10c      	bne.n	8004990 <HAL_RCC_OscConfig+0x270>
 8004976:	4b10      	ldr	r3, [pc, #64]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a0f      	ldr	r2, [pc, #60]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 800497c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	4b0d      	ldr	r3, [pc, #52]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a0c      	ldr	r2, [pc, #48]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 8004988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800498c:	6013      	str	r3, [r2, #0]
 800498e:	e00b      	b.n	80049a8 <HAL_RCC_OscConfig+0x288>
 8004990:	4b09      	ldr	r3, [pc, #36]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a08      	ldr	r2, [pc, #32]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 8004996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800499a:	6013      	str	r3, [r2, #0]
 800499c:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a05      	ldr	r2, [pc, #20]	; (80049b8 <HAL_RCC_OscConfig+0x298>)
 80049a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d01b      	beq.n	80049e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b0:	f7fd fd92 	bl	80024d8 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049b6:	e010      	b.n	80049da <HAL_RCC_OscConfig+0x2ba>
 80049b8:	40021000 	.word	0x40021000
 80049bc:	080089d4 	.word	0x080089d4
 80049c0:	20000000 	.word	0x20000000
 80049c4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049c8:	f7fd fd86 	bl	80024d8 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b64      	cmp	r3, #100	; 0x64
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e2c2      	b.n	8004f60 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049da:	4baf      	ldr	r3, [pc, #700]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0f0      	beq.n	80049c8 <HAL_RCC_OscConfig+0x2a8>
 80049e6:	e014      	b.n	8004a12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e8:	f7fd fd76 	bl	80024d8 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f0:	f7fd fd72 	bl	80024d8 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	; 0x64
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e2ae      	b.n	8004f60 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a02:	4ba5      	ldr	r3, [pc, #660]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1f0      	bne.n	80049f0 <HAL_RCC_OscConfig+0x2d0>
 8004a0e:	e000      	b.n	8004a12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d060      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	d005      	beq.n	8004a30 <HAL_RCC_OscConfig+0x310>
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	2b0c      	cmp	r3, #12
 8004a28:	d119      	bne.n	8004a5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d116      	bne.n	8004a5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a30:	4b99      	ldr	r3, [pc, #612]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <HAL_RCC_OscConfig+0x328>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e28b      	b.n	8004f60 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a48:	4b93      	ldr	r3, [pc, #588]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	061b      	lsls	r3, r3, #24
 8004a56:	4990      	ldr	r1, [pc, #576]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a5c:	e040      	b.n	8004ae0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d023      	beq.n	8004aae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a66:	4b8c      	ldr	r3, [pc, #560]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a8b      	ldr	r2, [pc, #556]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a72:	f7fd fd31 	bl	80024d8 <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a78:	e008      	b.n	8004a8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a7a:	f7fd fd2d 	bl	80024d8 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e269      	b.n	8004f60 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a8c:	4b82      	ldr	r3, [pc, #520]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0f0      	beq.n	8004a7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a98:	4b7f      	ldr	r3, [pc, #508]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	061b      	lsls	r3, r3, #24
 8004aa6:	497c      	ldr	r1, [pc, #496]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	604b      	str	r3, [r1, #4]
 8004aac:	e018      	b.n	8004ae0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aae:	4b7a      	ldr	r3, [pc, #488]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a79      	ldr	r2, [pc, #484]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aba:	f7fd fd0d 	bl	80024d8 <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ac2:	f7fd fd09 	bl	80024d8 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e245      	b.n	8004f60 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ad4:	4b70      	ldr	r3, [pc, #448]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1f0      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0308 	and.w	r3, r3, #8
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d03c      	beq.n	8004b66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d01c      	beq.n	8004b2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004af4:	4b68      	ldr	r3, [pc, #416]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004afa:	4a67      	ldr	r2, [pc, #412]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004afc:	f043 0301 	orr.w	r3, r3, #1
 8004b00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b04:	f7fd fce8 	bl	80024d8 <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b0c:	f7fd fce4 	bl	80024d8 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e220      	b.n	8004f60 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b1e:	4b5e      	ldr	r3, [pc, #376]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0ef      	beq.n	8004b0c <HAL_RCC_OscConfig+0x3ec>
 8004b2c:	e01b      	b.n	8004b66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b2e:	4b5a      	ldr	r3, [pc, #360]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b34:	4a58      	ldr	r2, [pc, #352]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004b36:	f023 0301 	bic.w	r3, r3, #1
 8004b3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b3e:	f7fd fccb 	bl	80024d8 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b44:	e008      	b.n	8004b58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b46:	f7fd fcc7 	bl	80024d8 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e203      	b.n	8004f60 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b58:	4b4f      	ldr	r3, [pc, #316]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1ef      	bne.n	8004b46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0304 	and.w	r3, r3, #4
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 80a6 	beq.w	8004cc0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b74:	2300      	movs	r3, #0
 8004b76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004b78:	4b47      	ldr	r3, [pc, #284]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10d      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b84:	4b44      	ldr	r3, [pc, #272]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b88:	4a43      	ldr	r2, [pc, #268]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b8e:	6593      	str	r3, [r2, #88]	; 0x58
 8004b90:	4b41      	ldr	r3, [pc, #260]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b98:	60bb      	str	r3, [r7, #8]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ba0:	4b3e      	ldr	r3, [pc, #248]	; (8004c9c <HAL_RCC_OscConfig+0x57c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d118      	bne.n	8004bde <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bac:	4b3b      	ldr	r3, [pc, #236]	; (8004c9c <HAL_RCC_OscConfig+0x57c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a3a      	ldr	r2, [pc, #232]	; (8004c9c <HAL_RCC_OscConfig+0x57c>)
 8004bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bb8:	f7fd fc8e 	bl	80024d8 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bc0:	f7fd fc8a 	bl	80024d8 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e1c6      	b.n	8004f60 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bd2:	4b32      	ldr	r3, [pc, #200]	; (8004c9c <HAL_RCC_OscConfig+0x57c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0f0      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d108      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x4d8>
 8004be6:	4b2c      	ldr	r3, [pc, #176]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bec:	4a2a      	ldr	r2, [pc, #168]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004bee:	f043 0301 	orr.w	r3, r3, #1
 8004bf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bf6:	e024      	b.n	8004c42 <HAL_RCC_OscConfig+0x522>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	2b05      	cmp	r3, #5
 8004bfe:	d110      	bne.n	8004c22 <HAL_RCC_OscConfig+0x502>
 8004c00:	4b25      	ldr	r3, [pc, #148]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c06:	4a24      	ldr	r2, [pc, #144]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004c08:	f043 0304 	orr.w	r3, r3, #4
 8004c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c10:	4b21      	ldr	r3, [pc, #132]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c16:	4a20      	ldr	r2, [pc, #128]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004c18:	f043 0301 	orr.w	r3, r3, #1
 8004c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c20:	e00f      	b.n	8004c42 <HAL_RCC_OscConfig+0x522>
 8004c22:	4b1d      	ldr	r3, [pc, #116]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c28:	4a1b      	ldr	r2, [pc, #108]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004c2a:	f023 0301 	bic.w	r3, r3, #1
 8004c2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c32:	4b19      	ldr	r3, [pc, #100]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c38:	4a17      	ldr	r2, [pc, #92]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004c3a:	f023 0304 	bic.w	r3, r3, #4
 8004c3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d016      	beq.n	8004c78 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4a:	f7fd fc45 	bl	80024d8 <HAL_GetTick>
 8004c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c50:	e00a      	b.n	8004c68 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c52:	f7fd fc41 	bl	80024d8 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e17b      	b.n	8004f60 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c68:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <HAL_RCC_OscConfig+0x578>)
 8004c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d0ed      	beq.n	8004c52 <HAL_RCC_OscConfig+0x532>
 8004c76:	e01a      	b.n	8004cae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c78:	f7fd fc2e 	bl	80024d8 <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c7e:	e00f      	b.n	8004ca0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c80:	f7fd fc2a 	bl	80024d8 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d906      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e164      	b.n	8004f60 <HAL_RCC_OscConfig+0x840>
 8004c96:	bf00      	nop
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ca0:	4ba8      	ldr	r3, [pc, #672]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1e8      	bne.n	8004c80 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cae:	7ffb      	ldrb	r3, [r7, #31]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d105      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cb4:	4ba3      	ldr	r3, [pc, #652]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb8:	4aa2      	ldr	r2, [pc, #648]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004cba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cbe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0320 	and.w	r3, r3, #32
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d03c      	beq.n	8004d46 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01c      	beq.n	8004d0e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004cd4:	4b9b      	ldr	r3, [pc, #620]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cda:	4a9a      	ldr	r2, [pc, #616]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004cdc:	f043 0301 	orr.w	r3, r3, #1
 8004ce0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce4:	f7fd fbf8 	bl	80024d8 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cec:	f7fd fbf4 	bl	80024d8 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e130      	b.n	8004f60 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004cfe:	4b91      	ldr	r3, [pc, #580]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004d00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0ef      	beq.n	8004cec <HAL_RCC_OscConfig+0x5cc>
 8004d0c:	e01b      	b.n	8004d46 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d0e:	4b8d      	ldr	r3, [pc, #564]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004d10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d14:	4a8b      	ldr	r2, [pc, #556]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004d16:	f023 0301 	bic.w	r3, r3, #1
 8004d1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d1e:	f7fd fbdb 	bl	80024d8 <HAL_GetTick>
 8004d22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d24:	e008      	b.n	8004d38 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d26:	f7fd fbd7 	bl	80024d8 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d901      	bls.n	8004d38 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e113      	b.n	8004f60 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d38:	4b82      	ldr	r3, [pc, #520]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004d3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1ef      	bne.n	8004d26 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 8107 	beq.w	8004f5e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	f040 80cb 	bne.w	8004ef0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004d5a:	4b7a      	ldr	r3, [pc, #488]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f003 0203 	and.w	r2, r3, #3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d12c      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d123      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d11b      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d113      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004daa:	085b      	lsrs	r3, r3, #1
 8004dac:	3b01      	subs	r3, #1
 8004dae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d109      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	085b      	lsrs	r3, r3, #1
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d06d      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	2b0c      	cmp	r3, #12
 8004dcc:	d068      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004dce:	4b5d      	ldr	r3, [pc, #372]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d105      	bne.n	8004de6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004dda:	4b5a      	ldr	r3, [pc, #360]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e0ba      	b.n	8004f60 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004dea:	4b56      	ldr	r3, [pc, #344]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a55      	ldr	r2, [pc, #340]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004df0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004df4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004df6:	f7fd fb6f 	bl	80024d8 <HAL_GetTick>
 8004dfa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dfc:	e008      	b.n	8004e10 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dfe:	f7fd fb6b 	bl	80024d8 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d901      	bls.n	8004e10 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e0a7      	b.n	8004f60 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e10:	4b4c      	ldr	r3, [pc, #304]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1f0      	bne.n	8004dfe <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e1c:	4b49      	ldr	r3, [pc, #292]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004e1e:	68da      	ldr	r2, [r3, #12]
 8004e20:	4b49      	ldr	r3, [pc, #292]	; (8004f48 <HAL_RCC_OscConfig+0x828>)
 8004e22:	4013      	ands	r3, r2
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e2c:	3a01      	subs	r2, #1
 8004e2e:	0112      	lsls	r2, r2, #4
 8004e30:	4311      	orrs	r1, r2
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e36:	0212      	lsls	r2, r2, #8
 8004e38:	4311      	orrs	r1, r2
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e3e:	0852      	lsrs	r2, r2, #1
 8004e40:	3a01      	subs	r2, #1
 8004e42:	0552      	lsls	r2, r2, #21
 8004e44:	4311      	orrs	r1, r2
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e4a:	0852      	lsrs	r2, r2, #1
 8004e4c:	3a01      	subs	r2, #1
 8004e4e:	0652      	lsls	r2, r2, #25
 8004e50:	4311      	orrs	r1, r2
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e56:	06d2      	lsls	r2, r2, #27
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	493a      	ldr	r1, [pc, #232]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e60:	4b38      	ldr	r3, [pc, #224]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a37      	ldr	r2, [pc, #220]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e6c:	4b35      	ldr	r3, [pc, #212]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	4a34      	ldr	r2, [pc, #208]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e78:	f7fd fb2e 	bl	80024d8 <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e80:	f7fd fb2a 	bl	80024d8 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e066      	b.n	8004f60 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e92:	4b2c      	ldr	r3, [pc, #176]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0f0      	beq.n	8004e80 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e9e:	e05e      	b.n	8004f5e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e05d      	b.n	8004f60 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ea4:	4b27      	ldr	r3, [pc, #156]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d156      	bne.n	8004f5e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004eb0:	4b24      	ldr	r3, [pc, #144]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a23      	ldr	r2, [pc, #140]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ebc:	4b21      	ldr	r3, [pc, #132]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	4a20      	ldr	r2, [pc, #128]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ec6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ec8:	f7fd fb06 	bl	80024d8 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ed0:	f7fd fb02 	bl	80024d8 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e03e      	b.n	8004f60 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ee2:	4b18      	ldr	r3, [pc, #96]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0f0      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x7b0>
 8004eee:	e036      	b.n	8004f5e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	2b0c      	cmp	r3, #12
 8004ef4:	d031      	beq.n	8004f5a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ef6:	4b13      	ldr	r3, [pc, #76]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a12      	ldr	r2, [pc, #72]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004efc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f00:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004f02:	4b10      	ldr	r3, [pc, #64]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d105      	bne.n	8004f1a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004f0e:	4b0d      	ldr	r3, [pc, #52]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	4a0c      	ldr	r2, [pc, #48]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004f14:	f023 0303 	bic.w	r3, r3, #3
 8004f18:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004f1a:	4b0a      	ldr	r3, [pc, #40]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	4a09      	ldr	r2, [pc, #36]	; (8004f44 <HAL_RCC_OscConfig+0x824>)
 8004f20:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f28:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2a:	f7fd fad5 	bl	80024d8 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f30:	e00c      	b.n	8004f4c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f32:	f7fd fad1 	bl	80024d8 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d905      	bls.n	8004f4c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e00d      	b.n	8004f60 <HAL_RCC_OscConfig+0x840>
 8004f44:	40021000 	.word	0x40021000
 8004f48:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f4c:	4b06      	ldr	r3, [pc, #24]	; (8004f68 <HAL_RCC_OscConfig+0x848>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1ec      	bne.n	8004f32 <HAL_RCC_OscConfig+0x812>
 8004f58:	e001      	b.n	8004f5e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e000      	b.n	8004f60 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3720      	adds	r7, #32
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40021000 	.word	0x40021000

08004f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004f76:	2300      	movs	r3, #0
 8004f78:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e10f      	b.n	80051a4 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f84:	4b89      	ldr	r3, [pc, #548]	; (80051ac <HAL_RCC_ClockConfig+0x240>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 030f 	and.w	r3, r3, #15
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d910      	bls.n	8004fb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f92:	4b86      	ldr	r3, [pc, #536]	; (80051ac <HAL_RCC_ClockConfig+0x240>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f023 020f 	bic.w	r2, r3, #15
 8004f9a:	4984      	ldr	r1, [pc, #528]	; (80051ac <HAL_RCC_ClockConfig+0x240>)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fa2:	4b82      	ldr	r3, [pc, #520]	; (80051ac <HAL_RCC_ClockConfig+0x240>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 030f 	and.w	r3, r3, #15
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d001      	beq.n	8004fb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e0f7      	b.n	80051a4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 8089 	beq.w	80050d4 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	2b03      	cmp	r3, #3
 8004fc8:	d133      	bne.n	8005032 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fca:	4b79      	ldr	r3, [pc, #484]	; (80051b0 <HAL_RCC_ClockConfig+0x244>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e0e4      	b.n	80051a4 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004fda:	f000 fa0d 	bl	80053f8 <RCC_GetSysClockFreqFromPLLSource>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	4b74      	ldr	r3, [pc, #464]	; (80051b4 <HAL_RCC_ClockConfig+0x248>)
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d955      	bls.n	8005092 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004fe6:	4b72      	ldr	r3, [pc, #456]	; (80051b0 <HAL_RCC_ClockConfig+0x244>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10a      	bne.n	8005008 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ff2:	4b6f      	ldr	r3, [pc, #444]	; (80051b0 <HAL_RCC_ClockConfig+0x244>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ffa:	4a6d      	ldr	r2, [pc, #436]	; (80051b0 <HAL_RCC_ClockConfig+0x244>)
 8004ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005000:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005002:	2380      	movs	r3, #128	; 0x80
 8005004:	617b      	str	r3, [r7, #20]
 8005006:	e044      	b.n	8005092 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d03e      	beq.n	8005092 <HAL_RCC_ClockConfig+0x126>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d13a      	bne.n	8005092 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800501c:	4b64      	ldr	r3, [pc, #400]	; (80051b0 <HAL_RCC_ClockConfig+0x244>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005024:	4a62      	ldr	r2, [pc, #392]	; (80051b0 <HAL_RCC_ClockConfig+0x244>)
 8005026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800502a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800502c:	2380      	movs	r3, #128	; 0x80
 800502e:	617b      	str	r3, [r7, #20]
 8005030:	e02f      	b.n	8005092 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2b02      	cmp	r3, #2
 8005038:	d107      	bne.n	800504a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800503a:	4b5d      	ldr	r3, [pc, #372]	; (80051b0 <HAL_RCC_ClockConfig+0x244>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d115      	bne.n	8005072 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e0ac      	b.n	80051a4 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d107      	bne.n	8005062 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005052:	4b57      	ldr	r3, [pc, #348]	; (80051b0 <HAL_RCC_ClockConfig+0x244>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d109      	bne.n	8005072 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e0a0      	b.n	80051a4 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005062:	4b53      	ldr	r3, [pc, #332]	; (80051b0 <HAL_RCC_ClockConfig+0x244>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e098      	b.n	80051a4 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005072:	f000 f8a7 	bl	80051c4 <HAL_RCC_GetSysClockFreq>
 8005076:	4602      	mov	r2, r0
 8005078:	4b4e      	ldr	r3, [pc, #312]	; (80051b4 <HAL_RCC_ClockConfig+0x248>)
 800507a:	429a      	cmp	r2, r3
 800507c:	d909      	bls.n	8005092 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800507e:	4b4c      	ldr	r3, [pc, #304]	; (80051b0 <HAL_RCC_ClockConfig+0x244>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005086:	4a4a      	ldr	r2, [pc, #296]	; (80051b0 <HAL_RCC_ClockConfig+0x244>)
 8005088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800508c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800508e:	2380      	movs	r3, #128	; 0x80
 8005090:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005092:	4b47      	ldr	r3, [pc, #284]	; (80051b0 <HAL_RCC_ClockConfig+0x244>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f023 0203 	bic.w	r2, r3, #3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	4944      	ldr	r1, [pc, #272]	; (80051b0 <HAL_RCC_ClockConfig+0x244>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a4:	f7fd fa18 	bl	80024d8 <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050aa:	e00a      	b.n	80050c2 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ac:	f7fd fa14 	bl	80024d8 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e070      	b.n	80051a4 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c2:	4b3b      	ldr	r3, [pc, #236]	; (80051b0 <HAL_RCC_ClockConfig+0x244>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 020c 	and.w	r2, r3, #12
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d1eb      	bne.n	80050ac <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d009      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050e0:	4b33      	ldr	r3, [pc, #204]	; (80051b0 <HAL_RCC_ClockConfig+0x244>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	4930      	ldr	r1, [pc, #192]	; (80051b0 <HAL_RCC_ClockConfig+0x244>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	608b      	str	r3, [r1, #8]
 80050f2:	e008      	b.n	8005106 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	2b80      	cmp	r3, #128	; 0x80
 80050f8:	d105      	bne.n	8005106 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80050fa:	4b2d      	ldr	r3, [pc, #180]	; (80051b0 <HAL_RCC_ClockConfig+0x244>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	4a2c      	ldr	r2, [pc, #176]	; (80051b0 <HAL_RCC_ClockConfig+0x244>)
 8005100:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005104:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005106:	4b29      	ldr	r3, [pc, #164]	; (80051ac <HAL_RCC_ClockConfig+0x240>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 030f 	and.w	r3, r3, #15
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d210      	bcs.n	8005136 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005114:	4b25      	ldr	r3, [pc, #148]	; (80051ac <HAL_RCC_ClockConfig+0x240>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f023 020f 	bic.w	r2, r3, #15
 800511c:	4923      	ldr	r1, [pc, #140]	; (80051ac <HAL_RCC_ClockConfig+0x240>)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	4313      	orrs	r3, r2
 8005122:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005124:	4b21      	ldr	r3, [pc, #132]	; (80051ac <HAL_RCC_ClockConfig+0x240>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 030f 	and.w	r3, r3, #15
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	429a      	cmp	r2, r3
 8005130:	d001      	beq.n	8005136 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e036      	b.n	80051a4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0304 	and.w	r3, r3, #4
 800513e:	2b00      	cmp	r3, #0
 8005140:	d008      	beq.n	8005154 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005142:	4b1b      	ldr	r3, [pc, #108]	; (80051b0 <HAL_RCC_ClockConfig+0x244>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	4918      	ldr	r1, [pc, #96]	; (80051b0 <HAL_RCC_ClockConfig+0x244>)
 8005150:	4313      	orrs	r3, r2
 8005152:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	2b00      	cmp	r3, #0
 800515e:	d009      	beq.n	8005174 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005160:	4b13      	ldr	r3, [pc, #76]	; (80051b0 <HAL_RCC_ClockConfig+0x244>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	4910      	ldr	r1, [pc, #64]	; (80051b0 <HAL_RCC_ClockConfig+0x244>)
 8005170:	4313      	orrs	r3, r2
 8005172:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005174:	f000 f826 	bl	80051c4 <HAL_RCC_GetSysClockFreq>
 8005178:	4601      	mov	r1, r0
 800517a:	4b0d      	ldr	r3, [pc, #52]	; (80051b0 <HAL_RCC_ClockConfig+0x244>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	091b      	lsrs	r3, r3, #4
 8005180:	f003 030f 	and.w	r3, r3, #15
 8005184:	4a0c      	ldr	r2, [pc, #48]	; (80051b8 <HAL_RCC_ClockConfig+0x24c>)
 8005186:	5cd3      	ldrb	r3, [r2, r3]
 8005188:	f003 031f 	and.w	r3, r3, #31
 800518c:	fa21 f303 	lsr.w	r3, r1, r3
 8005190:	4a0a      	ldr	r2, [pc, #40]	; (80051bc <HAL_RCC_ClockConfig+0x250>)
 8005192:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005194:	4b0a      	ldr	r3, [pc, #40]	; (80051c0 <HAL_RCC_ClockConfig+0x254>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4618      	mov	r0, r3
 800519a:	f7fd f94d 	bl	8002438 <HAL_InitTick>
 800519e:	4603      	mov	r3, r0
 80051a0:	73fb      	strb	r3, [r7, #15]

  return status;
 80051a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3718      	adds	r7, #24
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	40022000 	.word	0x40022000
 80051b0:	40021000 	.word	0x40021000
 80051b4:	04c4b400 	.word	0x04c4b400
 80051b8:	080089d4 	.word	0x080089d4
 80051bc:	20000000 	.word	0x20000000
 80051c0:	20000004 	.word	0x20000004

080051c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b089      	sub	sp, #36	; 0x24
 80051c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	61fb      	str	r3, [r7, #28]
 80051ce:	2300      	movs	r3, #0
 80051d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051d2:	4b3d      	ldr	r3, [pc, #244]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 030c 	and.w	r3, r3, #12
 80051da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051dc:	4b3a      	ldr	r3, [pc, #232]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f003 0303 	and.w	r3, r3, #3
 80051e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d005      	beq.n	80051f8 <HAL_RCC_GetSysClockFreq+0x34>
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	2b0c      	cmp	r3, #12
 80051f0:	d121      	bne.n	8005236 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d11e      	bne.n	8005236 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80051f8:	4b33      	ldr	r3, [pc, #204]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	2b00      	cmp	r3, #0
 8005202:	d107      	bne.n	8005214 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005204:	4b30      	ldr	r3, [pc, #192]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8005206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800520a:	0a1b      	lsrs	r3, r3, #8
 800520c:	f003 030f 	and.w	r3, r3, #15
 8005210:	61fb      	str	r3, [r7, #28]
 8005212:	e005      	b.n	8005220 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005214:	4b2c      	ldr	r3, [pc, #176]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	091b      	lsrs	r3, r3, #4
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005220:	4a2a      	ldr	r2, [pc, #168]	; (80052cc <HAL_RCC_GetSysClockFreq+0x108>)
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005228:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10d      	bne.n	800524c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005234:	e00a      	b.n	800524c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	2b04      	cmp	r3, #4
 800523a:	d102      	bne.n	8005242 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800523c:	4b24      	ldr	r3, [pc, #144]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800523e:	61bb      	str	r3, [r7, #24]
 8005240:	e004      	b.n	800524c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	2b08      	cmp	r3, #8
 8005246:	d101      	bne.n	800524c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005248:	4b21      	ldr	r3, [pc, #132]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800524a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	2b0c      	cmp	r3, #12
 8005250:	d133      	bne.n	80052ba <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005252:	4b1d      	ldr	r3, [pc, #116]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f003 0303 	and.w	r3, r3, #3
 800525a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b02      	cmp	r3, #2
 8005260:	d002      	beq.n	8005268 <HAL_RCC_GetSysClockFreq+0xa4>
 8005262:	2b03      	cmp	r3, #3
 8005264:	d003      	beq.n	800526e <HAL_RCC_GetSysClockFreq+0xaa>
 8005266:	e005      	b.n	8005274 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005268:	4b19      	ldr	r3, [pc, #100]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800526a:	617b      	str	r3, [r7, #20]
      break;
 800526c:	e005      	b.n	800527a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800526e:	4b18      	ldr	r3, [pc, #96]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005270:	617b      	str	r3, [r7, #20]
      break;
 8005272:	e002      	b.n	800527a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	617b      	str	r3, [r7, #20]
      break;
 8005278:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800527a:	4b13      	ldr	r3, [pc, #76]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x104>)
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	091b      	lsrs	r3, r3, #4
 8005280:	f003 030f 	and.w	r3, r3, #15
 8005284:	3301      	adds	r3, #1
 8005286:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005288:	4b0f      	ldr	r3, [pc, #60]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x104>)
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	0a1b      	lsrs	r3, r3, #8
 800528e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	fb02 f203 	mul.w	r2, r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	fbb2 f3f3 	udiv	r3, r2, r3
 800529e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052a0:	4b09      	ldr	r3, [pc, #36]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	0e5b      	lsrs	r3, r3, #25
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	3301      	adds	r3, #1
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80052ba:	69bb      	ldr	r3, [r7, #24]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3724      	adds	r7, #36	; 0x24
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	40021000 	.word	0x40021000
 80052cc:	080089ec 	.word	0x080089ec
 80052d0:	00f42400 	.word	0x00f42400

080052d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052d8:	4b03      	ldr	r3, [pc, #12]	; (80052e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80052da:	681b      	ldr	r3, [r3, #0]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	20000000 	.word	0x20000000

080052ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80052f0:	f7ff fff0 	bl	80052d4 <HAL_RCC_GetHCLKFreq>
 80052f4:	4601      	mov	r1, r0
 80052f6:	4b06      	ldr	r3, [pc, #24]	; (8005310 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	0a1b      	lsrs	r3, r3, #8
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	4a04      	ldr	r2, [pc, #16]	; (8005314 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005302:	5cd3      	ldrb	r3, [r2, r3]
 8005304:	f003 031f 	and.w	r3, r3, #31
 8005308:	fa21 f303 	lsr.w	r3, r1, r3
}
 800530c:	4618      	mov	r0, r3
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40021000 	.word	0x40021000
 8005314:	080089e4 	.word	0x080089e4

08005318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800531c:	f7ff ffda 	bl	80052d4 <HAL_RCC_GetHCLKFreq>
 8005320:	4601      	mov	r1, r0
 8005322:	4b06      	ldr	r3, [pc, #24]	; (800533c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	0adb      	lsrs	r3, r3, #11
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	4a04      	ldr	r2, [pc, #16]	; (8005340 <HAL_RCC_GetPCLK2Freq+0x28>)
 800532e:	5cd3      	ldrb	r3, [r2, r3]
 8005330:	f003 031f 	and.w	r3, r3, #31
 8005334:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005338:	4618      	mov	r0, r3
 800533a:	bd80      	pop	{r7, pc}
 800533c:	40021000 	.word	0x40021000
 8005340:	080089e4 	.word	0x080089e4

08005344 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800534c:	2300      	movs	r3, #0
 800534e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005350:	4b27      	ldr	r3, [pc, #156]	; (80053f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d003      	beq.n	8005364 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800535c:	f7ff f90c 	bl	8004578 <HAL_PWREx_GetVoltageRange>
 8005360:	6178      	str	r0, [r7, #20]
 8005362:	e014      	b.n	800538e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005364:	4b22      	ldr	r3, [pc, #136]	; (80053f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005368:	4a21      	ldr	r2, [pc, #132]	; (80053f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800536a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800536e:	6593      	str	r3, [r2, #88]	; 0x58
 8005370:	4b1f      	ldr	r3, [pc, #124]	; (80053f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800537c:	f7ff f8fc 	bl	8004578 <HAL_PWREx_GetVoltageRange>
 8005380:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005382:	4b1b      	ldr	r3, [pc, #108]	; (80053f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005386:	4a1a      	ldr	r2, [pc, #104]	; (80053f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800538c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005394:	d10b      	bne.n	80053ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b80      	cmp	r3, #128	; 0x80
 800539a:	d913      	bls.n	80053c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2ba0      	cmp	r3, #160	; 0xa0
 80053a0:	d902      	bls.n	80053a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053a2:	2302      	movs	r3, #2
 80053a4:	613b      	str	r3, [r7, #16]
 80053a6:	e00d      	b.n	80053c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053a8:	2301      	movs	r3, #1
 80053aa:	613b      	str	r3, [r7, #16]
 80053ac:	e00a      	b.n	80053c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b7f      	cmp	r3, #127	; 0x7f
 80053b2:	d902      	bls.n	80053ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80053b4:	2302      	movs	r3, #2
 80053b6:	613b      	str	r3, [r7, #16]
 80053b8:	e004      	b.n	80053c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b70      	cmp	r3, #112	; 0x70
 80053be:	d101      	bne.n	80053c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053c0:	2301      	movs	r3, #1
 80053c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80053c4:	4b0b      	ldr	r3, [pc, #44]	; (80053f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f023 020f 	bic.w	r2, r3, #15
 80053cc:	4909      	ldr	r1, [pc, #36]	; (80053f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80053d4:	4b07      	ldr	r3, [pc, #28]	; (80053f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 030f 	and.w	r3, r3, #15
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d001      	beq.n	80053e6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e000      	b.n	80053e8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	40021000 	.word	0x40021000
 80053f4:	40022000 	.word	0x40022000

080053f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80053fe:	2300      	movs	r3, #0
 8005400:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8005402:	4b2d      	ldr	r3, [pc, #180]	; (80054b8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f003 0303 	and.w	r3, r3, #3
 800540a:	2b01      	cmp	r3, #1
 800540c:	d118      	bne.n	8005440 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800540e:	4b2a      	ldr	r3, [pc, #168]	; (80054b8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0308 	and.w	r3, r3, #8
 8005416:	2b00      	cmp	r3, #0
 8005418:	d107      	bne.n	800542a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800541a:	4b27      	ldr	r3, [pc, #156]	; (80054b8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800541c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005420:	0a1b      	lsrs	r3, r3, #8
 8005422:	f003 030f 	and.w	r3, r3, #15
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	e005      	b.n	8005436 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800542a:	4b23      	ldr	r3, [pc, #140]	; (80054b8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	091b      	lsrs	r3, r3, #4
 8005430:	f003 030f 	and.w	r3, r3, #15
 8005434:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005436:	4a21      	ldr	r2, [pc, #132]	; (80054bc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800543e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005440:	4b1d      	ldr	r3, [pc, #116]	; (80054b8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f003 0303 	and.w	r3, r3, #3
 8005448:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2b02      	cmp	r3, #2
 800544e:	d002      	beq.n	8005456 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8005450:	2b03      	cmp	r3, #3
 8005452:	d003      	beq.n	800545c <RCC_GetSysClockFreqFromPLLSource+0x64>
 8005454:	e005      	b.n	8005462 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005456:	4b1a      	ldr	r3, [pc, #104]	; (80054c0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005458:	613b      	str	r3, [r7, #16]
    break;
 800545a:	e005      	b.n	8005468 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800545c:	4b18      	ldr	r3, [pc, #96]	; (80054c0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800545e:	613b      	str	r3, [r7, #16]
    break;
 8005460:	e002      	b.n	8005468 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	613b      	str	r3, [r7, #16]
    break;
 8005466:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005468:	4b13      	ldr	r3, [pc, #76]	; (80054b8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	091b      	lsrs	r3, r3, #4
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	3301      	adds	r3, #1
 8005474:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005476:	4b10      	ldr	r3, [pc, #64]	; (80054b8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	0a1b      	lsrs	r3, r3, #8
 800547c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	fb02 f203 	mul.w	r2, r2, r3
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	fbb2 f3f3 	udiv	r3, r2, r3
 800548c:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800548e:	4b0a      	ldr	r3, [pc, #40]	; (80054b8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	0e5b      	lsrs	r3, r3, #25
 8005494:	f003 0303 	and.w	r3, r3, #3
 8005498:	3301      	adds	r3, #1
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a6:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80054a8:	683b      	ldr	r3, [r7, #0]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	371c      	adds	r7, #28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40021000 	.word	0x40021000
 80054bc:	080089ec 	.word	0x080089ec
 80054c0:	00f42400 	.word	0x00f42400

080054c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054cc:	2300      	movs	r3, #0
 80054ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054d0:	2300      	movs	r3, #0
 80054d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d03d      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054e4:	2b40      	cmp	r3, #64	; 0x40
 80054e6:	d00b      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80054e8:	2b40      	cmp	r3, #64	; 0x40
 80054ea:	d804      	bhi.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00e      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	d015      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80054f4:	e01d      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80054f6:	2b60      	cmp	r3, #96	; 0x60
 80054f8:	d01e      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80054fa:	2b80      	cmp	r3, #128	; 0x80
 80054fc:	d01c      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80054fe:	e018      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005500:	4b86      	ldr	r3, [pc, #536]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	4a85      	ldr	r2, [pc, #532]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800550a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800550c:	e015      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	3304      	adds	r3, #4
 8005512:	2100      	movs	r1, #0
 8005514:	4618      	mov	r0, r3
 8005516:	f000 fb5d 	bl	8005bd4 <RCCEx_PLLSAI1_Config>
 800551a:	4603      	mov	r3, r0
 800551c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800551e:	e00c      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3320      	adds	r3, #32
 8005524:	2100      	movs	r1, #0
 8005526:	4618      	mov	r0, r3
 8005528:	f000 fc44 	bl	8005db4 <RCCEx_PLLSAI2_Config>
 800552c:	4603      	mov	r3, r0
 800552e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005530:	e003      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	74fb      	strb	r3, [r7, #19]
      break;
 8005536:	e000      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8005538:	bf00      	nop
    }

    if(ret == HAL_OK)
 800553a:	7cfb      	ldrb	r3, [r7, #19]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10b      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005540:	4b76      	ldr	r3, [pc, #472]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005542:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005546:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800554e:	4973      	ldr	r1, [pc, #460]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005556:	e001      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005558:	7cfb      	ldrb	r3, [r7, #19]
 800555a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d042      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005570:	d00f      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8005572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005576:	d805      	bhi.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8005578:	2b00      	cmp	r3, #0
 800557a:	d011      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800557c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005580:	d017      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8005582:	e01f      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8005584:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005588:	d01f      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800558a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800558e:	d01c      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005590:	e018      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005592:	4b62      	ldr	r3, [pc, #392]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	4a61      	ldr	r2, [pc, #388]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800559c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800559e:	e015      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3304      	adds	r3, #4
 80055a4:	2100      	movs	r1, #0
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 fb14 	bl	8005bd4 <RCCEx_PLLSAI1_Config>
 80055ac:	4603      	mov	r3, r0
 80055ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055b0:	e00c      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	3320      	adds	r3, #32
 80055b6:	2100      	movs	r1, #0
 80055b8:	4618      	mov	r0, r3
 80055ba:	f000 fbfb 	bl	8005db4 <RCCEx_PLLSAI2_Config>
 80055be:	4603      	mov	r3, r0
 80055c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055c2:	e003      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	74fb      	strb	r3, [r7, #19]
      break;
 80055c8:	e000      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80055ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055cc:	7cfb      	ldrb	r3, [r7, #19]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10b      	bne.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80055d2:	4b52      	ldr	r3, [pc, #328]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e0:	494e      	ldr	r1, [pc, #312]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80055e8:	e001      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ea:	7cfb      	ldrb	r3, [r7, #19]
 80055ec:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 809f 	beq.w	800573a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055fc:	2300      	movs	r3, #0
 80055fe:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005600:	4b46      	ldr	r3, [pc, #280]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800560c:	2301      	movs	r3, #1
 800560e:	e000      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005610:	2300      	movs	r3, #0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00d      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005616:	4b41      	ldr	r3, [pc, #260]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561a:	4a40      	ldr	r2, [pc, #256]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800561c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005620:	6593      	str	r3, [r2, #88]	; 0x58
 8005622:	4b3e      	ldr	r3, [pc, #248]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800562a:	60bb      	str	r3, [r7, #8]
 800562c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800562e:	2301      	movs	r3, #1
 8005630:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005632:	4b3b      	ldr	r3, [pc, #236]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a3a      	ldr	r2, [pc, #232]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800563c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800563e:	f7fc ff4b 	bl	80024d8 <HAL_GetTick>
 8005642:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005644:	e009      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005646:	f7fc ff47 	bl	80024d8 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d902      	bls.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	74fb      	strb	r3, [r7, #19]
        break;
 8005658:	e005      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800565a:	4b31      	ldr	r3, [pc, #196]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005662:	2b00      	cmp	r3, #0
 8005664:	d0ef      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8005666:	7cfb      	ldrb	r3, [r7, #19]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d15b      	bne.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800566c:	4b2b      	ldr	r3, [pc, #172]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800566e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005676:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d01f      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	429a      	cmp	r2, r3
 8005688:	d019      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800568a:	4b24      	ldr	r3, [pc, #144]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800568c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005694:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005696:	4b21      	ldr	r3, [pc, #132]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569c:	4a1f      	ldr	r2, [pc, #124]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800569e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056a6:	4b1d      	ldr	r3, [pc, #116]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ac:	4a1b      	ldr	r2, [pc, #108]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056b6:	4a19      	ldr	r2, [pc, #100]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d016      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c8:	f7fc ff06 	bl	80024d8 <HAL_GetTick>
 80056cc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056ce:	e00b      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056d0:	f7fc ff02 	bl	80024d8 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	f241 3288 	movw	r2, #5000	; 0x1388
 80056de:	4293      	cmp	r3, r2
 80056e0:	d902      	bls.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	74fb      	strb	r3, [r7, #19]
            break;
 80056e6:	e006      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056e8:	4b0c      	ldr	r3, [pc, #48]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0ec      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 80056f6:	7cfb      	ldrb	r3, [r7, #19]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10c      	bne.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056fc:	4b07      	ldr	r3, [pc, #28]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005702:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800570c:	4903      	ldr	r1, [pc, #12]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005714:	e008      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005716:	7cfb      	ldrb	r3, [r7, #19]
 8005718:	74bb      	strb	r3, [r7, #18]
 800571a:	e005      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800571c:	40021000 	.word	0x40021000
 8005720:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005724:	7cfb      	ldrb	r3, [r7, #19]
 8005726:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005728:	7c7b      	ldrb	r3, [r7, #17]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d105      	bne.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800572e:	4ba0      	ldr	r3, [pc, #640]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005732:	4a9f      	ldr	r2, [pc, #636]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005738:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00a      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005746:	4b9a      	ldr	r3, [pc, #616]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574c:	f023 0203 	bic.w	r2, r3, #3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005754:	4996      	ldr	r1, [pc, #600]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005756:	4313      	orrs	r3, r2
 8005758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00a      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005768:	4b91      	ldr	r3, [pc, #580]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800576a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576e:	f023 020c 	bic.w	r2, r3, #12
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005776:	498e      	ldr	r1, [pc, #568]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005778:	4313      	orrs	r3, r2
 800577a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0304 	and.w	r3, r3, #4
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00a      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800578a:	4b89      	ldr	r3, [pc, #548]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800578c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005790:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005798:	4985      	ldr	r1, [pc, #532]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800579a:	4313      	orrs	r3, r2
 800579c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0308 	and.w	r3, r3, #8
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00a      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80057ac:	4b80      	ldr	r3, [pc, #512]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ba:	497d      	ldr	r1, [pc, #500]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0310 	and.w	r3, r3, #16
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00a      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80057ce:	4b78      	ldr	r3, [pc, #480]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057dc:	4974      	ldr	r1, [pc, #464]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0320 	and.w	r3, r3, #32
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00a      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057f0:	4b6f      	ldr	r3, [pc, #444]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057fe:	496c      	ldr	r1, [pc, #432]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005800:	4313      	orrs	r3, r2
 8005802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00a      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005812:	4b67      	ldr	r3, [pc, #412]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005818:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005820:	4963      	ldr	r1, [pc, #396]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005822:	4313      	orrs	r3, r2
 8005824:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00a      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005834:	4b5e      	ldr	r3, [pc, #376]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005842:	495b      	ldr	r1, [pc, #364]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005844:	4313      	orrs	r3, r2
 8005846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005856:	4b56      	ldr	r3, [pc, #344]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005864:	4952      	ldr	r1, [pc, #328]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005866:	4313      	orrs	r3, r2
 8005868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00a      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005878:	4b4d      	ldr	r3, [pc, #308]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800587a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005886:	494a      	ldr	r1, [pc, #296]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005888:	4313      	orrs	r3, r2
 800588a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800589a:	4b45      	ldr	r3, [pc, #276]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800589c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a8:	4941      	ldr	r1, [pc, #260]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00a      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058bc:	4b3c      	ldr	r3, [pc, #240]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058c2:	f023 0203 	bic.w	r2, r3, #3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ca:	4939      	ldr	r1, [pc, #228]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d028      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058de:	4b34      	ldr	r3, [pc, #208]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ec:	4930      	ldr	r1, [pc, #192]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058fc:	d106      	bne.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058fe:	4b2c      	ldr	r3, [pc, #176]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	4a2b      	ldr	r2, [pc, #172]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005904:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005908:	60d3      	str	r3, [r2, #12]
 800590a:	e011      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005910:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005914:	d10c      	bne.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	3304      	adds	r3, #4
 800591a:	2101      	movs	r1, #1
 800591c:	4618      	mov	r0, r3
 800591e:	f000 f959 	bl	8005bd4 <RCCEx_PLLSAI1_Config>
 8005922:	4603      	mov	r3, r0
 8005924:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005926:	7cfb      	ldrb	r3, [r7, #19]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 800592c:	7cfb      	ldrb	r3, [r7, #19]
 800592e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d04d      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005940:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005944:	d108      	bne.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005946:	4b1a      	ldr	r3, [pc, #104]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005948:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800594c:	4a18      	ldr	r2, [pc, #96]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800594e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005952:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005956:	e012      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005958:	4b15      	ldr	r3, [pc, #84]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800595a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800595e:	4a14      	ldr	r2, [pc, #80]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005960:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005964:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005968:	4b11      	ldr	r3, [pc, #68]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800596a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800596e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005976:	490e      	ldr	r1, [pc, #56]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005978:	4313      	orrs	r3, r2
 800597a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005982:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005986:	d106      	bne.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005988:	4b09      	ldr	r3, [pc, #36]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	4a08      	ldr	r2, [pc, #32]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800598e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005992:	60d3      	str	r3, [r2, #12]
 8005994:	e020      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800599a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800599e:	d109      	bne.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80059a0:	4b03      	ldr	r3, [pc, #12]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	4a02      	ldr	r2, [pc, #8]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059aa:	60d3      	str	r3, [r2, #12]
 80059ac:	e014      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80059ae:	bf00      	nop
 80059b0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059bc:	d10c      	bne.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	3304      	adds	r3, #4
 80059c2:	2101      	movs	r1, #1
 80059c4:	4618      	mov	r0, r3
 80059c6:	f000 f905 	bl	8005bd4 <RCCEx_PLLSAI1_Config>
 80059ca:	4603      	mov	r3, r0
 80059cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059ce:	7cfb      	ldrb	r3, [r7, #19]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80059d4:	7cfb      	ldrb	r3, [r7, #19]
 80059d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d028      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059e4:	4b7a      	ldr	r3, [pc, #488]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80059e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059f2:	4977      	ldr	r1, [pc, #476]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a02:	d106      	bne.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a04:	4b72      	ldr	r3, [pc, #456]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	4a71      	ldr	r2, [pc, #452]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005a0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a0e:	60d3      	str	r3, [r2, #12]
 8005a10:	e011      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a1a:	d10c      	bne.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	3304      	adds	r3, #4
 8005a20:	2101      	movs	r1, #1
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 f8d6 	bl	8005bd4 <RCCEx_PLLSAI1_Config>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a2c:	7cfb      	ldrb	r3, [r7, #19]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8005a32:	7cfb      	ldrb	r3, [r7, #19]
 8005a34:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d01e      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a42:	4b63      	ldr	r3, [pc, #396]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a48:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a52:	495f      	ldr	r1, [pc, #380]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a64:	d10c      	bne.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	3304      	adds	r3, #4
 8005a6a:	2102      	movs	r1, #2
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f000 f8b1 	bl	8005bd4 <RCCEx_PLLSAI1_Config>
 8005a72:	4603      	mov	r3, r0
 8005a74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a76:	7cfb      	ldrb	r3, [r7, #19]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d001      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8005a7c:	7cfb      	ldrb	r3, [r7, #19]
 8005a7e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00b      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a8c:	4b50      	ldr	r3, [pc, #320]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005a8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a92:	f023 0204 	bic.w	r2, r3, #4
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a9c:	494c      	ldr	r1, [pc, #304]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00b      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005ab0:	4b47      	ldr	r3, [pc, #284]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005ab2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ab6:	f023 0218 	bic.w	r2, r3, #24
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac0:	4943      	ldr	r1, [pc, #268]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d035      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005ad4:	4b3e      	ldr	r3, [pc, #248]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a3d      	ldr	r2, [pc, #244]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ade:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ae0:	f7fc fcfa 	bl	80024d8 <HAL_GetTick>
 8005ae4:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ae6:	e009      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ae8:	f7fc fcf6 	bl	80024d8 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d902      	bls.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x638>
      {
        ret = HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	74fb      	strb	r3, [r7, #19]
        break;
 8005afa:	e005      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x644>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005afc:	4b34      	ldr	r3, [pc, #208]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1ef      	bne.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x624>
      }
    }

    if(ret == HAL_OK)
 8005b08:	7cfb      	ldrb	r3, [r7, #19]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d113      	bne.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x672>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8005b0e:	4b30      	ldr	r3, [pc, #192]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005b10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b1e:	492c      	ldr	r1, [pc, #176]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	3320      	adds	r3, #32
 8005b2a:	2102      	movs	r1, #2
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f000 f941 	bl	8005db4 <RCCEx_PLLSAI2_Config>
 8005b32:	4603      	mov	r3, r0
 8005b34:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005b36:	7cfb      	ldrb	r3, [r7, #19]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* set overall return value */
      status = ret;
 8005b3c:	7cfb      	ldrb	r3, [r7, #19]
 8005b3e:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d01e      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005b4c:	4b20      	ldr	r3, [pc, #128]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005b4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b5c:	491c      	ldr	r1, [pc, #112]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b6e:	d10c      	bne.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3320      	adds	r3, #32
 8005b74:	2101      	movs	r1, #1
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 f91c 	bl	8005db4 <RCCEx_PLLSAI2_Config>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b80:	7cfb      	ldrb	r3, [r7, #19]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      {
        /* set overall return value */
        status = ret;
 8005b86:	7cfb      	ldrb	r3, [r7, #19]
 8005b88:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d017      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005b96:	4b0e      	ldr	r3, [pc, #56]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005b98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ba6:	490a      	ldr	r1, [pc, #40]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bb8:	d105      	bne.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x702>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bba:	4b05      	ldr	r3, [pc, #20]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	4a04      	ldr	r2, [pc, #16]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005bc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bc4:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005bc6:	7cbb      	ldrb	r3, [r7, #18]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3718      	adds	r7, #24
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	40021000 	.word	0x40021000

08005bd4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005be2:	4b70      	ldr	r3, [pc, #448]	; (8005da4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f003 0303 	and.w	r3, r3, #3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00e      	beq.n	8005c0c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005bee:	4b6d      	ldr	r3, [pc, #436]	; (8005da4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	f003 0203 	and.w	r2, r3, #3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d103      	bne.n	8005c06 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
       ||
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d13f      	bne.n	8005c86 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	73fb      	strb	r3, [r7, #15]
 8005c0a:	e03c      	b.n	8005c86 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d00c      	beq.n	8005c2e <RCCEx_PLLSAI1_Config+0x5a>
 8005c14:	2b03      	cmp	r3, #3
 8005c16:	d013      	beq.n	8005c40 <RCCEx_PLLSAI1_Config+0x6c>
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d120      	bne.n	8005c5e <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c1c:	4b61      	ldr	r3, [pc, #388]	; (8005da4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d11d      	bne.n	8005c64 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c2c:	e01a      	b.n	8005c64 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c2e:	4b5d      	ldr	r3, [pc, #372]	; (8005da4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d116      	bne.n	8005c68 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c3e:	e013      	b.n	8005c68 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c40:	4b58      	ldr	r3, [pc, #352]	; (8005da4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10f      	bne.n	8005c6c <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c4c:	4b55      	ldr	r3, [pc, #340]	; (8005da4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d109      	bne.n	8005c6c <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c5c:	e006      	b.n	8005c6c <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	73fb      	strb	r3, [r7, #15]
      break;
 8005c62:	e004      	b.n	8005c6e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005c64:	bf00      	nop
 8005c66:	e002      	b.n	8005c6e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005c68:	bf00      	nop
 8005c6a:	e000      	b.n	8005c6e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005c6c:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c6e:	7bfb      	ldrb	r3, [r7, #15]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d108      	bne.n	8005c86 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005c74:	4b4b      	ldr	r3, [pc, #300]	; (8005da4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	f023 0203 	bic.w	r2, r3, #3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4948      	ldr	r1, [pc, #288]	; (8005da4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f040 8086 	bne.w	8005d9a <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005c8e:	4b45      	ldr	r3, [pc, #276]	; (8005da4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a44      	ldr	r2, [pc, #272]	; (8005da4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005c94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c9a:	f7fc fc1d 	bl	80024d8 <HAL_GetTick>
 8005c9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ca0:	e009      	b.n	8005cb6 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ca2:	f7fc fc19 	bl	80024d8 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d902      	bls.n	8005cb6 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	73fb      	strb	r3, [r7, #15]
        break;
 8005cb4:	e005      	b.n	8005cc2 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005cb6:	4b3b      	ldr	r3, [pc, #236]	; (8005da4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1ef      	bne.n	8005ca2 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8005cc2:	7bfb      	ldrb	r3, [r7, #15]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d168      	bne.n	8005d9a <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d113      	bne.n	8005cf6 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cce:	4b35      	ldr	r3, [pc, #212]	; (8005da4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005cd0:	691a      	ldr	r2, [r3, #16]
 8005cd2:	4b35      	ldr	r3, [pc, #212]	; (8005da8 <RCCEx_PLLSAI1_Config+0x1d4>)
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	6892      	ldr	r2, [r2, #8]
 8005cda:	0211      	lsls	r1, r2, #8
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	68d2      	ldr	r2, [r2, #12]
 8005ce0:	06d2      	lsls	r2, r2, #27
 8005ce2:	4311      	orrs	r1, r2
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6852      	ldr	r2, [r2, #4]
 8005ce8:	3a01      	subs	r2, #1
 8005cea:	0112      	lsls	r2, r2, #4
 8005cec:	430a      	orrs	r2, r1
 8005cee:	492d      	ldr	r1, [pc, #180]	; (8005da4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	610b      	str	r3, [r1, #16]
 8005cf4:	e02d      	b.n	8005d52 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d115      	bne.n	8005d28 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cfc:	4b29      	ldr	r3, [pc, #164]	; (8005da4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005cfe:	691a      	ldr	r2, [r3, #16]
 8005d00:	4b2a      	ldr	r3, [pc, #168]	; (8005dac <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d02:	4013      	ands	r3, r2
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	6892      	ldr	r2, [r2, #8]
 8005d08:	0211      	lsls	r1, r2, #8
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	6912      	ldr	r2, [r2, #16]
 8005d0e:	0852      	lsrs	r2, r2, #1
 8005d10:	3a01      	subs	r2, #1
 8005d12:	0552      	lsls	r2, r2, #21
 8005d14:	4311      	orrs	r1, r2
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	6852      	ldr	r2, [r2, #4]
 8005d1a:	3a01      	subs	r2, #1
 8005d1c:	0112      	lsls	r2, r2, #4
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	4920      	ldr	r1, [pc, #128]	; (8005da4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	610b      	str	r3, [r1, #16]
 8005d26:	e014      	b.n	8005d52 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d28:	4b1e      	ldr	r3, [pc, #120]	; (8005da4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005d2a:	691a      	ldr	r2, [r3, #16]
 8005d2c:	4b20      	ldr	r3, [pc, #128]	; (8005db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005d2e:	4013      	ands	r3, r2
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6892      	ldr	r2, [r2, #8]
 8005d34:	0211      	lsls	r1, r2, #8
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	6952      	ldr	r2, [r2, #20]
 8005d3a:	0852      	lsrs	r2, r2, #1
 8005d3c:	3a01      	subs	r2, #1
 8005d3e:	0652      	lsls	r2, r2, #25
 8005d40:	4311      	orrs	r1, r2
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	6852      	ldr	r2, [r2, #4]
 8005d46:	3a01      	subs	r2, #1
 8005d48:	0112      	lsls	r2, r2, #4
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	4915      	ldr	r1, [pc, #84]	; (8005da4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005d52:	4b14      	ldr	r3, [pc, #80]	; (8005da4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a13      	ldr	r2, [pc, #76]	; (8005da4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005d58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d5c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d5e:	f7fc fbbb 	bl	80024d8 <HAL_GetTick>
 8005d62:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d64:	e009      	b.n	8005d7a <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d66:	f7fc fbb7 	bl	80024d8 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d902      	bls.n	8005d7a <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	73fb      	strb	r3, [r7, #15]
          break;
 8005d78:	e005      	b.n	8005d86 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d7a:	4b0a      	ldr	r3, [pc, #40]	; (8005da4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d0ef      	beq.n	8005d66 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d106      	bne.n	8005d9a <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005d8c:	4b05      	ldr	r3, [pc, #20]	; (8005da4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005d8e:	691a      	ldr	r2, [r3, #16]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	4903      	ldr	r1, [pc, #12]	; (8005da4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	40021000 	.word	0x40021000
 8005da8:	07ff800f 	.word	0x07ff800f
 8005dac:	ff9f800f 	.word	0xff9f800f
 8005db0:	f9ff800f 	.word	0xf9ff800f

08005db4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005dc2:	4b70      	ldr	r3, [pc, #448]	; (8005f84 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f003 0303 	and.w	r3, r3, #3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00e      	beq.n	8005dec <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005dce:	4b6d      	ldr	r3, [pc, #436]	; (8005f84 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f003 0203 	and.w	r2, r3, #3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d103      	bne.n	8005de6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
       ||
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d13f      	bne.n	8005e66 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	73fb      	strb	r3, [r7, #15]
 8005dea:	e03c      	b.n	8005e66 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d00c      	beq.n	8005e0e <RCCEx_PLLSAI2_Config+0x5a>
 8005df4:	2b03      	cmp	r3, #3
 8005df6:	d013      	beq.n	8005e20 <RCCEx_PLLSAI2_Config+0x6c>
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d120      	bne.n	8005e3e <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005dfc:	4b61      	ldr	r3, [pc, #388]	; (8005f84 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d11d      	bne.n	8005e44 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e0c:	e01a      	b.n	8005e44 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005e0e:	4b5d      	ldr	r3, [pc, #372]	; (8005f84 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d116      	bne.n	8005e48 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e1e:	e013      	b.n	8005e48 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005e20:	4b58      	ldr	r3, [pc, #352]	; (8005f84 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10f      	bne.n	8005e4c <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e2c:	4b55      	ldr	r3, [pc, #340]	; (8005f84 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d109      	bne.n	8005e4c <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e3c:	e006      	b.n	8005e4c <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	73fb      	strb	r3, [r7, #15]
      break;
 8005e42:	e004      	b.n	8005e4e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005e44:	bf00      	nop
 8005e46:	e002      	b.n	8005e4e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005e48:	bf00      	nop
 8005e4a:	e000      	b.n	8005e4e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005e4c:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d108      	bne.n	8005e66 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005e54:	4b4b      	ldr	r3, [pc, #300]	; (8005f84 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f023 0203 	bic.w	r2, r3, #3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4948      	ldr	r1, [pc, #288]	; (8005f84 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005e66:	7bfb      	ldrb	r3, [r7, #15]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f040 8086 	bne.w	8005f7a <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005e6e:	4b45      	ldr	r3, [pc, #276]	; (8005f84 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a44      	ldr	r2, [pc, #272]	; (8005f84 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e7a:	f7fc fb2d 	bl	80024d8 <HAL_GetTick>
 8005e7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e80:	e009      	b.n	8005e96 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e82:	f7fc fb29 	bl	80024d8 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d902      	bls.n	8005e96 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	73fb      	strb	r3, [r7, #15]
        break;
 8005e94:	e005      	b.n	8005ea2 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e96:	4b3b      	ldr	r3, [pc, #236]	; (8005f84 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1ef      	bne.n	8005e82 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d168      	bne.n	8005f7a <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d113      	bne.n	8005ed6 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005eae:	4b35      	ldr	r3, [pc, #212]	; (8005f84 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005eb0:	695a      	ldr	r2, [r3, #20]
 8005eb2:	4b35      	ldr	r3, [pc, #212]	; (8005f88 <RCCEx_PLLSAI2_Config+0x1d4>)
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	6892      	ldr	r2, [r2, #8]
 8005eba:	0211      	lsls	r1, r2, #8
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	68d2      	ldr	r2, [r2, #12]
 8005ec0:	06d2      	lsls	r2, r2, #27
 8005ec2:	4311      	orrs	r1, r2
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6852      	ldr	r2, [r2, #4]
 8005ec8:	3a01      	subs	r2, #1
 8005eca:	0112      	lsls	r2, r2, #4
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	492d      	ldr	r1, [pc, #180]	; (8005f84 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	614b      	str	r3, [r1, #20]
 8005ed4:	e02d      	b.n	8005f32 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d115      	bne.n	8005f08 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005edc:	4b29      	ldr	r3, [pc, #164]	; (8005f84 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005ede:	695a      	ldr	r2, [r3, #20]
 8005ee0:	4b2a      	ldr	r3, [pc, #168]	; (8005f8c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	6892      	ldr	r2, [r2, #8]
 8005ee8:	0211      	lsls	r1, r2, #8
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	6912      	ldr	r2, [r2, #16]
 8005eee:	0852      	lsrs	r2, r2, #1
 8005ef0:	3a01      	subs	r2, #1
 8005ef2:	0552      	lsls	r2, r2, #21
 8005ef4:	4311      	orrs	r1, r2
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	6852      	ldr	r2, [r2, #4]
 8005efa:	3a01      	subs	r2, #1
 8005efc:	0112      	lsls	r2, r2, #4
 8005efe:	430a      	orrs	r2, r1
 8005f00:	4920      	ldr	r1, [pc, #128]	; (8005f84 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	614b      	str	r3, [r1, #20]
 8005f06:	e014      	b.n	8005f32 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f08:	4b1e      	ldr	r3, [pc, #120]	; (8005f84 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005f0a:	695a      	ldr	r2, [r3, #20]
 8005f0c:	4b20      	ldr	r3, [pc, #128]	; (8005f90 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005f0e:	4013      	ands	r3, r2
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	6892      	ldr	r2, [r2, #8]
 8005f14:	0211      	lsls	r1, r2, #8
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	6952      	ldr	r2, [r2, #20]
 8005f1a:	0852      	lsrs	r2, r2, #1
 8005f1c:	3a01      	subs	r2, #1
 8005f1e:	0652      	lsls	r2, r2, #25
 8005f20:	4311      	orrs	r1, r2
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	6852      	ldr	r2, [r2, #4]
 8005f26:	3a01      	subs	r2, #1
 8005f28:	0112      	lsls	r2, r2, #4
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	4915      	ldr	r1, [pc, #84]	; (8005f84 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005f32:	4b14      	ldr	r3, [pc, #80]	; (8005f84 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a13      	ldr	r2, [pc, #76]	; (8005f84 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f3c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f3e:	f7fc facb 	bl	80024d8 <HAL_GetTick>
 8005f42:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005f44:	e009      	b.n	8005f5a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005f46:	f7fc fac7 	bl	80024d8 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d902      	bls.n	8005f5a <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	73fb      	strb	r3, [r7, #15]
          break;
 8005f58:	e005      	b.n	8005f66 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005f5a:	4b0a      	ldr	r3, [pc, #40]	; (8005f84 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d0ef      	beq.n	8005f46 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005f66:	7bfb      	ldrb	r3, [r7, #15]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d106      	bne.n	8005f7a <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005f6c:	4b05      	ldr	r3, [pc, #20]	; (8005f84 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005f6e:	695a      	ldr	r2, [r3, #20]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	4903      	ldr	r1, [pc, #12]	; (8005f84 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	40021000 	.word	0x40021000
 8005f88:	07ff800f 	.word	0x07ff800f
 8005f8c:	ff9f800f 	.word	0xff9f800f
 8005f90:	f9ff800f 	.word	0xf9ff800f

08005f94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e042      	b.n	800602c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d106      	bne.n	8005fbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7fc f8e1 	bl	8002180 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2224      	movs	r2, #36	; 0x24
 8005fc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 0201 	bic.w	r2, r2, #1
 8005fd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f82c 	bl	8006034 <UART_SetConfig>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d101      	bne.n	8005fe6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e022      	b.n	800602c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d002      	beq.n	8005ff4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 faf2 	bl	80065d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006002:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006012:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f042 0201 	orr.w	r2, r2, #1
 8006022:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 fb79 	bl	800671c <UART_CheckIdleState>
 800602a:	4603      	mov	r3, r0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006034:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006038:	b088      	sub	sp, #32
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	689a      	ldr	r2, [r3, #8]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	431a      	orrs	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	431a      	orrs	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	4313      	orrs	r3, r2
 8006058:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800605e:	69fa      	ldr	r2, [r7, #28]
 8006060:	4313      	orrs	r3, r2
 8006062:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	4bb1      	ldr	r3, [pc, #708]	; (8006330 <UART_SetConfig+0x2fc>)
 800606c:	4013      	ands	r3, r2
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	6812      	ldr	r2, [r2, #0]
 8006072:	69f9      	ldr	r1, [r7, #28]
 8006074:	430b      	orrs	r3, r1
 8006076:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68da      	ldr	r2, [r3, #12]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4aa6      	ldr	r2, [pc, #664]	; (8006334 <UART_SetConfig+0x300>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d004      	beq.n	80060a8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	69fa      	ldr	r2, [r7, #28]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80060b2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	6812      	ldr	r2, [r2, #0]
 80060ba:	69f9      	ldr	r1, [r7, #28]
 80060bc:	430b      	orrs	r3, r1
 80060be:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c6:	f023 010f 	bic.w	r1, r3, #15
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a97      	ldr	r2, [pc, #604]	; (8006338 <UART_SetConfig+0x304>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d121      	bne.n	8006124 <UART_SetConfig+0xf0>
 80060e0:	4b96      	ldr	r3, [pc, #600]	; (800633c <UART_SetConfig+0x308>)
 80060e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e6:	f003 0303 	and.w	r3, r3, #3
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d816      	bhi.n	800611c <UART_SetConfig+0xe8>
 80060ee:	a201      	add	r2, pc, #4	; (adr r2, 80060f4 <UART_SetConfig+0xc0>)
 80060f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f4:	08006105 	.word	0x08006105
 80060f8:	08006111 	.word	0x08006111
 80060fc:	0800610b 	.word	0x0800610b
 8006100:	08006117 	.word	0x08006117
 8006104:	2301      	movs	r3, #1
 8006106:	76fb      	strb	r3, [r7, #27]
 8006108:	e0e8      	b.n	80062dc <UART_SetConfig+0x2a8>
 800610a:	2302      	movs	r3, #2
 800610c:	76fb      	strb	r3, [r7, #27]
 800610e:	e0e5      	b.n	80062dc <UART_SetConfig+0x2a8>
 8006110:	2304      	movs	r3, #4
 8006112:	76fb      	strb	r3, [r7, #27]
 8006114:	e0e2      	b.n	80062dc <UART_SetConfig+0x2a8>
 8006116:	2308      	movs	r3, #8
 8006118:	76fb      	strb	r3, [r7, #27]
 800611a:	e0df      	b.n	80062dc <UART_SetConfig+0x2a8>
 800611c:	2310      	movs	r3, #16
 800611e:	76fb      	strb	r3, [r7, #27]
 8006120:	bf00      	nop
 8006122:	e0db      	b.n	80062dc <UART_SetConfig+0x2a8>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a85      	ldr	r2, [pc, #532]	; (8006340 <UART_SetConfig+0x30c>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d134      	bne.n	8006198 <UART_SetConfig+0x164>
 800612e:	4b83      	ldr	r3, [pc, #524]	; (800633c <UART_SetConfig+0x308>)
 8006130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006134:	f003 030c 	and.w	r3, r3, #12
 8006138:	2b0c      	cmp	r3, #12
 800613a:	d829      	bhi.n	8006190 <UART_SetConfig+0x15c>
 800613c:	a201      	add	r2, pc, #4	; (adr r2, 8006144 <UART_SetConfig+0x110>)
 800613e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006142:	bf00      	nop
 8006144:	08006179 	.word	0x08006179
 8006148:	08006191 	.word	0x08006191
 800614c:	08006191 	.word	0x08006191
 8006150:	08006191 	.word	0x08006191
 8006154:	08006185 	.word	0x08006185
 8006158:	08006191 	.word	0x08006191
 800615c:	08006191 	.word	0x08006191
 8006160:	08006191 	.word	0x08006191
 8006164:	0800617f 	.word	0x0800617f
 8006168:	08006191 	.word	0x08006191
 800616c:	08006191 	.word	0x08006191
 8006170:	08006191 	.word	0x08006191
 8006174:	0800618b 	.word	0x0800618b
 8006178:	2300      	movs	r3, #0
 800617a:	76fb      	strb	r3, [r7, #27]
 800617c:	e0ae      	b.n	80062dc <UART_SetConfig+0x2a8>
 800617e:	2302      	movs	r3, #2
 8006180:	76fb      	strb	r3, [r7, #27]
 8006182:	e0ab      	b.n	80062dc <UART_SetConfig+0x2a8>
 8006184:	2304      	movs	r3, #4
 8006186:	76fb      	strb	r3, [r7, #27]
 8006188:	e0a8      	b.n	80062dc <UART_SetConfig+0x2a8>
 800618a:	2308      	movs	r3, #8
 800618c:	76fb      	strb	r3, [r7, #27]
 800618e:	e0a5      	b.n	80062dc <UART_SetConfig+0x2a8>
 8006190:	2310      	movs	r3, #16
 8006192:	76fb      	strb	r3, [r7, #27]
 8006194:	bf00      	nop
 8006196:	e0a1      	b.n	80062dc <UART_SetConfig+0x2a8>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a69      	ldr	r2, [pc, #420]	; (8006344 <UART_SetConfig+0x310>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d120      	bne.n	80061e4 <UART_SetConfig+0x1b0>
 80061a2:	4b66      	ldr	r3, [pc, #408]	; (800633c <UART_SetConfig+0x308>)
 80061a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80061ac:	2b10      	cmp	r3, #16
 80061ae:	d00f      	beq.n	80061d0 <UART_SetConfig+0x19c>
 80061b0:	2b10      	cmp	r3, #16
 80061b2:	d802      	bhi.n	80061ba <UART_SetConfig+0x186>
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d005      	beq.n	80061c4 <UART_SetConfig+0x190>
 80061b8:	e010      	b.n	80061dc <UART_SetConfig+0x1a8>
 80061ba:	2b20      	cmp	r3, #32
 80061bc:	d005      	beq.n	80061ca <UART_SetConfig+0x196>
 80061be:	2b30      	cmp	r3, #48	; 0x30
 80061c0:	d009      	beq.n	80061d6 <UART_SetConfig+0x1a2>
 80061c2:	e00b      	b.n	80061dc <UART_SetConfig+0x1a8>
 80061c4:	2300      	movs	r3, #0
 80061c6:	76fb      	strb	r3, [r7, #27]
 80061c8:	e088      	b.n	80062dc <UART_SetConfig+0x2a8>
 80061ca:	2302      	movs	r3, #2
 80061cc:	76fb      	strb	r3, [r7, #27]
 80061ce:	e085      	b.n	80062dc <UART_SetConfig+0x2a8>
 80061d0:	2304      	movs	r3, #4
 80061d2:	76fb      	strb	r3, [r7, #27]
 80061d4:	e082      	b.n	80062dc <UART_SetConfig+0x2a8>
 80061d6:	2308      	movs	r3, #8
 80061d8:	76fb      	strb	r3, [r7, #27]
 80061da:	e07f      	b.n	80062dc <UART_SetConfig+0x2a8>
 80061dc:	2310      	movs	r3, #16
 80061de:	76fb      	strb	r3, [r7, #27]
 80061e0:	bf00      	nop
 80061e2:	e07b      	b.n	80062dc <UART_SetConfig+0x2a8>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a57      	ldr	r2, [pc, #348]	; (8006348 <UART_SetConfig+0x314>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d120      	bne.n	8006230 <UART_SetConfig+0x1fc>
 80061ee:	4b53      	ldr	r3, [pc, #332]	; (800633c <UART_SetConfig+0x308>)
 80061f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80061f8:	2b40      	cmp	r3, #64	; 0x40
 80061fa:	d00f      	beq.n	800621c <UART_SetConfig+0x1e8>
 80061fc:	2b40      	cmp	r3, #64	; 0x40
 80061fe:	d802      	bhi.n	8006206 <UART_SetConfig+0x1d2>
 8006200:	2b00      	cmp	r3, #0
 8006202:	d005      	beq.n	8006210 <UART_SetConfig+0x1dc>
 8006204:	e010      	b.n	8006228 <UART_SetConfig+0x1f4>
 8006206:	2b80      	cmp	r3, #128	; 0x80
 8006208:	d005      	beq.n	8006216 <UART_SetConfig+0x1e2>
 800620a:	2bc0      	cmp	r3, #192	; 0xc0
 800620c:	d009      	beq.n	8006222 <UART_SetConfig+0x1ee>
 800620e:	e00b      	b.n	8006228 <UART_SetConfig+0x1f4>
 8006210:	2300      	movs	r3, #0
 8006212:	76fb      	strb	r3, [r7, #27]
 8006214:	e062      	b.n	80062dc <UART_SetConfig+0x2a8>
 8006216:	2302      	movs	r3, #2
 8006218:	76fb      	strb	r3, [r7, #27]
 800621a:	e05f      	b.n	80062dc <UART_SetConfig+0x2a8>
 800621c:	2304      	movs	r3, #4
 800621e:	76fb      	strb	r3, [r7, #27]
 8006220:	e05c      	b.n	80062dc <UART_SetConfig+0x2a8>
 8006222:	2308      	movs	r3, #8
 8006224:	76fb      	strb	r3, [r7, #27]
 8006226:	e059      	b.n	80062dc <UART_SetConfig+0x2a8>
 8006228:	2310      	movs	r3, #16
 800622a:	76fb      	strb	r3, [r7, #27]
 800622c:	bf00      	nop
 800622e:	e055      	b.n	80062dc <UART_SetConfig+0x2a8>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a45      	ldr	r2, [pc, #276]	; (800634c <UART_SetConfig+0x318>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d124      	bne.n	8006284 <UART_SetConfig+0x250>
 800623a:	4b40      	ldr	r3, [pc, #256]	; (800633c <UART_SetConfig+0x308>)
 800623c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006248:	d012      	beq.n	8006270 <UART_SetConfig+0x23c>
 800624a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800624e:	d802      	bhi.n	8006256 <UART_SetConfig+0x222>
 8006250:	2b00      	cmp	r3, #0
 8006252:	d007      	beq.n	8006264 <UART_SetConfig+0x230>
 8006254:	e012      	b.n	800627c <UART_SetConfig+0x248>
 8006256:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800625a:	d006      	beq.n	800626a <UART_SetConfig+0x236>
 800625c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006260:	d009      	beq.n	8006276 <UART_SetConfig+0x242>
 8006262:	e00b      	b.n	800627c <UART_SetConfig+0x248>
 8006264:	2300      	movs	r3, #0
 8006266:	76fb      	strb	r3, [r7, #27]
 8006268:	e038      	b.n	80062dc <UART_SetConfig+0x2a8>
 800626a:	2302      	movs	r3, #2
 800626c:	76fb      	strb	r3, [r7, #27]
 800626e:	e035      	b.n	80062dc <UART_SetConfig+0x2a8>
 8006270:	2304      	movs	r3, #4
 8006272:	76fb      	strb	r3, [r7, #27]
 8006274:	e032      	b.n	80062dc <UART_SetConfig+0x2a8>
 8006276:	2308      	movs	r3, #8
 8006278:	76fb      	strb	r3, [r7, #27]
 800627a:	e02f      	b.n	80062dc <UART_SetConfig+0x2a8>
 800627c:	2310      	movs	r3, #16
 800627e:	76fb      	strb	r3, [r7, #27]
 8006280:	bf00      	nop
 8006282:	e02b      	b.n	80062dc <UART_SetConfig+0x2a8>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a2a      	ldr	r2, [pc, #168]	; (8006334 <UART_SetConfig+0x300>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d124      	bne.n	80062d8 <UART_SetConfig+0x2a4>
 800628e:	4b2b      	ldr	r3, [pc, #172]	; (800633c <UART_SetConfig+0x308>)
 8006290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006294:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800629c:	d012      	beq.n	80062c4 <UART_SetConfig+0x290>
 800629e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a2:	d802      	bhi.n	80062aa <UART_SetConfig+0x276>
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d007      	beq.n	80062b8 <UART_SetConfig+0x284>
 80062a8:	e012      	b.n	80062d0 <UART_SetConfig+0x29c>
 80062aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062ae:	d006      	beq.n	80062be <UART_SetConfig+0x28a>
 80062b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062b4:	d009      	beq.n	80062ca <UART_SetConfig+0x296>
 80062b6:	e00b      	b.n	80062d0 <UART_SetConfig+0x29c>
 80062b8:	2300      	movs	r3, #0
 80062ba:	76fb      	strb	r3, [r7, #27]
 80062bc:	e00e      	b.n	80062dc <UART_SetConfig+0x2a8>
 80062be:	2302      	movs	r3, #2
 80062c0:	76fb      	strb	r3, [r7, #27]
 80062c2:	e00b      	b.n	80062dc <UART_SetConfig+0x2a8>
 80062c4:	2304      	movs	r3, #4
 80062c6:	76fb      	strb	r3, [r7, #27]
 80062c8:	e008      	b.n	80062dc <UART_SetConfig+0x2a8>
 80062ca:	2308      	movs	r3, #8
 80062cc:	76fb      	strb	r3, [r7, #27]
 80062ce:	e005      	b.n	80062dc <UART_SetConfig+0x2a8>
 80062d0:	2310      	movs	r3, #16
 80062d2:	76fb      	strb	r3, [r7, #27]
 80062d4:	bf00      	nop
 80062d6:	e001      	b.n	80062dc <UART_SetConfig+0x2a8>
 80062d8:	2310      	movs	r3, #16
 80062da:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a14      	ldr	r2, [pc, #80]	; (8006334 <UART_SetConfig+0x300>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	f040 80a1 	bne.w	800642a <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062e8:	7efb      	ldrb	r3, [r7, #27]
 80062ea:	2b08      	cmp	r3, #8
 80062ec:	d836      	bhi.n	800635c <UART_SetConfig+0x328>
 80062ee:	a201      	add	r2, pc, #4	; (adr r2, 80062f4 <UART_SetConfig+0x2c0>)
 80062f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f4:	08006319 	.word	0x08006319
 80062f8:	0800635d 	.word	0x0800635d
 80062fc:	08006321 	.word	0x08006321
 8006300:	0800635d 	.word	0x0800635d
 8006304:	08006327 	.word	0x08006327
 8006308:	0800635d 	.word	0x0800635d
 800630c:	0800635d 	.word	0x0800635d
 8006310:	0800635d 	.word	0x0800635d
 8006314:	08006355 	.word	0x08006355
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006318:	f7fe ffe8 	bl	80052ec <HAL_RCC_GetPCLK1Freq>
 800631c:	6178      	str	r0, [r7, #20]
        break;
 800631e:	e022      	b.n	8006366 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006320:	4b0b      	ldr	r3, [pc, #44]	; (8006350 <UART_SetConfig+0x31c>)
 8006322:	617b      	str	r3, [r7, #20]
        break;
 8006324:	e01f      	b.n	8006366 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006326:	f7fe ff4d 	bl	80051c4 <HAL_RCC_GetSysClockFreq>
 800632a:	6178      	str	r0, [r7, #20]
        break;
 800632c:	e01b      	b.n	8006366 <UART_SetConfig+0x332>
 800632e:	bf00      	nop
 8006330:	cfff69f3 	.word	0xcfff69f3
 8006334:	40008000 	.word	0x40008000
 8006338:	40013800 	.word	0x40013800
 800633c:	40021000 	.word	0x40021000
 8006340:	40004400 	.word	0x40004400
 8006344:	40004800 	.word	0x40004800
 8006348:	40004c00 	.word	0x40004c00
 800634c:	40005000 	.word	0x40005000
 8006350:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006354:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006358:	617b      	str	r3, [r7, #20]
        break;
 800635a:	e004      	b.n	8006366 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	76bb      	strb	r3, [r7, #26]
        break;
 8006364:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 811d 	beq.w	80065a8 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	4a97      	ldr	r2, [pc, #604]	; (80065d0 <UART_SetConfig+0x59c>)
 8006374:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006378:	461a      	mov	r2, r3
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006380:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	4613      	mov	r3, r2
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	4413      	add	r3, r2
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	429a      	cmp	r2, r3
 8006390:	d305      	bcc.n	800639e <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	429a      	cmp	r2, r3
 800639c:	d902      	bls.n	80063a4 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	76bb      	strb	r3, [r7, #26]
 80063a2:	e101      	b.n	80065a8 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	4618      	mov	r0, r3
 80063a8:	f04f 0100 	mov.w	r1, #0
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	4a87      	ldr	r2, [pc, #540]	; (80065d0 <UART_SetConfig+0x59c>)
 80063b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	f04f 0400 	mov.w	r4, #0
 80063bc:	461a      	mov	r2, r3
 80063be:	4623      	mov	r3, r4
 80063c0:	f7fa fb9c 	bl	8000afc <__aeabi_uldivmod>
 80063c4:	4603      	mov	r3, r0
 80063c6:	460c      	mov	r4, r1
 80063c8:	4619      	mov	r1, r3
 80063ca:	4622      	mov	r2, r4
 80063cc:	f04f 0300 	mov.w	r3, #0
 80063d0:	f04f 0400 	mov.w	r4, #0
 80063d4:	0214      	lsls	r4, r2, #8
 80063d6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80063da:	020b      	lsls	r3, r1, #8
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	6852      	ldr	r2, [r2, #4]
 80063e0:	0852      	lsrs	r2, r2, #1
 80063e2:	4611      	mov	r1, r2
 80063e4:	f04f 0200 	mov.w	r2, #0
 80063e8:	eb13 0b01 	adds.w	fp, r3, r1
 80063ec:	eb44 0c02 	adc.w	ip, r4, r2
 80063f0:	4658      	mov	r0, fp
 80063f2:	4661      	mov	r1, ip
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f04f 0400 	mov.w	r4, #0
 80063fc:	461a      	mov	r2, r3
 80063fe:	4623      	mov	r3, r4
 8006400:	f7fa fb7c 	bl	8000afc <__aeabi_uldivmod>
 8006404:	4603      	mov	r3, r0
 8006406:	460c      	mov	r4, r1
 8006408:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006410:	d308      	bcc.n	8006424 <UART_SetConfig+0x3f0>
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006418:	d204      	bcs.n	8006424 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	60da      	str	r2, [r3, #12]
 8006422:	e0c1      	b.n	80065a8 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	76bb      	strb	r3, [r7, #26]
 8006428:	e0be      	b.n	80065a8 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006432:	d164      	bne.n	80064fe <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8006434:	7efb      	ldrb	r3, [r7, #27]
 8006436:	2b08      	cmp	r3, #8
 8006438:	d827      	bhi.n	800648a <UART_SetConfig+0x456>
 800643a:	a201      	add	r2, pc, #4	; (adr r2, 8006440 <UART_SetConfig+0x40c>)
 800643c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006440:	08006465 	.word	0x08006465
 8006444:	0800646d 	.word	0x0800646d
 8006448:	08006475 	.word	0x08006475
 800644c:	0800648b 	.word	0x0800648b
 8006450:	0800647b 	.word	0x0800647b
 8006454:	0800648b 	.word	0x0800648b
 8006458:	0800648b 	.word	0x0800648b
 800645c:	0800648b 	.word	0x0800648b
 8006460:	08006483 	.word	0x08006483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006464:	f7fe ff42 	bl	80052ec <HAL_RCC_GetPCLK1Freq>
 8006468:	6178      	str	r0, [r7, #20]
        break;
 800646a:	e013      	b.n	8006494 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800646c:	f7fe ff54 	bl	8005318 <HAL_RCC_GetPCLK2Freq>
 8006470:	6178      	str	r0, [r7, #20]
        break;
 8006472:	e00f      	b.n	8006494 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006474:	4b57      	ldr	r3, [pc, #348]	; (80065d4 <UART_SetConfig+0x5a0>)
 8006476:	617b      	str	r3, [r7, #20]
        break;
 8006478:	e00c      	b.n	8006494 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800647a:	f7fe fea3 	bl	80051c4 <HAL_RCC_GetSysClockFreq>
 800647e:	6178      	str	r0, [r7, #20]
        break;
 8006480:	e008      	b.n	8006494 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006486:	617b      	str	r3, [r7, #20]
        break;
 8006488:	e004      	b.n	8006494 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 800648a:	2300      	movs	r3, #0
 800648c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	76bb      	strb	r3, [r7, #26]
        break;
 8006492:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	2b00      	cmp	r3, #0
 8006498:	f000 8086 	beq.w	80065a8 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	4a4b      	ldr	r2, [pc, #300]	; (80065d0 <UART_SetConfig+0x59c>)
 80064a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064a6:	461a      	mov	r2, r3
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80064ae:	005a      	lsls	r2, r3, #1
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	085b      	lsrs	r3, r3, #1
 80064b6:	441a      	add	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	2b0f      	cmp	r3, #15
 80064c8:	d916      	bls.n	80064f8 <UART_SetConfig+0x4c4>
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064d0:	d212      	bcs.n	80064f8 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	f023 030f 	bic.w	r3, r3, #15
 80064da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	085b      	lsrs	r3, r3, #1
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	f003 0307 	and.w	r3, r3, #7
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	89fb      	ldrh	r3, [r7, #14]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	89fa      	ldrh	r2, [r7, #14]
 80064f4:	60da      	str	r2, [r3, #12]
 80064f6:	e057      	b.n	80065a8 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	76bb      	strb	r3, [r7, #26]
 80064fc:	e054      	b.n	80065a8 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064fe:	7efb      	ldrb	r3, [r7, #27]
 8006500:	2b08      	cmp	r3, #8
 8006502:	d828      	bhi.n	8006556 <UART_SetConfig+0x522>
 8006504:	a201      	add	r2, pc, #4	; (adr r2, 800650c <UART_SetConfig+0x4d8>)
 8006506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650a:	bf00      	nop
 800650c:	08006531 	.word	0x08006531
 8006510:	08006539 	.word	0x08006539
 8006514:	08006541 	.word	0x08006541
 8006518:	08006557 	.word	0x08006557
 800651c:	08006547 	.word	0x08006547
 8006520:	08006557 	.word	0x08006557
 8006524:	08006557 	.word	0x08006557
 8006528:	08006557 	.word	0x08006557
 800652c:	0800654f 	.word	0x0800654f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006530:	f7fe fedc 	bl	80052ec <HAL_RCC_GetPCLK1Freq>
 8006534:	6178      	str	r0, [r7, #20]
        break;
 8006536:	e013      	b.n	8006560 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006538:	f7fe feee 	bl	8005318 <HAL_RCC_GetPCLK2Freq>
 800653c:	6178      	str	r0, [r7, #20]
        break;
 800653e:	e00f      	b.n	8006560 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006540:	4b24      	ldr	r3, [pc, #144]	; (80065d4 <UART_SetConfig+0x5a0>)
 8006542:	617b      	str	r3, [r7, #20]
        break;
 8006544:	e00c      	b.n	8006560 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006546:	f7fe fe3d 	bl	80051c4 <HAL_RCC_GetSysClockFreq>
 800654a:	6178      	str	r0, [r7, #20]
        break;
 800654c:	e008      	b.n	8006560 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800654e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006552:	617b      	str	r3, [r7, #20]
        break;
 8006554:	e004      	b.n	8006560 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	76bb      	strb	r3, [r7, #26]
        break;
 800655e:	bf00      	nop
    }

    if (pclk != 0U)
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d020      	beq.n	80065a8 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656a:	4a19      	ldr	r2, [pc, #100]	; (80065d0 <UART_SetConfig+0x59c>)
 800656c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006570:	461a      	mov	r2, r3
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	fbb3 f2f2 	udiv	r2, r3, r2
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	085b      	lsrs	r3, r3, #1
 800657e:	441a      	add	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	fbb2 f3f3 	udiv	r3, r2, r3
 8006588:	b29b      	uxth	r3, r3
 800658a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	2b0f      	cmp	r3, #15
 8006590:	d908      	bls.n	80065a4 <UART_SetConfig+0x570>
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006598:	d204      	bcs.n	80065a4 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	60da      	str	r2, [r3, #12]
 80065a2:	e001      	b.n	80065a8 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80065c4:	7ebb      	ldrb	r3, [r7, #26]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3720      	adds	r7, #32
 80065ca:	46bd      	mov	sp, r7
 80065cc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80065d0:	08008a1c 	.word	0x08008a1c
 80065d4:	00f42400 	.word	0x00f42400

080065d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00a      	beq.n	8006602 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00a      	beq.n	8006624 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00a      	beq.n	8006646 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	430a      	orrs	r2, r1
 8006644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664a:	f003 0308 	and.w	r3, r3, #8
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00a      	beq.n	8006668 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666c:	f003 0310 	and.w	r3, r3, #16
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00a      	beq.n	800668a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668e:	f003 0320 	and.w	r3, r3, #32
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00a      	beq.n	80066ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	430a      	orrs	r2, r1
 80066aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d01a      	beq.n	80066ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066d6:	d10a      	bne.n	80066ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	430a      	orrs	r2, r1
 800670e:	605a      	str	r2, [r3, #4]
  }
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af02      	add	r7, sp, #8
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800672c:	f7fb fed4 	bl	80024d8 <HAL_GetTick>
 8006730:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0308 	and.w	r3, r3, #8
 800673c:	2b08      	cmp	r3, #8
 800673e:	d10e      	bne.n	800675e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006740:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f82c 	bl	80067ac <UART_WaitOnFlagUntilTimeout>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e022      	b.n	80067a4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0304 	and.w	r3, r3, #4
 8006768:	2b04      	cmp	r3, #4
 800676a:	d10e      	bne.n	800678a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800676c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f816 	bl	80067ac <UART_WaitOnFlagUntilTimeout>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e00c      	b.n	80067a4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2220      	movs	r2, #32
 800678e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2220      	movs	r2, #32
 8006796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	603b      	str	r3, [r7, #0]
 80067b8:	4613      	mov	r3, r2
 80067ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067bc:	e062      	b.n	8006884 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c4:	d05e      	beq.n	8006884 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067c6:	f7fb fe87 	bl	80024d8 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d302      	bcc.n	80067dc <UART_WaitOnFlagUntilTimeout+0x30>
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d11d      	bne.n	8006818 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067ea:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689a      	ldr	r2, [r3, #8]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f022 0201 	bic.w	r2, r2, #1
 80067fa:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2220      	movs	r2, #32
 8006800:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2220      	movs	r2, #32
 8006808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e045      	b.n	80068a4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0304 	and.w	r3, r3, #4
 8006822:	2b00      	cmp	r3, #0
 8006824:	d02e      	beq.n	8006884 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	69db      	ldr	r3, [r3, #28]
 800682c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006834:	d126      	bne.n	8006884 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800683e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800684e:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689a      	ldr	r2, [r3, #8]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f022 0201 	bic.w	r2, r2, #1
 800685e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2220      	movs	r2, #32
 8006864:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2220      	movs	r2, #32
 800686c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2220      	movs	r2, #32
 8006874:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e00f      	b.n	80068a4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	69da      	ldr	r2, [r3, #28]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	4013      	ands	r3, r2
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	429a      	cmp	r2, r3
 8006892:	bf0c      	ite	eq
 8006894:	2301      	moveq	r3, #1
 8006896:	2300      	movne	r3, #0
 8006898:	b2db      	uxtb	r3, r3
 800689a:	461a      	mov	r2, r3
 800689c:	79fb      	ldrb	r3, [r7, #7]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d08d      	beq.n	80067be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d101      	bne.n	80068c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80068be:	2302      	movs	r3, #2
 80068c0:	e027      	b.n	8006912 <HAL_UARTEx_DisableFifoMode+0x66>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2224      	movs	r2, #36	; 0x24
 80068ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f022 0201 	bic.w	r2, r2, #1
 80068e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80068f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2220      	movs	r2, #32
 8006904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3714      	adds	r7, #20
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr

0800691e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b084      	sub	sp, #16
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800692e:	2b01      	cmp	r3, #1
 8006930:	d101      	bne.n	8006936 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006932:	2302      	movs	r3, #2
 8006934:	e02d      	b.n	8006992 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2224      	movs	r2, #36	; 0x24
 8006942:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f022 0201 	bic.w	r2, r2, #1
 800695c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f850 	bl	8006a18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2220      	movs	r2, #32
 8006984:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b084      	sub	sp, #16
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d101      	bne.n	80069b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80069ae:	2302      	movs	r3, #2
 80069b0:	e02d      	b.n	8006a0e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2224      	movs	r2, #36	; 0x24
 80069be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f022 0201 	bic.w	r2, r2, #1
 80069d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	683a      	ldr	r2, [r7, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f812 	bl	8006a18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2220      	movs	r2, #32
 8006a00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
	...

08006a18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b089      	sub	sp, #36	; 0x24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006a20:	4a2f      	ldr	r2, [pc, #188]	; (8006ae0 <UARTEx_SetNbDataToProcess+0xc8>)
 8006a22:	f107 0314 	add.w	r3, r7, #20
 8006a26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a2a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006a2e:	4a2d      	ldr	r2, [pc, #180]	; (8006ae4 <UARTEx_SetNbDataToProcess+0xcc>)
 8006a30:	f107 030c 	add.w	r3, r7, #12
 8006a34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a38:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d108      	bne.n	8006a56 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006a54:	e03d      	b.n	8006ad2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006a56:	2308      	movs	r3, #8
 8006a58:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006a5a:	2308      	movs	r3, #8
 8006a5c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	0e5b      	lsrs	r3, r3, #25
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	f003 0307 	and.w	r3, r3, #7
 8006a6c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	0f5b      	lsrs	r3, r3, #29
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	f003 0307 	and.w	r3, r3, #7
 8006a7c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006a7e:	7fbb      	ldrb	r3, [r7, #30]
 8006a80:	7f3a      	ldrb	r2, [r7, #28]
 8006a82:	f107 0120 	add.w	r1, r7, #32
 8006a86:	440a      	add	r2, r1
 8006a88:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006a8c:	fb02 f303 	mul.w	r3, r2, r3
 8006a90:	7f3a      	ldrb	r2, [r7, #28]
 8006a92:	f107 0120 	add.w	r1, r7, #32
 8006a96:	440a      	add	r2, r1
 8006a98:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006a9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006aa8:	7ffb      	ldrb	r3, [r7, #31]
 8006aaa:	7f7a      	ldrb	r2, [r7, #29]
 8006aac:	f107 0120 	add.w	r1, r7, #32
 8006ab0:	440a      	add	r2, r1
 8006ab2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006ab6:	fb02 f303 	mul.w	r3, r2, r3
 8006aba:	7f7a      	ldrb	r2, [r7, #29]
 8006abc:	f107 0120 	add.w	r1, r7, #32
 8006ac0:	440a      	add	r2, r1
 8006ac2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006ac6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006ad2:	bf00      	nop
 8006ad4:	3724      	adds	r7, #36	; 0x24
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	080089c4 	.word	0x080089c4
 8006ae4:	080089cc 	.word	0x080089cc

08006ae8 <arm_rfft_fast_init_f32>:
 8006ae8:	084b      	lsrs	r3, r1, #1
 8006aea:	2b80      	cmp	r3, #128	; 0x80
 8006aec:	b410      	push	{r4}
 8006aee:	8201      	strh	r1, [r0, #16]
 8006af0:	8003      	strh	r3, [r0, #0]
 8006af2:	d047      	beq.n	8006b84 <arm_rfft_fast_init_f32+0x9c>
 8006af4:	d917      	bls.n	8006b26 <arm_rfft_fast_init_f32+0x3e>
 8006af6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006afa:	d03d      	beq.n	8006b78 <arm_rfft_fast_init_f32+0x90>
 8006afc:	d929      	bls.n	8006b52 <arm_rfft_fast_init_f32+0x6a>
 8006afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b02:	d020      	beq.n	8006b46 <arm_rfft_fast_init_f32+0x5e>
 8006b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b08:	d113      	bne.n	8006b32 <arm_rfft_fast_init_f32+0x4a>
 8006b0a:	4921      	ldr	r1, [pc, #132]	; (8006b90 <arm_rfft_fast_init_f32+0xa8>)
 8006b0c:	4a21      	ldr	r2, [pc, #132]	; (8006b94 <arm_rfft_fast_init_f32+0xac>)
 8006b0e:	4b22      	ldr	r3, [pc, #136]	; (8006b98 <arm_rfft_fast_init_f32+0xb0>)
 8006b10:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8006b14:	8184      	strh	r4, [r0, #12]
 8006b16:	6081      	str	r1, [r0, #8]
 8006b18:	6042      	str	r2, [r0, #4]
 8006b1a:	6143      	str	r3, [r0, #20]
 8006b1c:	2000      	movs	r0, #0
 8006b1e:	b240      	sxtb	r0, r0
 8006b20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	2b20      	cmp	r3, #32
 8006b28:	d01c      	beq.n	8006b64 <arm_rfft_fast_init_f32+0x7c>
 8006b2a:	2b40      	cmp	r3, #64	; 0x40
 8006b2c:	d006      	beq.n	8006b3c <arm_rfft_fast_init_f32+0x54>
 8006b2e:	2b10      	cmp	r3, #16
 8006b30:	d01d      	beq.n	8006b6e <arm_rfft_fast_init_f32+0x86>
 8006b32:	20ff      	movs	r0, #255	; 0xff
 8006b34:	b240      	sxtb	r0, r0
 8006b36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	2438      	movs	r4, #56	; 0x38
 8006b3e:	4917      	ldr	r1, [pc, #92]	; (8006b9c <arm_rfft_fast_init_f32+0xb4>)
 8006b40:	4a17      	ldr	r2, [pc, #92]	; (8006ba0 <arm_rfft_fast_init_f32+0xb8>)
 8006b42:	4b18      	ldr	r3, [pc, #96]	; (8006ba4 <arm_rfft_fast_init_f32+0xbc>)
 8006b44:	e7e6      	b.n	8006b14 <arm_rfft_fast_init_f32+0x2c>
 8006b46:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8006b4a:	4917      	ldr	r1, [pc, #92]	; (8006ba8 <arm_rfft_fast_init_f32+0xc0>)
 8006b4c:	4a17      	ldr	r2, [pc, #92]	; (8006bac <arm_rfft_fast_init_f32+0xc4>)
 8006b4e:	4b18      	ldr	r3, [pc, #96]	; (8006bb0 <arm_rfft_fast_init_f32+0xc8>)
 8006b50:	e7e0      	b.n	8006b14 <arm_rfft_fast_init_f32+0x2c>
 8006b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b56:	d1ec      	bne.n	8006b32 <arm_rfft_fast_init_f32+0x4a>
 8006b58:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8006b5c:	4915      	ldr	r1, [pc, #84]	; (8006bb4 <arm_rfft_fast_init_f32+0xcc>)
 8006b5e:	4a16      	ldr	r2, [pc, #88]	; (8006bb8 <arm_rfft_fast_init_f32+0xd0>)
 8006b60:	4b16      	ldr	r3, [pc, #88]	; (8006bbc <arm_rfft_fast_init_f32+0xd4>)
 8006b62:	e7d7      	b.n	8006b14 <arm_rfft_fast_init_f32+0x2c>
 8006b64:	2430      	movs	r4, #48	; 0x30
 8006b66:	4916      	ldr	r1, [pc, #88]	; (8006bc0 <arm_rfft_fast_init_f32+0xd8>)
 8006b68:	4a16      	ldr	r2, [pc, #88]	; (8006bc4 <arm_rfft_fast_init_f32+0xdc>)
 8006b6a:	4b17      	ldr	r3, [pc, #92]	; (8006bc8 <arm_rfft_fast_init_f32+0xe0>)
 8006b6c:	e7d2      	b.n	8006b14 <arm_rfft_fast_init_f32+0x2c>
 8006b6e:	2414      	movs	r4, #20
 8006b70:	4916      	ldr	r1, [pc, #88]	; (8006bcc <arm_rfft_fast_init_f32+0xe4>)
 8006b72:	4a17      	ldr	r2, [pc, #92]	; (8006bd0 <arm_rfft_fast_init_f32+0xe8>)
 8006b74:	4b17      	ldr	r3, [pc, #92]	; (8006bd4 <arm_rfft_fast_init_f32+0xec>)
 8006b76:	e7cd      	b.n	8006b14 <arm_rfft_fast_init_f32+0x2c>
 8006b78:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8006b7c:	4916      	ldr	r1, [pc, #88]	; (8006bd8 <arm_rfft_fast_init_f32+0xf0>)
 8006b7e:	4a17      	ldr	r2, [pc, #92]	; (8006bdc <arm_rfft_fast_init_f32+0xf4>)
 8006b80:	4b17      	ldr	r3, [pc, #92]	; (8006be0 <arm_rfft_fast_init_f32+0xf8>)
 8006b82:	e7c7      	b.n	8006b14 <arm_rfft_fast_init_f32+0x2c>
 8006b84:	24d0      	movs	r4, #208	; 0xd0
 8006b86:	4917      	ldr	r1, [pc, #92]	; (8006be4 <arm_rfft_fast_init_f32+0xfc>)
 8006b88:	4a17      	ldr	r2, [pc, #92]	; (8006be8 <arm_rfft_fast_init_f32+0x100>)
 8006b8a:	4b18      	ldr	r3, [pc, #96]	; (8006bec <arm_rfft_fast_init_f32+0x104>)
 8006b8c:	e7c2      	b.n	8006b14 <arm_rfft_fast_init_f32+0x2c>
 8006b8e:	bf00      	nop
 8006b90:	0801783c 	.word	0x0801783c
 8006b94:	08008a34 	.word	0x08008a34
 8006b98:	0800eba4 	.word	0x0800eba4
 8006b9c:	0800cb34 	.word	0x0800cb34
 8006ba0:	080195fc 	.word	0x080195fc
 8006ba4:	0801baec 	.word	0x0801baec
 8006ba8:	08015524 	.word	0x08015524
 8006bac:	08013424 	.word	0x08013424
 8006bb0:	0800cba4 	.word	0x0800cba4
 8006bb4:	0801b77c 	.word	0x0801b77c
 8006bb8:	08012ba4 	.word	0x08012ba4
 8006bbc:	080197fc 	.word	0x080197fc
 8006bc0:	080163dc 	.word	0x080163dc
 8006bc4:	08015424 	.word	0x08015424
 8006bc8:	0800ca34 	.word	0x0800ca34
 8006bcc:	08016334 	.word	0x08016334
 8006bd0:	080133a4 	.word	0x080133a4
 8006bd4:	0801635c 	.word	0x0801635c
 8006bd8:	08019ffc 	.word	0x08019ffc
 8006bdc:	0801683c 	.word	0x0801683c
 8006be0:	0801a37c 	.word	0x0801a37c
 8006be4:	0801bcec 	.word	0x0801bcec
 8006be8:	0801643c 	.word	0x0801643c
 8006bec:	0801b37c 	.word	0x0801b37c

08006bf0 <arm_rfft_fast_f32>:
 8006bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bf4:	8a06      	ldrh	r6, [r0, #16]
 8006bf6:	0876      	lsrs	r6, r6, #1
 8006bf8:	4607      	mov	r7, r0
 8006bfa:	4615      	mov	r5, r2
 8006bfc:	8006      	strh	r6, [r0, #0]
 8006bfe:	460c      	mov	r4, r1
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d15c      	bne.n	8006cbe <arm_rfft_fast_f32+0xce>
 8006c04:	461a      	mov	r2, r3
 8006c06:	2301      	movs	r3, #1
 8006c08:	f000 fbe6 	bl	80073d8 <arm_cfft_f32>
 8006c0c:	edd4 7a00 	vldr	s15, [r4]
 8006c10:	ed94 7a01 	vldr	s14, [r4, #4]
 8006c14:	883e      	ldrh	r6, [r7, #0]
 8006c16:	6978      	ldr	r0, [r7, #20]
 8006c18:	ee37 7a07 	vadd.f32	s14, s14, s14
 8006c1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006c20:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8006c24:	ee77 6a87 	vadd.f32	s13, s15, s14
 8006c28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c2c:	3e01      	subs	r6, #1
 8006c2e:	ee26 7aa3 	vmul.f32	s14, s13, s7
 8006c32:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8006c36:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8006c3a:	ed85 7a00 	vstr	s14, [r5]
 8006c3e:	edc5 7a01 	vstr	s15, [r5, #4]
 8006c42:	3010      	adds	r0, #16
 8006c44:	f105 0210 	add.w	r2, r5, #16
 8006c48:	3b08      	subs	r3, #8
 8006c4a:	f104 0110 	add.w	r1, r4, #16
 8006c4e:	ed51 4a02 	vldr	s9, [r1, #-8]
 8006c52:	ed93 5a02 	vldr	s10, [r3, #8]
 8006c56:	ed11 7a01 	vldr	s14, [r1, #-4]
 8006c5a:	ed10 6a02 	vldr	s12, [r0, #-8]
 8006c5e:	edd3 5a03 	vldr	s11, [r3, #12]
 8006c62:	ed50 6a01 	vldr	s13, [r0, #-4]
 8006c66:	ee75 7a64 	vsub.f32	s15, s10, s9
 8006c6a:	ee35 4a87 	vadd.f32	s8, s11, s14
 8006c6e:	ee35 5a24 	vadd.f32	s10, s10, s9
 8006c72:	ee77 5a65 	vsub.f32	s11, s14, s11
 8006c76:	ee66 4a27 	vmul.f32	s9, s12, s15
 8006c7a:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8006c7e:	ee34 5a85 	vadd.f32	s10, s9, s10
 8006c82:	ee26 6a04 	vmul.f32	s12, s12, s8
 8006c86:	ee66 6a84 	vmul.f32	s13, s13, s8
 8006c8a:	ee77 7a25 	vadd.f32	s15, s14, s11
 8006c8e:	ee76 6a85 	vadd.f32	s13, s13, s10
 8006c92:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006c96:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8006c9a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8006c9e:	3e01      	subs	r6, #1
 8006ca0:	ed42 6a02 	vstr	s13, [r2, #-8]
 8006ca4:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006ca8:	f1a3 0308 	sub.w	r3, r3, #8
 8006cac:	f101 0108 	add.w	r1, r1, #8
 8006cb0:	f100 0008 	add.w	r0, r0, #8
 8006cb4:	f102 0208 	add.w	r2, r2, #8
 8006cb8:	d1c9      	bne.n	8006c4e <arm_rfft_fast_f32+0x5e>
 8006cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cbe:	edd1 7a00 	vldr	s15, [r1]
 8006cc2:	edd1 6a01 	vldr	s13, [r1, #4]
 8006cc6:	6941      	ldr	r1, [r0, #20]
 8006cc8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006ccc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006cd0:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8006cd4:	ee27 7a23 	vmul.f32	s14, s14, s7
 8006cd8:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8006cdc:	3e01      	subs	r6, #1
 8006cde:	ed82 7a00 	vstr	s14, [r2]
 8006ce2:	edc2 7a01 	vstr	s15, [r2, #4]
 8006ce6:	00f0      	lsls	r0, r6, #3
 8006ce8:	b3ee      	cbz	r6, 8006d66 <arm_rfft_fast_f32+0x176>
 8006cea:	3808      	subs	r0, #8
 8006cec:	f101 0e10 	add.w	lr, r1, #16
 8006cf0:	4420      	add	r0, r4
 8006cf2:	f104 0110 	add.w	r1, r4, #16
 8006cf6:	f102 0c10 	add.w	ip, r2, #16
 8006cfa:	ed90 7a02 	vldr	s14, [r0, #8]
 8006cfe:	ed51 6a02 	vldr	s13, [r1, #-8]
 8006d02:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8006d06:	ed90 4a03 	vldr	s8, [r0, #12]
 8006d0a:	ed11 5a01 	vldr	s10, [r1, #-4]
 8006d0e:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8006d12:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8006d16:	ee74 4a05 	vadd.f32	s9, s8, s10
 8006d1a:	ee26 3a27 	vmul.f32	s6, s12, s15
 8006d1e:	ee77 6a26 	vadd.f32	s13, s14, s13
 8006d22:	ee35 5a44 	vsub.f32	s10, s10, s8
 8006d26:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8006d2a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8006d2e:	ee77 7a05 	vadd.f32	s15, s14, s10
 8006d32:	ee26 6a24 	vmul.f32	s12, s12, s9
 8006d36:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8006d3a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006d3e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8006d42:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8006d46:	ee27 7a23 	vmul.f32	s14, s14, s7
 8006d4a:	3e01      	subs	r6, #1
 8006d4c:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8006d50:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8006d54:	f1a0 0008 	sub.w	r0, r0, #8
 8006d58:	f101 0108 	add.w	r1, r1, #8
 8006d5c:	f10e 0e08 	add.w	lr, lr, #8
 8006d60:	f10c 0c08 	add.w	ip, ip, #8
 8006d64:	d1c9      	bne.n	8006cfa <arm_rfft_fast_f32+0x10a>
 8006d66:	4638      	mov	r0, r7
 8006d68:	4629      	mov	r1, r5
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d70:	2301      	movs	r3, #1
 8006d72:	f000 bb31 	b.w	80073d8 <arm_cfft_f32>
 8006d76:	bf00      	nop

08006d78 <arm_cfft_radix8by2_f32>:
 8006d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d7c:	ed2d 8b08 	vpush	{d8-d11}
 8006d80:	f8b0 e000 	ldrh.w	lr, [r0]
 8006d84:	6842      	ldr	r2, [r0, #4]
 8006d86:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8006d8a:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8006d8e:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8006d92:	4607      	mov	r7, r0
 8006d94:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8006d98:	f000 80af 	beq.w	8006efa <arm_cfft_radix8by2_f32+0x182>
 8006d9c:	3310      	adds	r3, #16
 8006d9e:	18ce      	adds	r6, r1, r3
 8006da0:	3210      	adds	r2, #16
 8006da2:	4443      	add	r3, r8
 8006da4:	f101 0510 	add.w	r5, r1, #16
 8006da8:	f108 0410 	add.w	r4, r8, #16
 8006dac:	ed54 1a04 	vldr	s3, [r4, #-16]
 8006db0:	ed13 4a04 	vldr	s8, [r3, #-16]
 8006db4:	ed53 3a03 	vldr	s7, [r3, #-12]
 8006db8:	ed53 5a02 	vldr	s11, [r3, #-8]
 8006dbc:	ed13 5a01 	vldr	s10, [r3, #-4]
 8006dc0:	ed54 6a03 	vldr	s13, [r4, #-12]
 8006dc4:	ed14 0a02 	vldr	s0, [r4, #-8]
 8006dc8:	ed16 2a04 	vldr	s4, [r6, #-16]
 8006dcc:	ed56 2a03 	vldr	s5, [r6, #-12]
 8006dd0:	ed15 6a03 	vldr	s12, [r5, #-12]
 8006dd4:	ed15 7a01 	vldr	s14, [r5, #-4]
 8006dd8:	ed15 3a04 	vldr	s6, [r5, #-16]
 8006ddc:	ed54 7a01 	vldr	s15, [r4, #-4]
 8006de0:	ed56 0a02 	vldr	s1, [r6, #-8]
 8006de4:	ed16 1a01 	vldr	s2, [r6, #-4]
 8006de8:	ed55 4a02 	vldr	s9, [r5, #-8]
 8006dec:	ee73 ba21 	vadd.f32	s23, s6, s3
 8006df0:	ee36 ba26 	vadd.f32	s22, s12, s13
 8006df4:	ee37 aa27 	vadd.f32	s20, s14, s15
 8006df8:	ee72 9a04 	vadd.f32	s19, s4, s8
 8006dfc:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8006e00:	ee31 8a05 	vadd.f32	s16, s2, s10
 8006e04:	ee74 aa80 	vadd.f32	s21, s9, s0
 8006e08:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8006e0c:	ed45 ba04 	vstr	s23, [r5, #-16]
 8006e10:	ed05 ba03 	vstr	s22, [r5, #-12]
 8006e14:	ed45 aa02 	vstr	s21, [r5, #-8]
 8006e18:	ed05 aa01 	vstr	s20, [r5, #-4]
 8006e1c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8006e20:	ed46 9a04 	vstr	s19, [r6, #-16]
 8006e24:	ed06 9a03 	vstr	s18, [r6, #-12]
 8006e28:	ed46 8a02 	vstr	s17, [r6, #-8]
 8006e2c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8006e30:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8006e34:	ed12 6a03 	vldr	s12, [r2, #-12]
 8006e38:	ed52 2a04 	vldr	s5, [r2, #-16]
 8006e3c:	ee33 3a61 	vsub.f32	s6, s6, s3
 8006e40:	ee34 4a42 	vsub.f32	s8, s8, s4
 8006e44:	ee26 8a86 	vmul.f32	s16, s13, s12
 8006e48:	ee24 2a06 	vmul.f32	s4, s8, s12
 8006e4c:	ee63 1a22 	vmul.f32	s3, s6, s5
 8006e50:	ee24 4a22 	vmul.f32	s8, s8, s5
 8006e54:	ee23 3a06 	vmul.f32	s6, s6, s12
 8006e58:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8006e5c:	ee23 6a86 	vmul.f32	s12, s7, s12
 8006e60:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8006e64:	ee36 6a04 	vadd.f32	s12, s12, s8
 8006e68:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8006e6c:	ee72 3a63 	vsub.f32	s7, s4, s7
 8006e70:	ee71 2a88 	vadd.f32	s5, s3, s16
 8006e74:	ed44 6a03 	vstr	s13, [r4, #-12]
 8006e78:	ed44 2a04 	vstr	s5, [r4, #-16]
 8006e7c:	ed43 3a04 	vstr	s7, [r3, #-16]
 8006e80:	ed03 6a03 	vstr	s12, [r3, #-12]
 8006e84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e88:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8006e8c:	ed12 7a01 	vldr	s14, [r2, #-4]
 8006e90:	ed52 5a02 	vldr	s11, [r2, #-8]
 8006e94:	ee35 6a41 	vsub.f32	s12, s10, s2
 8006e98:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8006e9c:	ee67 3a87 	vmul.f32	s7, s15, s14
 8006ea0:	ee26 5a87 	vmul.f32	s10, s13, s14
 8006ea4:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8006ea8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006eac:	ee64 4a87 	vmul.f32	s9, s9, s14
 8006eb0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8006eb4:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006eb8:	ee26 6a25 	vmul.f32	s12, s12, s11
 8006ebc:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8006ec0:	ee74 5a23 	vadd.f32	s11, s8, s7
 8006ec4:	ee35 6a46 	vsub.f32	s12, s10, s12
 8006ec8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006ecc:	f1be 0e01 	subs.w	lr, lr, #1
 8006ed0:	ed44 5a02 	vstr	s11, [r4, #-8]
 8006ed4:	f105 0510 	add.w	r5, r5, #16
 8006ed8:	ed44 7a01 	vstr	s15, [r4, #-4]
 8006edc:	f106 0610 	add.w	r6, r6, #16
 8006ee0:	ed03 6a02 	vstr	s12, [r3, #-8]
 8006ee4:	ed03 7a01 	vstr	s14, [r3, #-4]
 8006ee8:	f102 0210 	add.w	r2, r2, #16
 8006eec:	f104 0410 	add.w	r4, r4, #16
 8006ef0:	f103 0310 	add.w	r3, r3, #16
 8006ef4:	f47f af5a 	bne.w	8006dac <arm_cfft_radix8by2_f32+0x34>
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	fa1f f48c 	uxth.w	r4, ip
 8006efe:	4608      	mov	r0, r1
 8006f00:	2302      	movs	r3, #2
 8006f02:	4621      	mov	r1, r4
 8006f04:	f000 fc10 	bl	8007728 <arm_radix8_butterfly_f32>
 8006f08:	ecbd 8b08 	vpop	{d8-d11}
 8006f0c:	4640      	mov	r0, r8
 8006f0e:	4621      	mov	r1, r4
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	2302      	movs	r3, #2
 8006f14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f18:	f000 bc06 	b.w	8007728 <arm_radix8_butterfly_f32>

08006f1c <arm_cfft_radix8by4_f32>:
 8006f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f20:	ed2d 8b0a 	vpush	{d8-d12}
 8006f24:	8802      	ldrh	r2, [r0, #0]
 8006f26:	ed91 6a00 	vldr	s12, [r1]
 8006f2a:	b08f      	sub	sp, #60	; 0x3c
 8006f2c:	460f      	mov	r7, r1
 8006f2e:	0852      	lsrs	r2, r2, #1
 8006f30:	0093      	lsls	r3, r2, #2
 8006f32:	900c      	str	r0, [sp, #48]	; 0x30
 8006f34:	9103      	str	r1, [sp, #12]
 8006f36:	6841      	ldr	r1, [r0, #4]
 8006f38:	ed97 7a01 	vldr	s14, [r7, #4]
 8006f3c:	4638      	mov	r0, r7
 8006f3e:	4418      	add	r0, r3
 8006f40:	4606      	mov	r6, r0
 8006f42:	9009      	str	r0, [sp, #36]	; 0x24
 8006f44:	4418      	add	r0, r3
 8006f46:	edd0 6a00 	vldr	s13, [r0]
 8006f4a:	edd6 3a00 	vldr	s7, [r6]
 8006f4e:	edd6 2a01 	vldr	s5, [r6, #4]
 8006f52:	edd0 7a01 	vldr	s15, [r0, #4]
 8006f56:	900a      	str	r0, [sp, #40]	; 0x28
 8006f58:	ee76 5a26 	vadd.f32	s11, s12, s13
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	4625      	mov	r5, r4
 8006f60:	441c      	add	r4, r3
 8006f62:	ed94 4a00 	vldr	s8, [r4]
 8006f66:	ed94 5a01 	vldr	s10, [r4, #4]
 8006f6a:	9401      	str	r4, [sp, #4]
 8006f6c:	ee75 4aa3 	vadd.f32	s9, s11, s7
 8006f70:	4630      	mov	r0, r6
 8006f72:	ee74 4a24 	vadd.f32	s9, s8, s9
 8006f76:	463e      	mov	r6, r7
 8006f78:	ee14 ea90 	vmov	lr, s9
 8006f7c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8006f80:	f846 eb08 	str.w	lr, [r6], #8
 8006f84:	ee37 6a27 	vadd.f32	s12, s14, s15
 8006f88:	edd0 4a01 	vldr	s9, [r0, #4]
 8006f8c:	9604      	str	r6, [sp, #16]
 8006f8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f92:	9e01      	ldr	r6, [sp, #4]
 8006f94:	ee32 3aa6 	vadd.f32	s6, s5, s13
 8006f98:	ed96 2a01 	vldr	s4, [r6, #4]
 8006f9c:	ee36 7a24 	vadd.f32	s14, s12, s9
 8006fa0:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8006fa4:	ee77 4ae3 	vsub.f32	s9, s15, s7
 8006fa8:	ee36 6a62 	vsub.f32	s12, s12, s5
 8006fac:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8006fb0:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8006fb4:	ee73 3a45 	vsub.f32	s7, s6, s10
 8006fb8:	4604      	mov	r4, r0
 8006fba:	ee36 6a45 	vsub.f32	s12, s12, s10
 8006fbe:	ee75 6a26 	vadd.f32	s13, s10, s13
 8006fc2:	46a3      	mov	fp, r4
 8006fc4:	ee37 7a02 	vadd.f32	s14, s14, s4
 8006fc8:	ee34 5a84 	vadd.f32	s10, s9, s8
 8006fcc:	ee13 8a90 	vmov	r8, s7
 8006fd0:	46a4      	mov	ip, r4
 8006fd2:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8006fd6:	ed87 7a01 	vstr	s14, [r7, #4]
 8006fda:	f84b 8b08 	str.w	r8, [fp], #8
 8006fde:	f1ac 0704 	sub.w	r7, ip, #4
 8006fe2:	ed8c 5a01 	vstr	s10, [ip, #4]
 8006fe6:	f101 0c08 	add.w	ip, r1, #8
 8006fea:	462c      	mov	r4, r5
 8006fec:	f8cd c014 	str.w	ip, [sp, #20]
 8006ff0:	ee15 ca90 	vmov	ip, s11
 8006ff4:	f844 cb08 	str.w	ip, [r4], #8
 8006ff8:	9407      	str	r4, [sp, #28]
 8006ffa:	f101 0410 	add.w	r4, r1, #16
 8006ffe:	ed85 6a01 	vstr	s12, [r5, #4]
 8007002:	0852      	lsrs	r2, r2, #1
 8007004:	9402      	str	r4, [sp, #8]
 8007006:	462c      	mov	r4, r5
 8007008:	f101 0518 	add.w	r5, r1, #24
 800700c:	920b      	str	r2, [sp, #44]	; 0x2c
 800700e:	46b2      	mov	sl, r6
 8007010:	9506      	str	r5, [sp, #24]
 8007012:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8007016:	3a02      	subs	r2, #2
 8007018:	ee16 5a90 	vmov	r5, s13
 800701c:	46b6      	mov	lr, r6
 800701e:	4630      	mov	r0, r6
 8007020:	0852      	lsrs	r2, r2, #1
 8007022:	f84a 5b08 	str.w	r5, [sl], #8
 8007026:	f1a0 0604 	sub.w	r6, r0, #4
 800702a:	edce 7a01 	vstr	s15, [lr, #4]
 800702e:	9208      	str	r2, [sp, #32]
 8007030:	f000 8130 	beq.w	8007294 <arm_cfft_radix8by4_f32+0x378>
 8007034:	4691      	mov	r9, r2
 8007036:	9a03      	ldr	r2, [sp, #12]
 8007038:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800703c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007040:	3b08      	subs	r3, #8
 8007042:	f102 0510 	add.w	r5, r2, #16
 8007046:	f101 0c20 	add.w	ip, r1, #32
 800704a:	f1a4 020c 	sub.w	r2, r4, #12
 800704e:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8007052:	4433      	add	r3, r6
 8007054:	3410      	adds	r4, #16
 8007056:	4650      	mov	r0, sl
 8007058:	4659      	mov	r1, fp
 800705a:	ed55 3a02 	vldr	s7, [r5, #-8]
 800705e:	ed14 5a02 	vldr	s10, [r4, #-8]
 8007062:	ed91 7a00 	vldr	s14, [r1]
 8007066:	edd0 7a00 	vldr	s15, [r0]
 800706a:	ed15 4a01 	vldr	s8, [r5, #-4]
 800706e:	ed54 5a01 	vldr	s11, [r4, #-4]
 8007072:	edd0 6a01 	vldr	s13, [r0, #4]
 8007076:	ed91 6a01 	vldr	s12, [r1, #4]
 800707a:	ee33 8a85 	vadd.f32	s16, s7, s10
 800707e:	ee34 0a25 	vadd.f32	s0, s8, s11
 8007082:	ee78 4a07 	vadd.f32	s9, s16, s14
 8007086:	ee74 5a65 	vsub.f32	s11, s8, s11
 800708a:	ee77 4aa4 	vadd.f32	s9, s15, s9
 800708e:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8007092:	ed45 4a02 	vstr	s9, [r5, #-8]
 8007096:	edd1 4a01 	vldr	s9, [r1, #4]
 800709a:	ed90 4a01 	vldr	s8, [r0, #4]
 800709e:	ee70 4a24 	vadd.f32	s9, s0, s9
 80070a2:	ee76 aa05 	vadd.f32	s21, s12, s10
 80070a6:	ee74 4a84 	vadd.f32	s9, s9, s8
 80070aa:	ee35 aac7 	vsub.f32	s20, s11, s14
 80070ae:	ed45 4a01 	vstr	s9, [r5, #-4]
 80070b2:	edd6 1a00 	vldr	s3, [r6]
 80070b6:	edd7 0a00 	vldr	s1, [r7]
 80070ba:	ed92 4a02 	vldr	s8, [r2, #8]
 80070be:	edd3 3a02 	vldr	s7, [r3, #8]
 80070c2:	ed93 2a01 	vldr	s4, [r3, #4]
 80070c6:	ed16 1a01 	vldr	s2, [r6, #-4]
 80070ca:	edd2 2a01 	vldr	s5, [r2, #4]
 80070ce:	ed57 9a01 	vldr	s19, [r7, #-4]
 80070d2:	ee70 4aa1 	vadd.f32	s9, s1, s3
 80070d6:	ee39 3a81 	vadd.f32	s6, s19, s2
 80070da:	ee74 8a84 	vadd.f32	s17, s9, s8
 80070de:	ee70 1ae1 	vsub.f32	s3, s1, s3
 80070e2:	ee73 8aa8 	vadd.f32	s17, s7, s17
 80070e6:	ee7a aae6 	vsub.f32	s21, s21, s13
 80070ea:	ee18 aa90 	vmov	sl, s17
 80070ee:	f847 a908 	str.w	sl, [r7], #-8
 80070f2:	edd2 8a01 	vldr	s17, [r2, #4]
 80070f6:	ed93 9a01 	vldr	s18, [r3, #4]
 80070fa:	ee73 8a28 	vadd.f32	s17, s6, s17
 80070fe:	ee3a aa27 	vadd.f32	s20, s20, s15
 8007102:	ee78 8a89 	vadd.f32	s17, s17, s18
 8007106:	ee74 0a63 	vsub.f32	s1, s8, s7
 800710a:	edc7 8a01 	vstr	s17, [r7, #4]
 800710e:	ed18 ba02 	vldr	s22, [r8, #-8]
 8007112:	ed58 8a01 	vldr	s17, [r8, #-4]
 8007116:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800711a:	ee6a ba28 	vmul.f32	s23, s20, s17
 800711e:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8007122:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8007126:	ee30 9a81 	vadd.f32	s18, s1, s2
 800712a:	ee79 9a82 	vadd.f32	s19, s19, s4
 800712e:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8007132:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8007136:	ee69 baa8 	vmul.f32	s23, s19, s17
 800713a:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800713e:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8007142:	ee69 8a28 	vmul.f32	s17, s18, s17
 8007146:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800714a:	ee1c aa10 	vmov	sl, s24
 800714e:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8007152:	f841 ab08 	str.w	sl, [r1], #8
 8007156:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800715a:	ee3b bacb 	vsub.f32	s22, s23, s22
 800715e:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8007162:	ee33 3a62 	vsub.f32	s6, s6, s5
 8007166:	ed01 aa01 	vstr	s20, [r1, #-4]
 800716a:	edc2 8a01 	vstr	s17, [r2, #4]
 800716e:	ed82 ba02 	vstr	s22, [r2, #8]
 8007172:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8007176:	ee74 3a63 	vsub.f32	s7, s8, s7
 800717a:	ee38 8a47 	vsub.f32	s16, s16, s14
 800717e:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8007182:	ee30 0a46 	vsub.f32	s0, s0, s12
 8007186:	ee33 3a42 	vsub.f32	s6, s6, s4
 800718a:	ee38 8a67 	vsub.f32	s16, s16, s15
 800718e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007192:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8007196:	ee63 8a04 	vmul.f32	s17, s6, s8
 800719a:	ee28 aa24 	vmul.f32	s20, s16, s9
 800719e:	ee60 9a04 	vmul.f32	s19, s0, s8
 80071a2:	ee28 8a04 	vmul.f32	s16, s16, s8
 80071a6:	ee20 0a24 	vmul.f32	s0, s0, s9
 80071aa:	ee63 3a84 	vmul.f32	s7, s7, s8
 80071ae:	ee39 4a68 	vsub.f32	s8, s18, s17
 80071b2:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80071b6:	ee14 aa10 	vmov	sl, s8
 80071ba:	ee30 0a48 	vsub.f32	s0, s0, s16
 80071be:	ee63 4a24 	vmul.f32	s9, s6, s9
 80071c2:	ed44 9a02 	vstr	s19, [r4, #-8]
 80071c6:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80071ca:	ed04 0a01 	vstr	s0, [r4, #-4]
 80071ce:	f846 a908 	str.w	sl, [r6], #-8
 80071d2:	ee35 6a46 	vsub.f32	s12, s10, s12
 80071d6:	ee35 7a87 	vadd.f32	s14, s11, s14
 80071da:	edc6 3a01 	vstr	s7, [r6, #4]
 80071de:	ee76 6a86 	vadd.f32	s13, s13, s12
 80071e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80071e6:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 80071ea:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 80071ee:	ee67 5a86 	vmul.f32	s11, s15, s12
 80071f2:	ee26 5a87 	vmul.f32	s10, s13, s14
 80071f6:	ee72 2a62 	vsub.f32	s5, s4, s5
 80071fa:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80071fe:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8007202:	ee75 5a25 	vadd.f32	s11, s10, s11
 8007206:	ee62 0a86 	vmul.f32	s1, s5, s12
 800720a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800720e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007212:	ee21 6a06 	vmul.f32	s12, s2, s12
 8007216:	ee62 2a87 	vmul.f32	s5, s5, s14
 800721a:	ee21 1a07 	vmul.f32	s2, s2, s14
 800721e:	ee15 aa90 	vmov	sl, s11
 8007222:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007226:	f840 ab08 	str.w	sl, [r0], #8
 800722a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800722e:	ee76 2a22 	vadd.f32	s5, s12, s5
 8007232:	f1b9 0901 	subs.w	r9, r9, #1
 8007236:	ed40 7a01 	vstr	s15, [r0, #-4]
 800723a:	f105 0508 	add.w	r5, r5, #8
 800723e:	ed83 1a02 	vstr	s2, [r3, #8]
 8007242:	edc3 2a01 	vstr	s5, [r3, #4]
 8007246:	f108 0808 	add.w	r8, r8, #8
 800724a:	f1a2 0208 	sub.w	r2, r2, #8
 800724e:	f10c 0c10 	add.w	ip, ip, #16
 8007252:	f104 0408 	add.w	r4, r4, #8
 8007256:	f10e 0e18 	add.w	lr, lr, #24
 800725a:	f1a3 0308 	sub.w	r3, r3, #8
 800725e:	f47f aefc 	bne.w	800705a <arm_cfft_radix8by4_f32+0x13e>
 8007262:	9908      	ldr	r1, [sp, #32]
 8007264:	9802      	ldr	r0, [sp, #8]
 8007266:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800726a:	00cb      	lsls	r3, r1, #3
 800726c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8007270:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8007274:	9102      	str	r1, [sp, #8]
 8007276:	9904      	ldr	r1, [sp, #16]
 8007278:	4419      	add	r1, r3
 800727a:	9104      	str	r1, [sp, #16]
 800727c:	9905      	ldr	r1, [sp, #20]
 800727e:	4419      	add	r1, r3
 8007280:	9105      	str	r1, [sp, #20]
 8007282:	9907      	ldr	r1, [sp, #28]
 8007284:	449b      	add	fp, r3
 8007286:	4419      	add	r1, r3
 8007288:	449a      	add	sl, r3
 800728a:	9b06      	ldr	r3, [sp, #24]
 800728c:	9107      	str	r1, [sp, #28]
 800728e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007292:	9306      	str	r3, [sp, #24]
 8007294:	9a04      	ldr	r2, [sp, #16]
 8007296:	9807      	ldr	r0, [sp, #28]
 8007298:	edd2 3a00 	vldr	s7, [r2]
 800729c:	ed90 4a00 	vldr	s8, [r0]
 80072a0:	eddb 7a00 	vldr	s15, [fp]
 80072a4:	ed9a 3a00 	vldr	s6, [sl]
 80072a8:	edd2 4a01 	vldr	s9, [r2, #4]
 80072ac:	ed90 7a01 	vldr	s14, [r0, #4]
 80072b0:	ed9b 2a01 	vldr	s4, [fp, #4]
 80072b4:	edda 5a01 	vldr	s11, [sl, #4]
 80072b8:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 80072bc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80072be:	ee73 6a84 	vadd.f32	s13, s7, s8
 80072c2:	ee34 6a87 	vadd.f32	s12, s9, s14
 80072c6:	ee36 5aa7 	vadd.f32	s10, s13, s15
 80072ca:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80072ce:	ee33 5a05 	vadd.f32	s10, s6, s10
 80072d2:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80072d6:	ed82 5a00 	vstr	s10, [r2]
 80072da:	ed9b 5a01 	vldr	s10, [fp, #4]
 80072de:	edda 4a01 	vldr	s9, [sl, #4]
 80072e2:	ee36 5a05 	vadd.f32	s10, s12, s10
 80072e6:	ee72 3a04 	vadd.f32	s7, s4, s8
 80072ea:	ee35 5a24 	vadd.f32	s10, s10, s9
 80072ee:	ee77 4a67 	vsub.f32	s9, s14, s15
 80072f2:	ed82 5a01 	vstr	s10, [r2, #4]
 80072f6:	9a05      	ldr	r2, [sp, #20]
 80072f8:	ee34 5a83 	vadd.f32	s10, s9, s6
 80072fc:	edd2 1a00 	vldr	s3, [r2]
 8007300:	edd2 2a01 	vldr	s5, [r2, #4]
 8007304:	9a02      	ldr	r2, [sp, #8]
 8007306:	ee73 3ae5 	vsub.f32	s7, s7, s11
 800730a:	ee36 6a42 	vsub.f32	s12, s12, s4
 800730e:	ee63 4aa1 	vmul.f32	s9, s7, s3
 8007312:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8007316:	ee65 2a22 	vmul.f32	s5, s10, s5
 800731a:	ee25 5a21 	vmul.f32	s10, s10, s3
 800731e:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8007322:	ee35 5a63 	vsub.f32	s10, s10, s7
 8007326:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800732a:	edcb 2a00 	vstr	s5, [fp]
 800732e:	ed8b 5a01 	vstr	s10, [fp, #4]
 8007332:	edd2 3a01 	vldr	s7, [r2, #4]
 8007336:	ed92 5a00 	vldr	s10, [r2]
 800733a:	9a06      	ldr	r2, [sp, #24]
 800733c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8007340:	ee36 6a65 	vsub.f32	s12, s12, s11
 8007344:	ee66 4a85 	vmul.f32	s9, s13, s10
 8007348:	ee26 5a05 	vmul.f32	s10, s12, s10
 800734c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8007350:	ee26 6a23 	vmul.f32	s12, s12, s7
 8007354:	ee75 6a66 	vsub.f32	s13, s10, s13
 8007358:	ee34 6a86 	vadd.f32	s12, s9, s12
 800735c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8007360:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007364:	edc0 6a01 	vstr	s13, [r0, #4]
 8007368:	ed80 6a00 	vstr	s12, [r0]
 800736c:	ed92 6a01 	vldr	s12, [r2, #4]
 8007370:	9803      	ldr	r0, [sp, #12]
 8007372:	ee77 7a43 	vsub.f32	s15, s14, s6
 8007376:	ee75 5a84 	vadd.f32	s11, s11, s8
 800737a:	ed92 7a00 	vldr	s14, [r2]
 800737e:	ee65 6a87 	vmul.f32	s13, s11, s14
 8007382:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007386:	ee65 5a86 	vmul.f32	s11, s11, s12
 800738a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800738e:	ee77 5a65 	vsub.f32	s11, s14, s11
 8007392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007396:	edca 5a01 	vstr	s11, [sl, #4]
 800739a:	edca 7a00 	vstr	s15, [sl]
 800739e:	6872      	ldr	r2, [r6, #4]
 80073a0:	4621      	mov	r1, r4
 80073a2:	2304      	movs	r3, #4
 80073a4:	f000 f9c0 	bl	8007728 <arm_radix8_butterfly_f32>
 80073a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073aa:	6872      	ldr	r2, [r6, #4]
 80073ac:	4621      	mov	r1, r4
 80073ae:	2304      	movs	r3, #4
 80073b0:	f000 f9ba 	bl	8007728 <arm_radix8_butterfly_f32>
 80073b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80073b6:	6872      	ldr	r2, [r6, #4]
 80073b8:	4621      	mov	r1, r4
 80073ba:	2304      	movs	r3, #4
 80073bc:	f000 f9b4 	bl	8007728 <arm_radix8_butterfly_f32>
 80073c0:	9801      	ldr	r0, [sp, #4]
 80073c2:	6872      	ldr	r2, [r6, #4]
 80073c4:	4621      	mov	r1, r4
 80073c6:	2304      	movs	r3, #4
 80073c8:	b00f      	add	sp, #60	; 0x3c
 80073ca:	ecbd 8b0a 	vpop	{d8-d12}
 80073ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d2:	f000 b9a9 	b.w	8007728 <arm_radix8_butterfly_f32>
 80073d6:	bf00      	nop

080073d8 <arm_cfft_f32>:
 80073d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073dc:	2a01      	cmp	r2, #1
 80073de:	4606      	mov	r6, r0
 80073e0:	4617      	mov	r7, r2
 80073e2:	460c      	mov	r4, r1
 80073e4:	4698      	mov	r8, r3
 80073e6:	8805      	ldrh	r5, [r0, #0]
 80073e8:	d054      	beq.n	8007494 <arm_cfft_f32+0xbc>
 80073ea:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80073ee:	d04c      	beq.n	800748a <arm_cfft_f32+0xb2>
 80073f0:	d916      	bls.n	8007420 <arm_cfft_f32+0x48>
 80073f2:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80073f6:	d01a      	beq.n	800742e <arm_cfft_f32+0x56>
 80073f8:	d95c      	bls.n	80074b4 <arm_cfft_f32+0xdc>
 80073fa:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80073fe:	d044      	beq.n	800748a <arm_cfft_f32+0xb2>
 8007400:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8007404:	d105      	bne.n	8007412 <arm_cfft_f32+0x3a>
 8007406:	4620      	mov	r0, r4
 8007408:	4629      	mov	r1, r5
 800740a:	6872      	ldr	r2, [r6, #4]
 800740c:	2301      	movs	r3, #1
 800740e:	f000 f98b 	bl	8007728 <arm_radix8_butterfly_f32>
 8007412:	f1b8 0f00 	cmp.w	r8, #0
 8007416:	d111      	bne.n	800743c <arm_cfft_f32+0x64>
 8007418:	2f01      	cmp	r7, #1
 800741a:	d016      	beq.n	800744a <arm_cfft_f32+0x72>
 800741c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007420:	2d20      	cmp	r5, #32
 8007422:	d032      	beq.n	800748a <arm_cfft_f32+0xb2>
 8007424:	d94a      	bls.n	80074bc <arm_cfft_f32+0xe4>
 8007426:	2d40      	cmp	r5, #64	; 0x40
 8007428:	d0ed      	beq.n	8007406 <arm_cfft_f32+0x2e>
 800742a:	2d80      	cmp	r5, #128	; 0x80
 800742c:	d1f1      	bne.n	8007412 <arm_cfft_f32+0x3a>
 800742e:	4630      	mov	r0, r6
 8007430:	4621      	mov	r1, r4
 8007432:	f7ff fca1 	bl	8006d78 <arm_cfft_radix8by2_f32>
 8007436:	f1b8 0f00 	cmp.w	r8, #0
 800743a:	d0ed      	beq.n	8007418 <arm_cfft_f32+0x40>
 800743c:	4620      	mov	r0, r4
 800743e:	89b1      	ldrh	r1, [r6, #12]
 8007440:	68b2      	ldr	r2, [r6, #8]
 8007442:	f7f8 fedd 	bl	8000200 <arm_bitreversal_32>
 8007446:	2f01      	cmp	r7, #1
 8007448:	d1e8      	bne.n	800741c <arm_cfft_f32+0x44>
 800744a:	ee07 5a90 	vmov	s15, r5
 800744e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007452:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007456:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800745a:	2d00      	cmp	r5, #0
 800745c:	d0de      	beq.n	800741c <arm_cfft_f32+0x44>
 800745e:	f104 0108 	add.w	r1, r4, #8
 8007462:	2300      	movs	r3, #0
 8007464:	3301      	adds	r3, #1
 8007466:	429d      	cmp	r5, r3
 8007468:	f101 0108 	add.w	r1, r1, #8
 800746c:	ed11 7a04 	vldr	s14, [r1, #-16]
 8007470:	ed51 7a03 	vldr	s15, [r1, #-12]
 8007474:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007478:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800747c:	ed01 7a04 	vstr	s14, [r1, #-16]
 8007480:	ed41 7a03 	vstr	s15, [r1, #-12]
 8007484:	d1ee      	bne.n	8007464 <arm_cfft_f32+0x8c>
 8007486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800748a:	4630      	mov	r0, r6
 800748c:	4621      	mov	r1, r4
 800748e:	f7ff fd45 	bl	8006f1c <arm_cfft_radix8by4_f32>
 8007492:	e7be      	b.n	8007412 <arm_cfft_f32+0x3a>
 8007494:	b1ad      	cbz	r5, 80074c2 <arm_cfft_f32+0xea>
 8007496:	f101 030c 	add.w	r3, r1, #12
 800749a:	2200      	movs	r2, #0
 800749c:	ed53 7a02 	vldr	s15, [r3, #-8]
 80074a0:	3201      	adds	r2, #1
 80074a2:	eef1 7a67 	vneg.f32	s15, s15
 80074a6:	4295      	cmp	r5, r2
 80074a8:	ed43 7a02 	vstr	s15, [r3, #-8]
 80074ac:	f103 0308 	add.w	r3, r3, #8
 80074b0:	d1f4      	bne.n	800749c <arm_cfft_f32+0xc4>
 80074b2:	e79a      	b.n	80073ea <arm_cfft_f32+0x12>
 80074b4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80074b8:	d0a5      	beq.n	8007406 <arm_cfft_f32+0x2e>
 80074ba:	e7aa      	b.n	8007412 <arm_cfft_f32+0x3a>
 80074bc:	2d10      	cmp	r5, #16
 80074be:	d0b6      	beq.n	800742e <arm_cfft_f32+0x56>
 80074c0:	e7a7      	b.n	8007412 <arm_cfft_f32+0x3a>
 80074c2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80074c6:	d894      	bhi.n	80073f2 <arm_cfft_f32+0x1a>
 80074c8:	e7aa      	b.n	8007420 <arm_cfft_f32+0x48>
 80074ca:	bf00      	nop

080074cc <arm_cmplx_mag_f32>:
 80074cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074d0:	ea5f 0892 	movs.w	r8, r2, lsr #2
 80074d4:	b084      	sub	sp, #16
 80074d6:	d07f      	beq.n	80075d8 <arm_cmplx_mag_f32+0x10c>
 80074d8:	2700      	movs	r7, #0
 80074da:	f100 0420 	add.w	r4, r0, #32
 80074de:	f101 0510 	add.w	r5, r1, #16
 80074e2:	4646      	mov	r6, r8
 80074e4:	e05a      	b.n	800759c <arm_cmplx_mag_f32+0xd0>
 80074e6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80074ea:	eeb4 0a40 	vcmp.f32	s0, s0
 80074ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074f2:	f040 80a4 	bne.w	800763e <arm_cmplx_mag_f32+0x172>
 80074f6:	ed05 0a04 	vstr	s0, [r5, #-16]
 80074fa:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 80074fe:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8007502:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007506:	ee20 0a00 	vmul.f32	s0, s0, s0
 800750a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800750e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007516:	f2c0 808f 	blt.w	8007638 <arm_cmplx_mag_f32+0x16c>
 800751a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800751e:	eeb4 0a40 	vcmp.f32	s0, s0
 8007522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007526:	f040 80af 	bne.w	8007688 <arm_cmplx_mag_f32+0x1bc>
 800752a:	ed05 0a03 	vstr	s0, [r5, #-12]
 800752e:	ed54 7a04 	vldr	s15, [r4, #-16]
 8007532:	ed14 0a03 	vldr	s0, [r4, #-12]
 8007536:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800753a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800753e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007542:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800754a:	db72      	blt.n	8007632 <arm_cmplx_mag_f32+0x166>
 800754c:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8007550:	eeb4 0a40 	vcmp.f32	s0, s0
 8007554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007558:	f040 808c 	bne.w	8007674 <arm_cmplx_mag_f32+0x1a8>
 800755c:	ed05 0a02 	vstr	s0, [r5, #-8]
 8007560:	ed54 7a02 	vldr	s15, [r4, #-8]
 8007564:	ed14 0a01 	vldr	s0, [r4, #-4]
 8007568:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800756c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007570:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007574:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800757c:	db20      	blt.n	80075c0 <arm_cmplx_mag_f32+0xf4>
 800757e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8007582:	eeb4 0a40 	vcmp.f32	s0, s0
 8007586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800758a:	d169      	bne.n	8007660 <arm_cmplx_mag_f32+0x194>
 800758c:	3e01      	subs	r6, #1
 800758e:	ed05 0a01 	vstr	s0, [r5, #-4]
 8007592:	f104 0420 	add.w	r4, r4, #32
 8007596:	f105 0510 	add.w	r5, r5, #16
 800759a:	d019      	beq.n	80075d0 <arm_cmplx_mag_f32+0x104>
 800759c:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 80075a0:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 80075a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80075a8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80075ac:	ee77 7a80 	vadd.f32	s15, s15, s0
 80075b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80075b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075b8:	da95      	bge.n	80074e6 <arm_cmplx_mag_f32+0x1a>
 80075ba:	f845 7c10 	str.w	r7, [r5, #-16]
 80075be:	e79c      	b.n	80074fa <arm_cmplx_mag_f32+0x2e>
 80075c0:	3e01      	subs	r6, #1
 80075c2:	f845 7c04 	str.w	r7, [r5, #-4]
 80075c6:	f104 0420 	add.w	r4, r4, #32
 80075ca:	f105 0510 	add.w	r5, r5, #16
 80075ce:	d1e5      	bne.n	800759c <arm_cmplx_mag_f32+0xd0>
 80075d0:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 80075d4:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 80075d8:	f012 0503 	ands.w	r5, r2, #3
 80075dc:	d026      	beq.n	800762c <arm_cmplx_mag_f32+0x160>
 80075de:	2600      	movs	r6, #0
 80075e0:	f100 0408 	add.w	r4, r0, #8
 80075e4:	e00c      	b.n	8007600 <arm_cmplx_mag_f32+0x134>
 80075e6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80075ea:	eeb4 0a40 	vcmp.f32	s0, s0
 80075ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075f2:	d12e      	bne.n	8007652 <arm_cmplx_mag_f32+0x186>
 80075f4:	3d01      	subs	r5, #1
 80075f6:	ed01 0a01 	vstr	s0, [r1, #-4]
 80075fa:	f104 0408 	add.w	r4, r4, #8
 80075fe:	d015      	beq.n	800762c <arm_cmplx_mag_f32+0x160>
 8007600:	ed54 7a02 	vldr	s15, [r4, #-8]
 8007604:	ed14 0a01 	vldr	s0, [r4, #-4]
 8007608:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800760c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007610:	3104      	adds	r1, #4
 8007612:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007616:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800761a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800761e:	dae2      	bge.n	80075e6 <arm_cmplx_mag_f32+0x11a>
 8007620:	3d01      	subs	r5, #1
 8007622:	f841 6c04 	str.w	r6, [r1, #-4]
 8007626:	f104 0408 	add.w	r4, r4, #8
 800762a:	d1e9      	bne.n	8007600 <arm_cmplx_mag_f32+0x134>
 800762c:	b004      	add	sp, #16
 800762e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007632:	f845 7c08 	str.w	r7, [r5, #-8]
 8007636:	e793      	b.n	8007560 <arm_cmplx_mag_f32+0x94>
 8007638:	f845 7c0c 	str.w	r7, [r5, #-12]
 800763c:	e777      	b.n	800752e <arm_cmplx_mag_f32+0x62>
 800763e:	eeb0 0a67 	vmov.f32	s0, s15
 8007642:	9203      	str	r2, [sp, #12]
 8007644:	9102      	str	r1, [sp, #8]
 8007646:	9001      	str	r0, [sp, #4]
 8007648:	f000 fc50 	bl	8007eec <sqrtf>
 800764c:	a801      	add	r0, sp, #4
 800764e:	c807      	ldmia	r0, {r0, r1, r2}
 8007650:	e751      	b.n	80074f6 <arm_cmplx_mag_f32+0x2a>
 8007652:	eeb0 0a67 	vmov.f32	s0, s15
 8007656:	9101      	str	r1, [sp, #4]
 8007658:	f000 fc48 	bl	8007eec <sqrtf>
 800765c:	9901      	ldr	r1, [sp, #4]
 800765e:	e7c9      	b.n	80075f4 <arm_cmplx_mag_f32+0x128>
 8007660:	eeb0 0a67 	vmov.f32	s0, s15
 8007664:	9203      	str	r2, [sp, #12]
 8007666:	9102      	str	r1, [sp, #8]
 8007668:	9001      	str	r0, [sp, #4]
 800766a:	f000 fc3f 	bl	8007eec <sqrtf>
 800766e:	a801      	add	r0, sp, #4
 8007670:	c807      	ldmia	r0, {r0, r1, r2}
 8007672:	e78b      	b.n	800758c <arm_cmplx_mag_f32+0xc0>
 8007674:	eeb0 0a67 	vmov.f32	s0, s15
 8007678:	9203      	str	r2, [sp, #12]
 800767a:	9102      	str	r1, [sp, #8]
 800767c:	9001      	str	r0, [sp, #4]
 800767e:	f000 fc35 	bl	8007eec <sqrtf>
 8007682:	a801      	add	r0, sp, #4
 8007684:	c807      	ldmia	r0, {r0, r1, r2}
 8007686:	e769      	b.n	800755c <arm_cmplx_mag_f32+0x90>
 8007688:	eeb0 0a67 	vmov.f32	s0, s15
 800768c:	9203      	str	r2, [sp, #12]
 800768e:	9102      	str	r1, [sp, #8]
 8007690:	9001      	str	r0, [sp, #4]
 8007692:	f000 fc2b 	bl	8007eec <sqrtf>
 8007696:	a801      	add	r0, sp, #4
 8007698:	c807      	ldmia	r0, {r0, r1, r2}
 800769a:	e746      	b.n	800752a <arm_cmplx_mag_f32+0x5e>

0800769c <arm_mult_f32>:
 800769c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800769e:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 80076a2:	d033      	beq.n	800770c <arm_mult_f32+0x70>
 80076a4:	f100 0610 	add.w	r6, r0, #16
 80076a8:	f101 0510 	add.w	r5, r1, #16
 80076ac:	f102 0410 	add.w	r4, r2, #16
 80076b0:	4677      	mov	r7, lr
 80076b2:	ed16 6a04 	vldr	s12, [r6, #-16]
 80076b6:	ed55 4a04 	vldr	s9, [r5, #-16]
 80076ba:	ed56 6a02 	vldr	s13, [r6, #-8]
 80076be:	ed15 5a02 	vldr	s10, [r5, #-8]
 80076c2:	ed16 7a03 	vldr	s14, [r6, #-12]
 80076c6:	ed55 5a03 	vldr	s11, [r5, #-12]
 80076ca:	ed56 7a01 	vldr	s15, [r6, #-4]
 80076ce:	ee26 6a24 	vmul.f32	s12, s12, s9
 80076d2:	ee66 6a85 	vmul.f32	s13, s13, s10
 80076d6:	ed04 6a04 	vstr	s12, [r4, #-16]
 80076da:	ed15 6a01 	vldr	s12, [r5, #-4]
 80076de:	ed44 6a02 	vstr	s13, [r4, #-8]
 80076e2:	ee27 7a25 	vmul.f32	s14, s14, s11
 80076e6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80076ea:	3f01      	subs	r7, #1
 80076ec:	ed04 7a03 	vstr	s14, [r4, #-12]
 80076f0:	ed44 7a01 	vstr	s15, [r4, #-4]
 80076f4:	f106 0610 	add.w	r6, r6, #16
 80076f8:	f105 0510 	add.w	r5, r5, #16
 80076fc:	f104 0410 	add.w	r4, r4, #16
 8007700:	d1d7      	bne.n	80076b2 <arm_mult_f32+0x16>
 8007702:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8007706:	4420      	add	r0, r4
 8007708:	4421      	add	r1, r4
 800770a:	4422      	add	r2, r4
 800770c:	f013 0303 	ands.w	r3, r3, #3
 8007710:	d009      	beq.n	8007726 <arm_mult_f32+0x8a>
 8007712:	ecf0 7a01 	vldmia	r0!, {s15}
 8007716:	ecb1 7a01 	vldmia	r1!, {s14}
 800771a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800771e:	3b01      	subs	r3, #1
 8007720:	ece2 7a01 	vstmia	r2!, {s15}
 8007724:	d1f5      	bne.n	8007712 <arm_mult_f32+0x76>
 8007726:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007728 <arm_radix8_butterfly_f32>:
 8007728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772c:	ed2d 8b10 	vpush	{d8-d15}
 8007730:	b09d      	sub	sp, #116	; 0x74
 8007732:	461c      	mov	r4, r3
 8007734:	ed9f bac8 	vldr	s22, [pc, #800]	; 8007a58 <arm_radix8_butterfly_f32+0x330>
 8007738:	921a      	str	r2, [sp, #104]	; 0x68
 800773a:	1d03      	adds	r3, r0, #4
 800773c:	4682      	mov	sl, r0
 800773e:	4689      	mov	r9, r1
 8007740:	468b      	mov	fp, r1
 8007742:	931b      	str	r3, [sp, #108]	; 0x6c
 8007744:	9400      	str	r4, [sp, #0]
 8007746:	469e      	mov	lr, r3
 8007748:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800774c:	005a      	lsls	r2, r3, #1
 800774e:	18d6      	adds	r6, r2, r3
 8007750:	18f5      	adds	r5, r6, r3
 8007752:	9203      	str	r2, [sp, #12]
 8007754:	195a      	adds	r2, r3, r5
 8007756:	18d0      	adds	r0, r2, r3
 8007758:	00df      	lsls	r7, r3, #3
 800775a:	1819      	adds	r1, r3, r0
 800775c:	463c      	mov	r4, r7
 800775e:	9701      	str	r7, [sp, #4]
 8007760:	4457      	add	r7, sl
 8007762:	930c      	str	r3, [sp, #48]	; 0x30
 8007764:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8007768:	011b      	lsls	r3, r3, #4
 800776a:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 800776e:	eb07 0c04 	add.w	ip, r7, r4
 8007772:	9c00      	ldr	r4, [sp, #0]
 8007774:	9302      	str	r3, [sp, #8]
 8007776:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 800777a:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 800777e:	3204      	adds	r2, #4
 8007780:	3104      	adds	r1, #4
 8007782:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8007786:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800778a:	f04f 0800 	mov.w	r8, #0
 800778e:	eddc 7a00 	vldr	s15, [ip]
 8007792:	edd7 6a00 	vldr	s13, [r7]
 8007796:	edd6 3a00 	vldr	s7, [r6]
 800779a:	ed5e aa01 	vldr	s21, [lr, #-4]
 800779e:	edd5 4a00 	vldr	s9, [r5]
 80077a2:	ed90 2a00 	vldr	s4, [r0]
 80077a6:	ed12 7a01 	vldr	s14, [r2, #-4]
 80077aa:	ed51 0a01 	vldr	s1, [r1, #-4]
 80077ae:	ee77 8a82 	vadd.f32	s17, s15, s4
 80077b2:	ee33 4aa0 	vadd.f32	s8, s7, s1
 80077b6:	ee76 1a87 	vadd.f32	s3, s13, s14
 80077ba:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 80077be:	ee31 6a84 	vadd.f32	s12, s3, s8
 80077c2:	ee33 5a28 	vadd.f32	s10, s6, s17
 80077c6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80077ca:	ee75 6a06 	vadd.f32	s13, s10, s12
 80077ce:	ee35 5a46 	vsub.f32	s10, s10, s12
 80077d2:	ed4e 6a01 	vstr	s13, [lr, #-4]
 80077d6:	ed85 5a00 	vstr	s10, [r5]
 80077da:	ed96 1a01 	vldr	s2, [r6, #4]
 80077de:	edd7 5a01 	vldr	s11, [r7, #4]
 80077e2:	ed92 aa00 	vldr	s20, [r2]
 80077e6:	ed91 6a00 	vldr	s12, [r1]
 80077ea:	ed9e 9a00 	vldr	s18, [lr]
 80077ee:	ed95 5a01 	vldr	s10, [r5, #4]
 80077f2:	eddc 6a01 	vldr	s13, [ip, #4]
 80077f6:	edd0 9a01 	vldr	s19, [r0, #4]
 80077fa:	ee73 0ae0 	vsub.f32	s1, s7, s1
 80077fe:	ee71 2a46 	vsub.f32	s5, s2, s12
 8007802:	ee75 3aca 	vsub.f32	s7, s11, s20
 8007806:	ee37 0a60 	vsub.f32	s0, s14, s1
 800780a:	ee33 8aa2 	vadd.f32	s16, s7, s5
 800780e:	ee37 7a20 	vadd.f32	s14, s14, s1
 8007812:	ee73 2ae2 	vsub.f32	s5, s7, s5
 8007816:	ee37 2ac2 	vsub.f32	s4, s15, s4
 800781a:	ee79 3a05 	vadd.f32	s7, s18, s10
 800781e:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8007822:	ee39 5a45 	vsub.f32	s10, s18, s10
 8007826:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 800782a:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800782e:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8007832:	ee31 6a06 	vadd.f32	s12, s2, s12
 8007836:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800783a:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800783e:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8007842:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8007846:	ee33 3a68 	vsub.f32	s6, s6, s17
 800784a:	ee36 0a88 	vadd.f32	s0, s13, s16
 800784e:	ee75 8a86 	vadd.f32	s17, s11, s12
 8007852:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8007856:	ee71 1ac4 	vsub.f32	s3, s3, s8
 800785a:	ee75 6a62 	vsub.f32	s13, s10, s5
 800785e:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8007862:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8007866:	ee33 1a89 	vadd.f32	s2, s7, s18
 800786a:	ee74 5ae0 	vsub.f32	s11, s9, s1
 800786e:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8007872:	ee75 4a22 	vadd.f32	s9, s10, s5
 8007876:	ee32 5a27 	vadd.f32	s10, s4, s15
 800787a:	ee72 7a67 	vsub.f32	s15, s4, s15
 800787e:	ee33 8a06 	vadd.f32	s16, s6, s12
 8007882:	ee75 2a87 	vadd.f32	s5, s11, s14
 8007886:	ee31 9a28 	vadd.f32	s18, s2, s17
 800788a:	ee33 6a46 	vsub.f32	s12, s6, s12
 800788e:	ee74 0a61 	vsub.f32	s1, s8, s3
 8007892:	ee33 2a80 	vadd.f32	s4, s7, s0
 8007896:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800789a:	ee34 3ac5 	vsub.f32	s6, s9, s10
 800789e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80078a2:	ee31 1a68 	vsub.f32	s2, s2, s17
 80078a6:	ee34 4a21 	vadd.f32	s8, s8, s3
 80078aa:	ee73 3ac0 	vsub.f32	s7, s7, s0
 80078ae:	ee74 4a85 	vadd.f32	s9, s9, s10
 80078b2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80078b6:	44d8      	add	r8, fp
 80078b8:	45c1      	cmp	r9, r8
 80078ba:	ed8e 9a00 	vstr	s18, [lr]
 80078be:	ed85 1a01 	vstr	s2, [r5, #4]
 80078c2:	449e      	add	lr, r3
 80078c4:	ed8c 8a00 	vstr	s16, [ip]
 80078c8:	441d      	add	r5, r3
 80078ca:	ed80 6a00 	vstr	s12, [r0]
 80078ce:	edcc 0a01 	vstr	s1, [ip, #4]
 80078d2:	ed80 4a01 	vstr	s8, [r0, #4]
 80078d6:	449c      	add	ip, r3
 80078d8:	ed87 2a00 	vstr	s4, [r7]
 80078dc:	4418      	add	r0, r3
 80078de:	ed41 3a01 	vstr	s7, [r1, #-4]
 80078e2:	ed42 2a01 	vstr	s5, [r2, #-4]
 80078e6:	ed86 7a00 	vstr	s14, [r6]
 80078ea:	ed87 3a01 	vstr	s6, [r7, #4]
 80078ee:	edc1 4a00 	vstr	s9, [r1]
 80078f2:	441f      	add	r7, r3
 80078f4:	edc2 5a00 	vstr	s11, [r2]
 80078f8:	4419      	add	r1, r3
 80078fa:	edc6 6a01 	vstr	s13, [r6, #4]
 80078fe:	441a      	add	r2, r3
 8007900:	441e      	add	r6, r3
 8007902:	f63f af44 	bhi.w	800778e <arm_radix8_butterfly_f32+0x66>
 8007906:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007908:	2907      	cmp	r1, #7
 800790a:	4620      	mov	r0, r4
 800790c:	f240 81e9 	bls.w	8007ce2 <arm_radix8_butterfly_f32+0x5ba>
 8007910:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8007914:	193e      	adds	r6, r7, r4
 8007916:	1935      	adds	r5, r6, r4
 8007918:	9c03      	ldr	r4, [sp, #12]
 800791a:	9000      	str	r0, [sp, #0]
 800791c:	4622      	mov	r2, r4
 800791e:	3201      	adds	r2, #1
 8007920:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007924:	9900      	ldr	r1, [sp, #0]
 8007926:	1828      	adds	r0, r5, r0
 8007928:	eb00 0e01 	add.w	lr, r0, r1
 800792c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800792e:	440a      	add	r2, r1
 8007930:	eb04 0c01 	add.w	ip, r4, r1
 8007934:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8007938:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 800793c:	9a00      	ldr	r2, [sp, #0]
 800793e:	940f      	str	r4, [sp, #60]	; 0x3c
 8007940:	00ed      	lsls	r5, r5, #3
 8007942:	9511      	str	r5, [sp, #68]	; 0x44
 8007944:	00d5      	lsls	r5, r2, #3
 8007946:	950d      	str	r5, [sp, #52]	; 0x34
 8007948:	9d01      	ldr	r5, [sp, #4]
 800794a:	3508      	adds	r5, #8
 800794c:	9516      	str	r5, [sp, #88]	; 0x58
 800794e:	9d02      	ldr	r5, [sp, #8]
 8007950:	3508      	adds	r5, #8
 8007952:	0114      	lsls	r4, r2, #4
 8007954:	9517      	str	r5, [sp, #92]	; 0x5c
 8007956:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007958:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800795a:	940e      	str	r4, [sp, #56]	; 0x38
 800795c:	00c0      	lsls	r0, r0, #3
 800795e:	9010      	str	r0, [sp, #64]	; 0x40
 8007960:	18aa      	adds	r2, r5, r2
 8007962:	9207      	str	r2, [sp, #28]
 8007964:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007966:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007968:	18aa      	adds	r2, r5, r2
 800796a:	9208      	str	r2, [sp, #32]
 800796c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800796e:	18aa      	adds	r2, r5, r2
 8007970:	9209      	str	r2, [sp, #36]	; 0x24
 8007972:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007976:	f10e 0204 	add.w	r2, lr, #4
 800797a:	920a      	str	r2, [sp, #40]	; 0x28
 800797c:	00c9      	lsls	r1, r1, #3
 800797e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007980:	310c      	adds	r1, #12
 8007982:	00f6      	lsls	r6, r6, #3
 8007984:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8007988:	9114      	str	r1, [sp, #80]	; 0x50
 800798a:	18a9      	adds	r1, r5, r2
 800798c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800798e:	9612      	str	r6, [sp, #72]	; 0x48
 8007990:	00ff      	lsls	r7, r7, #3
 8007992:	19ae      	adds	r6, r5, r6
 8007994:	3008      	adds	r0, #8
 8007996:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800799a:	9606      	str	r6, [sp, #24]
 800799c:	9019      	str	r0, [sp, #100]	; 0x64
 800799e:	18aa      	adds	r2, r5, r2
 80079a0:	0164      	lsls	r4, r4, #5
 80079a2:	19ee      	adds	r6, r5, r7
 80079a4:	f10c 000c 	add.w	r0, ip, #12
 80079a8:	9713      	str	r7, [sp, #76]	; 0x4c
 80079aa:	9604      	str	r6, [sp, #16]
 80079ac:	9015      	str	r0, [sp, #84]	; 0x54
 80079ae:	9103      	str	r1, [sp, #12]
 80079b0:	9205      	str	r2, [sp, #20]
 80079b2:	f104 0208 	add.w	r2, r4, #8
 80079b6:	9218      	str	r2, [sp, #96]	; 0x60
 80079b8:	f04f 0801 	mov.w	r8, #1
 80079bc:	2200      	movs	r2, #0
 80079be:	f102 0108 	add.w	r1, r2, #8
 80079c2:	460f      	mov	r7, r1
 80079c4:	910b      	str	r1, [sp, #44]	; 0x2c
 80079c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80079c8:	188e      	adds	r6, r1, r2
 80079ca:	9916      	ldr	r1, [sp, #88]	; 0x58
 80079cc:	188d      	adds	r5, r1, r2
 80079ce:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80079d0:	188c      	adds	r4, r1, r2
 80079d2:	9919      	ldr	r1, [sp, #100]	; 0x64
 80079d4:	1888      	adds	r0, r1, r2
 80079d6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80079d8:	eb01 0c02 	add.w	ip, r1, r2
 80079dc:	9915      	ldr	r1, [sp, #84]	; 0x54
 80079de:	440a      	add	r2, r1
 80079e0:	9903      	ldr	r1, [sp, #12]
 80079e2:	edd1 fa00 	vldr	s31, [r1]
 80079e6:	9905      	ldr	r1, [sp, #20]
 80079e8:	ed91 fa00 	vldr	s30, [r1]
 80079ec:	9904      	ldr	r1, [sp, #16]
 80079ee:	edd1 ea00 	vldr	s29, [r1]
 80079f2:	9906      	ldr	r1, [sp, #24]
 80079f4:	ed91 ea00 	vldr	s28, [r1]
 80079f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079fa:	edd1 da00 	vldr	s27, [r1]
 80079fe:	9908      	ldr	r1, [sp, #32]
 8007a00:	ed91 da00 	vldr	s26, [r1]
 8007a04:	9907      	ldr	r1, [sp, #28]
 8007a06:	edd1 ca00 	vldr	s25, [r1]
 8007a0a:	9903      	ldr	r1, [sp, #12]
 8007a0c:	ed91 ca01 	vldr	s24, [r1, #4]
 8007a10:	9905      	ldr	r1, [sp, #20]
 8007a12:	edd1 ba01 	vldr	s23, [r1, #4]
 8007a16:	9904      	ldr	r1, [sp, #16]
 8007a18:	edd1 aa01 	vldr	s21, [r1, #4]
 8007a1c:	9906      	ldr	r1, [sp, #24]
 8007a1e:	ed91 aa01 	vldr	s20, [r1, #4]
 8007a22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a24:	edd1 7a01 	vldr	s15, [r1, #4]
 8007a28:	9908      	ldr	r1, [sp, #32]
 8007a2a:	edcd 7a00 	vstr	s15, [sp]
 8007a2e:	edd1 7a01 	vldr	s15, [r1, #4]
 8007a32:	9907      	ldr	r1, [sp, #28]
 8007a34:	edcd 7a01 	vstr	s15, [sp, #4]
 8007a38:	edd1 7a01 	vldr	s15, [r1, #4]
 8007a3c:	eb0a 0e07 	add.w	lr, sl, r7
 8007a40:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007a42:	edcd 7a02 	vstr	s15, [sp, #8]
 8007a46:	eb0c 010a 	add.w	r1, ip, sl
 8007a4a:	4456      	add	r6, sl
 8007a4c:	4455      	add	r5, sl
 8007a4e:	4454      	add	r4, sl
 8007a50:	4450      	add	r0, sl
 8007a52:	4452      	add	r2, sl
 8007a54:	46c4      	mov	ip, r8
 8007a56:	e001      	b.n	8007a5c <arm_radix8_butterfly_f32+0x334>
 8007a58:	3f3504f3 	.word	0x3f3504f3
 8007a5c:	ed96 5a00 	vldr	s10, [r6]
 8007a60:	ed52 9a01 	vldr	s19, [r2, #-4]
 8007a64:	ed11 6a01 	vldr	s12, [r1, #-4]
 8007a68:	edd0 7a00 	vldr	s15, [r0]
 8007a6c:	ed17 7a01 	vldr	s14, [r7, #-4]
 8007a70:	edde 3a00 	vldr	s7, [lr]
 8007a74:	ed94 3a00 	vldr	s6, [r4]
 8007a78:	ed95 2a00 	vldr	s4, [r5]
 8007a7c:	ed9e 0a01 	vldr	s0, [lr, #4]
 8007a80:	ee33 8a85 	vadd.f32	s16, s7, s10
 8007a84:	ee32 1a06 	vadd.f32	s2, s4, s12
 8007a88:	ee33 4a29 	vadd.f32	s8, s6, s19
 8007a8c:	ee77 4a87 	vadd.f32	s9, s15, s14
 8007a90:	ee78 1a04 	vadd.f32	s3, s16, s8
 8007a94:	ee71 6a24 	vadd.f32	s13, s2, s9
 8007a98:	ee32 2a46 	vsub.f32	s4, s4, s12
 8007a9c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8007aa0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007aa4:	ed8e 6a00 	vstr	s12, [lr]
 8007aa8:	edd0 8a01 	vldr	s17, [r0, #4]
 8007aac:	ed95 9a01 	vldr	s18, [r5, #4]
 8007ab0:	edd1 2a00 	vldr	s5, [r1]
 8007ab4:	ed97 7a00 	vldr	s14, [r7]
 8007ab8:	edd4 0a01 	vldr	s1, [r4, #4]
 8007abc:	ed96 6a01 	vldr	s12, [r6, #4]
 8007ac0:	edd2 5a00 	vldr	s11, [r2]
 8007ac4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8007ac8:	ee33 3a69 	vsub.f32	s6, s6, s19
 8007acc:	ee39 5a62 	vsub.f32	s10, s18, s5
 8007ad0:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8007ad4:	ee38 4a44 	vsub.f32	s8, s16, s8
 8007ad8:	ee38 7a87 	vadd.f32	s14, s17, s14
 8007adc:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8007ae0:	ee79 2a22 	vadd.f32	s5, s18, s5
 8007ae4:	ee75 8a69 	vsub.f32	s17, s10, s19
 8007ae8:	ee32 9a27 	vadd.f32	s18, s4, s15
 8007aec:	ee35 5a29 	vadd.f32	s10, s10, s19
 8007af0:	ee72 7a67 	vsub.f32	s15, s4, s15
 8007af4:	ee30 2a06 	vadd.f32	s4, s0, s12
 8007af8:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8007afc:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8007b00:	ee32 9a08 	vadd.f32	s18, s4, s16
 8007b04:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8007b08:	ee32 2a48 	vsub.f32	s4, s4, s16
 8007b0c:	ee71 4a64 	vsub.f32	s9, s2, s9
 8007b10:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8007b14:	ee32 1a87 	vadd.f32	s2, s5, s14
 8007b18:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8007b1c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8007b20:	ee30 6a46 	vsub.f32	s12, s0, s12
 8007b24:	ee73 0a29 	vadd.f32	s1, s6, s19
 8007b28:	ee36 0a28 	vadd.f32	s0, s12, s17
 8007b2c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8007b30:	ee32 7a64 	vsub.f32	s14, s4, s9
 8007b34:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8007b38:	ee36 6a68 	vsub.f32	s12, s12, s17
 8007b3c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8007b40:	ee75 8a85 	vadd.f32	s17, s11, s10
 8007b44:	ee74 3a22 	vadd.f32	s7, s8, s5
 8007b48:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8007b4c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8007b50:	ee79 1a41 	vsub.f32	s3, s18, s2
 8007b54:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8007b58:	ee76 5a43 	vsub.f32	s11, s12, s6
 8007b5c:	ee74 2a62 	vsub.f32	s5, s8, s5
 8007b60:	ee72 4a24 	vadd.f32	s9, s4, s9
 8007b64:	ee30 4a60 	vsub.f32	s8, s0, s1
 8007b68:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8007b6c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8007b70:	ee77 9a85 	vadd.f32	s19, s15, s10
 8007b74:	ee36 6a03 	vadd.f32	s12, s12, s6
 8007b78:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8007b7c:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8007b80:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8007b84:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8007b88:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8007b8c:	ee39 1a01 	vadd.f32	s2, s18, s2
 8007b90:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8007b94:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8007b98:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8007b9c:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8007ba0:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8007ba4:	ee35 3a03 	vadd.f32	s6, s10, s6
 8007ba8:	ee72 6a66 	vsub.f32	s13, s4, s13
 8007bac:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8007bb0:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8007bb4:	ed9d 4a02 	vldr	s8, [sp, #8]
 8007bb8:	ed8e 1a01 	vstr	s2, [lr, #4]
 8007bbc:	ee77 3a63 	vsub.f32	s7, s14, s7
 8007bc0:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8007bc4:	ed9d 7a01 	vldr	s14, [sp, #4]
 8007bc8:	ed86 3a00 	vstr	s6, [r6]
 8007bcc:	ee30 9a89 	vadd.f32	s18, s1, s18
 8007bd0:	ee32 2a05 	vadd.f32	s4, s4, s10
 8007bd4:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8007bd8:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8007bdc:	ee67 2a22 	vmul.f32	s5, s14, s5
 8007be0:	ee64 1a00 	vmul.f32	s3, s8, s0
 8007be4:	ee27 7a24 	vmul.f32	s14, s14, s9
 8007be8:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8007bec:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8007bf0:	ee64 8a28 	vmul.f32	s17, s8, s17
 8007bf4:	ed9d 4a00 	vldr	s8, [sp]
 8007bf8:	edc6 6a01 	vstr	s13, [r6, #4]
 8007bfc:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8007c00:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8007c04:	ee64 9a29 	vmul.f32	s19, s8, s19
 8007c08:	ee24 4a25 	vmul.f32	s8, s8, s11
 8007c0c:	ee30 7a87 	vadd.f32	s14, s1, s14
 8007c10:	ee74 4a84 	vadd.f32	s9, s9, s8
 8007c14:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8007c18:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8007c1c:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8007c20:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8007c24:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8007c28:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8007c2c:	ee75 1a21 	vadd.f32	s3, s10, s3
 8007c30:	ee30 0a68 	vsub.f32	s0, s0, s17
 8007c34:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8007c38:	ee70 0a84 	vadd.f32	s1, s1, s8
 8007c3c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8007c40:	44dc      	add	ip, fp
 8007c42:	45e1      	cmp	r9, ip
 8007c44:	ed84 9a00 	vstr	s18, [r4]
 8007c48:	edc4 3a01 	vstr	s7, [r4, #4]
 8007c4c:	449e      	add	lr, r3
 8007c4e:	ed02 7a01 	vstr	s14, [r2, #-4]
 8007c52:	edc2 2a00 	vstr	s5, [r2]
 8007c56:	441e      	add	r6, r3
 8007c58:	ed85 2a00 	vstr	s4, [r5]
 8007c5c:	ed85 8a01 	vstr	s16, [r5, #4]
 8007c60:	441c      	add	r4, r3
 8007c62:	ed47 1a01 	vstr	s3, [r7, #-4]
 8007c66:	ed87 0a00 	vstr	s0, [r7]
 8007c6a:	441a      	add	r2, r3
 8007c6c:	ed41 4a01 	vstr	s9, [r1, #-4]
 8007c70:	edc1 9a00 	vstr	s19, [r1]
 8007c74:	441d      	add	r5, r3
 8007c76:	edc0 0a00 	vstr	s1, [r0]
 8007c7a:	441f      	add	r7, r3
 8007c7c:	ed80 6a01 	vstr	s12, [r0, #4]
 8007c80:	4419      	add	r1, r3
 8007c82:	4418      	add	r0, r3
 8007c84:	f63f aeea 	bhi.w	8007a5c <arm_radix8_butterfly_f32+0x334>
 8007c88:	9a03      	ldr	r2, [sp, #12]
 8007c8a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007c8c:	440a      	add	r2, r1
 8007c8e:	9203      	str	r2, [sp, #12]
 8007c90:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007c92:	9a05      	ldr	r2, [sp, #20]
 8007c94:	440a      	add	r2, r1
 8007c96:	9205      	str	r2, [sp, #20]
 8007c98:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007c9a:	9a04      	ldr	r2, [sp, #16]
 8007c9c:	440a      	add	r2, r1
 8007c9e:	9204      	str	r2, [sp, #16]
 8007ca0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007ca2:	9a06      	ldr	r2, [sp, #24]
 8007ca4:	440a      	add	r2, r1
 8007ca6:	9206      	str	r2, [sp, #24]
 8007ca8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007caa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cac:	440a      	add	r2, r1
 8007cae:	9209      	str	r2, [sp, #36]	; 0x24
 8007cb0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007cb2:	9a08      	ldr	r2, [sp, #32]
 8007cb4:	440a      	add	r2, r1
 8007cb6:	9208      	str	r2, [sp, #32]
 8007cb8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007cba:	9a07      	ldr	r2, [sp, #28]
 8007cbc:	440a      	add	r2, r1
 8007cbe:	9207      	str	r2, [sp, #28]
 8007cc0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007cc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cc4:	f108 0801 	add.w	r8, r8, #1
 8007cc8:	3208      	adds	r2, #8
 8007cca:	4588      	cmp	r8, r1
 8007ccc:	920a      	str	r2, [sp, #40]	; 0x28
 8007cce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007cd0:	f47f ae75 	bne.w	80079be <arm_radix8_butterfly_f32+0x296>
 8007cd4:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	46c3      	mov	fp, r8
 8007cdc:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 8007ce0:	e532      	b.n	8007748 <arm_radix8_butterfly_f32+0x20>
 8007ce2:	b01d      	add	sp, #116	; 0x74
 8007ce4:	ecbd 8b10 	vpop	{d8-d15}
 8007ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007cec <calloc>:
 8007cec:	4b02      	ldr	r3, [pc, #8]	; (8007cf8 <calloc+0xc>)
 8007cee:	460a      	mov	r2, r1
 8007cf0:	4601      	mov	r1, r0
 8007cf2:	6818      	ldr	r0, [r3, #0]
 8007cf4:	f000 b83f 	b.w	8007d76 <_calloc_r>
 8007cf8:	2000000c 	.word	0x2000000c

08007cfc <__errno>:
 8007cfc:	4b01      	ldr	r3, [pc, #4]	; (8007d04 <__errno+0x8>)
 8007cfe:	6818      	ldr	r0, [r3, #0]
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	2000000c 	.word	0x2000000c

08007d08 <__libc_init_array>:
 8007d08:	b570      	push	{r4, r5, r6, lr}
 8007d0a:	4e0d      	ldr	r6, [pc, #52]	; (8007d40 <__libc_init_array+0x38>)
 8007d0c:	4c0d      	ldr	r4, [pc, #52]	; (8007d44 <__libc_init_array+0x3c>)
 8007d0e:	1ba4      	subs	r4, r4, r6
 8007d10:	10a4      	asrs	r4, r4, #2
 8007d12:	2500      	movs	r5, #0
 8007d14:	42a5      	cmp	r5, r4
 8007d16:	d109      	bne.n	8007d2c <__libc_init_array+0x24>
 8007d18:	4e0b      	ldr	r6, [pc, #44]	; (8007d48 <__libc_init_array+0x40>)
 8007d1a:	4c0c      	ldr	r4, [pc, #48]	; (8007d4c <__libc_init_array+0x44>)
 8007d1c:	f000 fe46 	bl	80089ac <_init>
 8007d20:	1ba4      	subs	r4, r4, r6
 8007d22:	10a4      	asrs	r4, r4, #2
 8007d24:	2500      	movs	r5, #0
 8007d26:	42a5      	cmp	r5, r4
 8007d28:	d105      	bne.n	8007d36 <__libc_init_array+0x2e>
 8007d2a:	bd70      	pop	{r4, r5, r6, pc}
 8007d2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d30:	4798      	blx	r3
 8007d32:	3501      	adds	r5, #1
 8007d34:	e7ee      	b.n	8007d14 <__libc_init_array+0xc>
 8007d36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d3a:	4798      	blx	r3
 8007d3c:	3501      	adds	r5, #1
 8007d3e:	e7f2      	b.n	8007d26 <__libc_init_array+0x1e>
 8007d40:	0801c26c 	.word	0x0801c26c
 8007d44:	0801c26c 	.word	0x0801c26c
 8007d48:	0801c26c 	.word	0x0801c26c
 8007d4c:	0801c270 	.word	0x0801c270

08007d50 <memcpy>:
 8007d50:	b510      	push	{r4, lr}
 8007d52:	1e43      	subs	r3, r0, #1
 8007d54:	440a      	add	r2, r1
 8007d56:	4291      	cmp	r1, r2
 8007d58:	d100      	bne.n	8007d5c <memcpy+0xc>
 8007d5a:	bd10      	pop	{r4, pc}
 8007d5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d64:	e7f7      	b.n	8007d56 <memcpy+0x6>

08007d66 <memset>:
 8007d66:	4402      	add	r2, r0
 8007d68:	4603      	mov	r3, r0
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d100      	bne.n	8007d70 <memset+0xa>
 8007d6e:	4770      	bx	lr
 8007d70:	f803 1b01 	strb.w	r1, [r3], #1
 8007d74:	e7f9      	b.n	8007d6a <memset+0x4>

08007d76 <_calloc_r>:
 8007d76:	b538      	push	{r3, r4, r5, lr}
 8007d78:	fb02 f401 	mul.w	r4, r2, r1
 8007d7c:	4621      	mov	r1, r4
 8007d7e:	f000 f809 	bl	8007d94 <_malloc_r>
 8007d82:	4605      	mov	r5, r0
 8007d84:	b118      	cbz	r0, 8007d8e <_calloc_r+0x18>
 8007d86:	4622      	mov	r2, r4
 8007d88:	2100      	movs	r1, #0
 8007d8a:	f7ff ffec 	bl	8007d66 <memset>
 8007d8e:	4628      	mov	r0, r5
 8007d90:	bd38      	pop	{r3, r4, r5, pc}
	...

08007d94 <_malloc_r>:
 8007d94:	b570      	push	{r4, r5, r6, lr}
 8007d96:	1ccd      	adds	r5, r1, #3
 8007d98:	f025 0503 	bic.w	r5, r5, #3
 8007d9c:	3508      	adds	r5, #8
 8007d9e:	2d0c      	cmp	r5, #12
 8007da0:	bf38      	it	cc
 8007da2:	250c      	movcc	r5, #12
 8007da4:	2d00      	cmp	r5, #0
 8007da6:	4606      	mov	r6, r0
 8007da8:	db01      	blt.n	8007dae <_malloc_r+0x1a>
 8007daa:	42a9      	cmp	r1, r5
 8007dac:	d903      	bls.n	8007db6 <_malloc_r+0x22>
 8007dae:	230c      	movs	r3, #12
 8007db0:	6033      	str	r3, [r6, #0]
 8007db2:	2000      	movs	r0, #0
 8007db4:	bd70      	pop	{r4, r5, r6, pc}
 8007db6:	f000 f857 	bl	8007e68 <__malloc_lock>
 8007dba:	4a21      	ldr	r2, [pc, #132]	; (8007e40 <_malloc_r+0xac>)
 8007dbc:	6814      	ldr	r4, [r2, #0]
 8007dbe:	4621      	mov	r1, r4
 8007dc0:	b991      	cbnz	r1, 8007de8 <_malloc_r+0x54>
 8007dc2:	4c20      	ldr	r4, [pc, #128]	; (8007e44 <_malloc_r+0xb0>)
 8007dc4:	6823      	ldr	r3, [r4, #0]
 8007dc6:	b91b      	cbnz	r3, 8007dd0 <_malloc_r+0x3c>
 8007dc8:	4630      	mov	r0, r6
 8007dca:	f000 f83d 	bl	8007e48 <_sbrk_r>
 8007dce:	6020      	str	r0, [r4, #0]
 8007dd0:	4629      	mov	r1, r5
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	f000 f838 	bl	8007e48 <_sbrk_r>
 8007dd8:	1c43      	adds	r3, r0, #1
 8007dda:	d124      	bne.n	8007e26 <_malloc_r+0x92>
 8007ddc:	230c      	movs	r3, #12
 8007dde:	6033      	str	r3, [r6, #0]
 8007de0:	4630      	mov	r0, r6
 8007de2:	f000 f842 	bl	8007e6a <__malloc_unlock>
 8007de6:	e7e4      	b.n	8007db2 <_malloc_r+0x1e>
 8007de8:	680b      	ldr	r3, [r1, #0]
 8007dea:	1b5b      	subs	r3, r3, r5
 8007dec:	d418      	bmi.n	8007e20 <_malloc_r+0x8c>
 8007dee:	2b0b      	cmp	r3, #11
 8007df0:	d90f      	bls.n	8007e12 <_malloc_r+0x7e>
 8007df2:	600b      	str	r3, [r1, #0]
 8007df4:	50cd      	str	r5, [r1, r3]
 8007df6:	18cc      	adds	r4, r1, r3
 8007df8:	4630      	mov	r0, r6
 8007dfa:	f000 f836 	bl	8007e6a <__malloc_unlock>
 8007dfe:	f104 000b 	add.w	r0, r4, #11
 8007e02:	1d23      	adds	r3, r4, #4
 8007e04:	f020 0007 	bic.w	r0, r0, #7
 8007e08:	1ac3      	subs	r3, r0, r3
 8007e0a:	d0d3      	beq.n	8007db4 <_malloc_r+0x20>
 8007e0c:	425a      	negs	r2, r3
 8007e0e:	50e2      	str	r2, [r4, r3]
 8007e10:	e7d0      	b.n	8007db4 <_malloc_r+0x20>
 8007e12:	428c      	cmp	r4, r1
 8007e14:	684b      	ldr	r3, [r1, #4]
 8007e16:	bf16      	itet	ne
 8007e18:	6063      	strne	r3, [r4, #4]
 8007e1a:	6013      	streq	r3, [r2, #0]
 8007e1c:	460c      	movne	r4, r1
 8007e1e:	e7eb      	b.n	8007df8 <_malloc_r+0x64>
 8007e20:	460c      	mov	r4, r1
 8007e22:	6849      	ldr	r1, [r1, #4]
 8007e24:	e7cc      	b.n	8007dc0 <_malloc_r+0x2c>
 8007e26:	1cc4      	adds	r4, r0, #3
 8007e28:	f024 0403 	bic.w	r4, r4, #3
 8007e2c:	42a0      	cmp	r0, r4
 8007e2e:	d005      	beq.n	8007e3c <_malloc_r+0xa8>
 8007e30:	1a21      	subs	r1, r4, r0
 8007e32:	4630      	mov	r0, r6
 8007e34:	f000 f808 	bl	8007e48 <_sbrk_r>
 8007e38:	3001      	adds	r0, #1
 8007e3a:	d0cf      	beq.n	8007ddc <_malloc_r+0x48>
 8007e3c:	6025      	str	r5, [r4, #0]
 8007e3e:	e7db      	b.n	8007df8 <_malloc_r+0x64>
 8007e40:	20000098 	.word	0x20000098
 8007e44:	2000009c 	.word	0x2000009c

08007e48 <_sbrk_r>:
 8007e48:	b538      	push	{r3, r4, r5, lr}
 8007e4a:	4c06      	ldr	r4, [pc, #24]	; (8007e64 <_sbrk_r+0x1c>)
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	4605      	mov	r5, r0
 8007e50:	4608      	mov	r0, r1
 8007e52:	6023      	str	r3, [r4, #0]
 8007e54:	f7fa fa42 	bl	80022dc <_sbrk>
 8007e58:	1c43      	adds	r3, r0, #1
 8007e5a:	d102      	bne.n	8007e62 <_sbrk_r+0x1a>
 8007e5c:	6823      	ldr	r3, [r4, #0]
 8007e5e:	b103      	cbz	r3, 8007e62 <_sbrk_r+0x1a>
 8007e60:	602b      	str	r3, [r5, #0]
 8007e62:	bd38      	pop	{r3, r4, r5, pc}
 8007e64:	200022ac 	.word	0x200022ac

08007e68 <__malloc_lock>:
 8007e68:	4770      	bx	lr

08007e6a <__malloc_unlock>:
 8007e6a:	4770      	bx	lr

08007e6c <cosf>:
 8007e6c:	ee10 3a10 	vmov	r3, s0
 8007e70:	b507      	push	{r0, r1, r2, lr}
 8007e72:	4a1c      	ldr	r2, [pc, #112]	; (8007ee4 <cosf+0x78>)
 8007e74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	dc04      	bgt.n	8007e86 <cosf+0x1a>
 8007e7c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8007ee8 <cosf+0x7c>
 8007e80:	f000 f9b4 	bl	80081ec <__kernel_cosf>
 8007e84:	e004      	b.n	8007e90 <cosf+0x24>
 8007e86:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007e8a:	db04      	blt.n	8007e96 <cosf+0x2a>
 8007e8c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007e90:	b003      	add	sp, #12
 8007e92:	f85d fb04 	ldr.w	pc, [sp], #4
 8007e96:	4668      	mov	r0, sp
 8007e98:	f000 f878 	bl	8007f8c <__ieee754_rem_pio2f>
 8007e9c:	f000 0003 	and.w	r0, r0, #3
 8007ea0:	2801      	cmp	r0, #1
 8007ea2:	d007      	beq.n	8007eb4 <cosf+0x48>
 8007ea4:	2802      	cmp	r0, #2
 8007ea6:	d00e      	beq.n	8007ec6 <cosf+0x5a>
 8007ea8:	b9a0      	cbnz	r0, 8007ed4 <cosf+0x68>
 8007eaa:	eddd 0a01 	vldr	s1, [sp, #4]
 8007eae:	ed9d 0a00 	vldr	s0, [sp]
 8007eb2:	e7e5      	b.n	8007e80 <cosf+0x14>
 8007eb4:	eddd 0a01 	vldr	s1, [sp, #4]
 8007eb8:	ed9d 0a00 	vldr	s0, [sp]
 8007ebc:	f000 fc76 	bl	80087ac <__kernel_sinf>
 8007ec0:	eeb1 0a40 	vneg.f32	s0, s0
 8007ec4:	e7e4      	b.n	8007e90 <cosf+0x24>
 8007ec6:	eddd 0a01 	vldr	s1, [sp, #4]
 8007eca:	ed9d 0a00 	vldr	s0, [sp]
 8007ece:	f000 f98d 	bl	80081ec <__kernel_cosf>
 8007ed2:	e7f5      	b.n	8007ec0 <cosf+0x54>
 8007ed4:	2001      	movs	r0, #1
 8007ed6:	eddd 0a01 	vldr	s1, [sp, #4]
 8007eda:	ed9d 0a00 	vldr	s0, [sp]
 8007ede:	f000 fc65 	bl	80087ac <__kernel_sinf>
 8007ee2:	e7d5      	b.n	8007e90 <cosf+0x24>
 8007ee4:	3f490fd8 	.word	0x3f490fd8
 8007ee8:	00000000 	.word	0x00000000

08007eec <sqrtf>:
 8007eec:	b510      	push	{r4, lr}
 8007eee:	ed2d 8b02 	vpush	{d8}
 8007ef2:	b08a      	sub	sp, #40	; 0x28
 8007ef4:	eeb0 8a40 	vmov.f32	s16, s0
 8007ef8:	f000 f974 	bl	80081e4 <__ieee754_sqrtf>
 8007efc:	4b21      	ldr	r3, [pc, #132]	; (8007f84 <sqrtf+0x98>)
 8007efe:	f993 4000 	ldrsb.w	r4, [r3]
 8007f02:	1c63      	adds	r3, r4, #1
 8007f04:	d02c      	beq.n	8007f60 <sqrtf+0x74>
 8007f06:	eeb4 8a48 	vcmp.f32	s16, s16
 8007f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f0e:	d627      	bvs.n	8007f60 <sqrtf+0x74>
 8007f10:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f18:	d522      	bpl.n	8007f60 <sqrtf+0x74>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	4b1a      	ldr	r3, [pc, #104]	; (8007f88 <sqrtf+0x9c>)
 8007f20:	9301      	str	r3, [sp, #4]
 8007f22:	ee18 0a10 	vmov	r0, s16
 8007f26:	2300      	movs	r3, #0
 8007f28:	9308      	str	r3, [sp, #32]
 8007f2a:	f7f8 fb2d 	bl	8000588 <__aeabi_f2d>
 8007f2e:	2200      	movs	r2, #0
 8007f30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f38:	2300      	movs	r3, #0
 8007f3a:	b9ac      	cbnz	r4, 8007f68 <sqrtf+0x7c>
 8007f3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007f40:	4668      	mov	r0, sp
 8007f42:	f000 fc7b 	bl	800883c <matherr>
 8007f46:	b1b8      	cbz	r0, 8007f78 <sqrtf+0x8c>
 8007f48:	9b08      	ldr	r3, [sp, #32]
 8007f4a:	b11b      	cbz	r3, 8007f54 <sqrtf+0x68>
 8007f4c:	f7ff fed6 	bl	8007cfc <__errno>
 8007f50:	9b08      	ldr	r3, [sp, #32]
 8007f52:	6003      	str	r3, [r0, #0]
 8007f54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f58:	f7f8 fd80 	bl	8000a5c <__aeabi_d2f>
 8007f5c:	ee00 0a10 	vmov	s0, r0
 8007f60:	b00a      	add	sp, #40	; 0x28
 8007f62:	ecbd 8b02 	vpop	{d8}
 8007f66:	bd10      	pop	{r4, pc}
 8007f68:	4610      	mov	r0, r2
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	f7f8 fc8e 	bl	800088c <__aeabi_ddiv>
 8007f70:	2c02      	cmp	r4, #2
 8007f72:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007f76:	d1e3      	bne.n	8007f40 <sqrtf+0x54>
 8007f78:	f7ff fec0 	bl	8007cfc <__errno>
 8007f7c:	2321      	movs	r3, #33	; 0x21
 8007f7e:	6003      	str	r3, [r0, #0]
 8007f80:	e7e2      	b.n	8007f48 <sqrtf+0x5c>
 8007f82:	bf00      	nop
 8007f84:	20000070 	.word	0x20000070
 8007f88:	0801be8c 	.word	0x0801be8c

08007f8c <__ieee754_rem_pio2f>:
 8007f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f8e:	ee10 6a10 	vmov	r6, s0
 8007f92:	4b86      	ldr	r3, [pc, #536]	; (80081ac <__ieee754_rem_pio2f+0x220>)
 8007f94:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8007f98:	429c      	cmp	r4, r3
 8007f9a:	b087      	sub	sp, #28
 8007f9c:	4605      	mov	r5, r0
 8007f9e:	dc05      	bgt.n	8007fac <__ieee754_rem_pio2f+0x20>
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	ed85 0a00 	vstr	s0, [r5]
 8007fa6:	6043      	str	r3, [r0, #4]
 8007fa8:	2000      	movs	r0, #0
 8007faa:	e020      	b.n	8007fee <__ieee754_rem_pio2f+0x62>
 8007fac:	4b80      	ldr	r3, [pc, #512]	; (80081b0 <__ieee754_rem_pio2f+0x224>)
 8007fae:	429c      	cmp	r4, r3
 8007fb0:	dc38      	bgt.n	8008024 <__ieee754_rem_pio2f+0x98>
 8007fb2:	2e00      	cmp	r6, #0
 8007fb4:	f024 040f 	bic.w	r4, r4, #15
 8007fb8:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80081b4 <__ieee754_rem_pio2f+0x228>
 8007fbc:	4b7e      	ldr	r3, [pc, #504]	; (80081b8 <__ieee754_rem_pio2f+0x22c>)
 8007fbe:	dd18      	ble.n	8007ff2 <__ieee754_rem_pio2f+0x66>
 8007fc0:	429c      	cmp	r4, r3
 8007fc2:	ee70 7a47 	vsub.f32	s15, s0, s14
 8007fc6:	bf09      	itett	eq
 8007fc8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80081bc <__ieee754_rem_pio2f+0x230>
 8007fcc:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80081c0 <__ieee754_rem_pio2f+0x234>
 8007fd0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8007fd4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80081c4 <__ieee754_rem_pio2f+0x238>
 8007fd8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007fdc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007fe0:	edc0 6a00 	vstr	s13, [r0]
 8007fe4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007fe8:	edc0 7a01 	vstr	s15, [r0, #4]
 8007fec:	2001      	movs	r0, #1
 8007fee:	b007      	add	sp, #28
 8007ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ff2:	429c      	cmp	r4, r3
 8007ff4:	ee70 7a07 	vadd.f32	s15, s0, s14
 8007ff8:	bf09      	itett	eq
 8007ffa:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80081bc <__ieee754_rem_pio2f+0x230>
 8007ffe:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80081c0 <__ieee754_rem_pio2f+0x234>
 8008002:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8008006:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80081c4 <__ieee754_rem_pio2f+0x238>
 800800a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800800e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008012:	edc0 6a00 	vstr	s13, [r0]
 8008016:	ee77 7a87 	vadd.f32	s15, s15, s14
 800801a:	edc0 7a01 	vstr	s15, [r0, #4]
 800801e:	f04f 30ff 	mov.w	r0, #4294967295
 8008022:	e7e4      	b.n	8007fee <__ieee754_rem_pio2f+0x62>
 8008024:	4b68      	ldr	r3, [pc, #416]	; (80081c8 <__ieee754_rem_pio2f+0x23c>)
 8008026:	429c      	cmp	r4, r3
 8008028:	dc71      	bgt.n	800810e <__ieee754_rem_pio2f+0x182>
 800802a:	f000 fc09 	bl	8008840 <fabsf>
 800802e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80081cc <__ieee754_rem_pio2f+0x240>
 8008032:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008036:	eee0 7a07 	vfma.f32	s15, s0, s14
 800803a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800803e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8008042:	ee17 0a90 	vmov	r0, s15
 8008046:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80081b4 <__ieee754_rem_pio2f+0x228>
 800804a:	eeb1 7a46 	vneg.f32	s14, s12
 800804e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8008052:	281f      	cmp	r0, #31
 8008054:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80081c0 <__ieee754_rem_pio2f+0x234>
 8008058:	ee66 7a27 	vmul.f32	s15, s12, s15
 800805c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008060:	ee16 3a90 	vmov	r3, s13
 8008064:	dc1c      	bgt.n	80080a0 <__ieee754_rem_pio2f+0x114>
 8008066:	1e47      	subs	r7, r0, #1
 8008068:	4959      	ldr	r1, [pc, #356]	; (80081d0 <__ieee754_rem_pio2f+0x244>)
 800806a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800806e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8008072:	428a      	cmp	r2, r1
 8008074:	d014      	beq.n	80080a0 <__ieee754_rem_pio2f+0x114>
 8008076:	602b      	str	r3, [r5, #0]
 8008078:	ed95 7a00 	vldr	s14, [r5]
 800807c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008080:	2e00      	cmp	r6, #0
 8008082:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008086:	ed85 0a01 	vstr	s0, [r5, #4]
 800808a:	dab0      	bge.n	8007fee <__ieee754_rem_pio2f+0x62>
 800808c:	eeb1 7a47 	vneg.f32	s14, s14
 8008090:	eeb1 0a40 	vneg.f32	s0, s0
 8008094:	ed85 7a00 	vstr	s14, [r5]
 8008098:	ed85 0a01 	vstr	s0, [r5, #4]
 800809c:	4240      	negs	r0, r0
 800809e:	e7a6      	b.n	8007fee <__ieee754_rem_pio2f+0x62>
 80080a0:	15e4      	asrs	r4, r4, #23
 80080a2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80080a6:	1aa2      	subs	r2, r4, r2
 80080a8:	2a08      	cmp	r2, #8
 80080aa:	dde4      	ble.n	8008076 <__ieee754_rem_pio2f+0xea>
 80080ac:	eddf 7a43 	vldr	s15, [pc, #268]	; 80081bc <__ieee754_rem_pio2f+0x230>
 80080b0:	eef0 6a40 	vmov.f32	s13, s0
 80080b4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80080b8:	ee30 0a66 	vsub.f32	s0, s0, s13
 80080bc:	eea7 0a27 	vfma.f32	s0, s14, s15
 80080c0:	eddf 7a40 	vldr	s15, [pc, #256]	; 80081c4 <__ieee754_rem_pio2f+0x238>
 80080c4:	ee96 0a27 	vfnms.f32	s0, s12, s15
 80080c8:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80080cc:	eef0 7a40 	vmov.f32	s15, s0
 80080d0:	ee15 3a90 	vmov	r3, s11
 80080d4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80080d8:	1aa4      	subs	r4, r4, r2
 80080da:	2c19      	cmp	r4, #25
 80080dc:	dc04      	bgt.n	80080e8 <__ieee754_rem_pio2f+0x15c>
 80080de:	edc5 5a00 	vstr	s11, [r5]
 80080e2:	eeb0 0a66 	vmov.f32	s0, s13
 80080e6:	e7c7      	b.n	8008078 <__ieee754_rem_pio2f+0xec>
 80080e8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80081d4 <__ieee754_rem_pio2f+0x248>
 80080ec:	eeb0 0a66 	vmov.f32	s0, s13
 80080f0:	eea7 0a25 	vfma.f32	s0, s14, s11
 80080f4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80080f8:	eee7 7a25 	vfma.f32	s15, s14, s11
 80080fc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80081d8 <__ieee754_rem_pio2f+0x24c>
 8008100:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8008104:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008108:	ed85 7a00 	vstr	s14, [r5]
 800810c:	e7b4      	b.n	8008078 <__ieee754_rem_pio2f+0xec>
 800810e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008112:	db06      	blt.n	8008122 <__ieee754_rem_pio2f+0x196>
 8008114:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008118:	edc0 7a01 	vstr	s15, [r0, #4]
 800811c:	edc0 7a00 	vstr	s15, [r0]
 8008120:	e742      	b.n	8007fa8 <__ieee754_rem_pio2f+0x1c>
 8008122:	15e2      	asrs	r2, r4, #23
 8008124:	3a86      	subs	r2, #134	; 0x86
 8008126:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800812a:	ee07 3a90 	vmov	s15, r3
 800812e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008132:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80081dc <__ieee754_rem_pio2f+0x250>
 8008136:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800813a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800813e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8008142:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008146:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800814a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800814e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008152:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008156:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800815a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800815e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008162:	edcd 7a05 	vstr	s15, [sp, #20]
 8008166:	d11e      	bne.n	80081a6 <__ieee754_rem_pio2f+0x21a>
 8008168:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800816c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008170:	bf0c      	ite	eq
 8008172:	2301      	moveq	r3, #1
 8008174:	2302      	movne	r3, #2
 8008176:	491a      	ldr	r1, [pc, #104]	; (80081e0 <__ieee754_rem_pio2f+0x254>)
 8008178:	9101      	str	r1, [sp, #4]
 800817a:	2102      	movs	r1, #2
 800817c:	9100      	str	r1, [sp, #0]
 800817e:	a803      	add	r0, sp, #12
 8008180:	4629      	mov	r1, r5
 8008182:	f000 f891 	bl	80082a8 <__kernel_rem_pio2f>
 8008186:	2e00      	cmp	r6, #0
 8008188:	f6bf af31 	bge.w	8007fee <__ieee754_rem_pio2f+0x62>
 800818c:	edd5 7a00 	vldr	s15, [r5]
 8008190:	eef1 7a67 	vneg.f32	s15, s15
 8008194:	edc5 7a00 	vstr	s15, [r5]
 8008198:	edd5 7a01 	vldr	s15, [r5, #4]
 800819c:	eef1 7a67 	vneg.f32	s15, s15
 80081a0:	edc5 7a01 	vstr	s15, [r5, #4]
 80081a4:	e77a      	b.n	800809c <__ieee754_rem_pio2f+0x110>
 80081a6:	2303      	movs	r3, #3
 80081a8:	e7e5      	b.n	8008176 <__ieee754_rem_pio2f+0x1ea>
 80081aa:	bf00      	nop
 80081ac:	3f490fd8 	.word	0x3f490fd8
 80081b0:	4016cbe3 	.word	0x4016cbe3
 80081b4:	3fc90f80 	.word	0x3fc90f80
 80081b8:	3fc90fd0 	.word	0x3fc90fd0
 80081bc:	37354400 	.word	0x37354400
 80081c0:	37354443 	.word	0x37354443
 80081c4:	2e85a308 	.word	0x2e85a308
 80081c8:	43490f80 	.word	0x43490f80
 80081cc:	3f22f984 	.word	0x3f22f984
 80081d0:	0801be94 	.word	0x0801be94
 80081d4:	2e85a300 	.word	0x2e85a300
 80081d8:	248d3132 	.word	0x248d3132
 80081dc:	43800000 	.word	0x43800000
 80081e0:	0801bf14 	.word	0x0801bf14

080081e4 <__ieee754_sqrtf>:
 80081e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80081e8:	4770      	bx	lr
	...

080081ec <__kernel_cosf>:
 80081ec:	ee10 3a10 	vmov	r3, s0
 80081f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081f4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80081f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081fc:	da05      	bge.n	800820a <__kernel_cosf+0x1e>
 80081fe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008202:	ee17 2a90 	vmov	r2, s15
 8008206:	2a00      	cmp	r2, #0
 8008208:	d03b      	beq.n	8008282 <__kernel_cosf+0x96>
 800820a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800820e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008212:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008288 <__kernel_cosf+0x9c>
 8008216:	4a1d      	ldr	r2, [pc, #116]	; (800828c <__kernel_cosf+0xa0>)
 8008218:	ee66 7a07 	vmul.f32	s15, s12, s14
 800821c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8008290 <__kernel_cosf+0xa4>
 8008220:	eea6 7a25 	vfma.f32	s14, s12, s11
 8008224:	4293      	cmp	r3, r2
 8008226:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8008294 <__kernel_cosf+0xa8>
 800822a:	eee7 5a06 	vfma.f32	s11, s14, s12
 800822e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8008298 <__kernel_cosf+0xac>
 8008232:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008236:	eddf 5a19 	vldr	s11, [pc, #100]	; 800829c <__kernel_cosf+0xb0>
 800823a:	eee7 5a06 	vfma.f32	s11, s14, s12
 800823e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80082a0 <__kernel_cosf+0xb4>
 8008242:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008246:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800824a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800824e:	eee6 0a07 	vfma.f32	s1, s12, s14
 8008252:	dc04      	bgt.n	800825e <__kernel_cosf+0x72>
 8008254:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8008258:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800825c:	4770      	bx	lr
 800825e:	4a11      	ldr	r2, [pc, #68]	; (80082a4 <__kernel_cosf+0xb8>)
 8008260:	4293      	cmp	r3, r2
 8008262:	bfda      	itte	le
 8008264:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8008268:	ee07 3a10 	vmovle	s14, r3
 800826c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8008270:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008274:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8008278:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800827c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008280:	4770      	bx	lr
 8008282:	eeb0 0a66 	vmov.f32	s0, s13
 8008286:	4770      	bx	lr
 8008288:	ad47d74e 	.word	0xad47d74e
 800828c:	3e999999 	.word	0x3e999999
 8008290:	310f74f6 	.word	0x310f74f6
 8008294:	b493f27c 	.word	0xb493f27c
 8008298:	37d00d01 	.word	0x37d00d01
 800829c:	bab60b61 	.word	0xbab60b61
 80082a0:	3d2aaaab 	.word	0x3d2aaaab
 80082a4:	3f480000 	.word	0x3f480000

080082a8 <__kernel_rem_pio2f>:
 80082a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ac:	ed2d 8b04 	vpush	{d8-d9}
 80082b0:	b0d7      	sub	sp, #348	; 0x15c
 80082b2:	469b      	mov	fp, r3
 80082b4:	460e      	mov	r6, r1
 80082b6:	4bbe      	ldr	r3, [pc, #760]	; (80085b0 <__kernel_rem_pio2f+0x308>)
 80082b8:	9964      	ldr	r1, [sp, #400]	; 0x190
 80082ba:	9002      	str	r0, [sp, #8]
 80082bc:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80082c0:	9865      	ldr	r0, [sp, #404]	; 0x194
 80082c2:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80085c0 <__kernel_rem_pio2f+0x318>
 80082c6:	1ed1      	subs	r1, r2, #3
 80082c8:	2308      	movs	r3, #8
 80082ca:	fb91 f1f3 	sdiv	r1, r1, r3
 80082ce:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80082d2:	f10b 3aff 	add.w	sl, fp, #4294967295
 80082d6:	1c4c      	adds	r4, r1, #1
 80082d8:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 80082dc:	eba1 050a 	sub.w	r5, r1, sl
 80082e0:	aa1a      	add	r2, sp, #104	; 0x68
 80082e2:	eb09 070a 	add.w	r7, r9, sl
 80082e6:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 80082ea:	4696      	mov	lr, r2
 80082ec:	2300      	movs	r3, #0
 80082ee:	42bb      	cmp	r3, r7
 80082f0:	dd0f      	ble.n	8008312 <__kernel_rem_pio2f+0x6a>
 80082f2:	af42      	add	r7, sp, #264	; 0x108
 80082f4:	2200      	movs	r2, #0
 80082f6:	454a      	cmp	r2, r9
 80082f8:	dc27      	bgt.n	800834a <__kernel_rem_pio2f+0xa2>
 80082fa:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 80082fe:	eb0b 0302 	add.w	r3, fp, r2
 8008302:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8008306:	9d02      	ldr	r5, [sp, #8]
 8008308:	eddf 7aad 	vldr	s15, [pc, #692]	; 80085c0 <__kernel_rem_pio2f+0x318>
 800830c:	f04f 0c00 	mov.w	ip, #0
 8008310:	e015      	b.n	800833e <__kernel_rem_pio2f+0x96>
 8008312:	42dd      	cmn	r5, r3
 8008314:	bf5d      	ittte	pl
 8008316:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800831a:	ee07 2a90 	vmovpl	s15, r2
 800831e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008322:	eef0 7a47 	vmovmi.f32	s15, s14
 8008326:	ecee 7a01 	vstmia	lr!, {s15}
 800832a:	3301      	adds	r3, #1
 800832c:	e7df      	b.n	80082ee <__kernel_rem_pio2f+0x46>
 800832e:	ecf5 6a01 	vldmia	r5!, {s13}
 8008332:	ed33 7a01 	vldmdb	r3!, {s14}
 8008336:	eee6 7a87 	vfma.f32	s15, s13, s14
 800833a:	f10c 0c01 	add.w	ip, ip, #1
 800833e:	45d4      	cmp	ip, sl
 8008340:	ddf5      	ble.n	800832e <__kernel_rem_pio2f+0x86>
 8008342:	ece7 7a01 	vstmia	r7!, {s15}
 8008346:	3201      	adds	r2, #1
 8008348:	e7d5      	b.n	80082f6 <__kernel_rem_pio2f+0x4e>
 800834a:	ab06      	add	r3, sp, #24
 800834c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8008350:	9304      	str	r3, [sp, #16]
 8008352:	eddf 8a9a 	vldr	s17, [pc, #616]	; 80085bc <__kernel_rem_pio2f+0x314>
 8008356:	ed9f 9a98 	vldr	s18, [pc, #608]	; 80085b8 <__kernel_rem_pio2f+0x310>
 800835a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800835e:	9303      	str	r3, [sp, #12]
 8008360:	464d      	mov	r5, r9
 8008362:	ab56      	add	r3, sp, #344	; 0x158
 8008364:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8008368:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800836c:	3f01      	subs	r7, #1
 800836e:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8008372:	00bf      	lsls	r7, r7, #2
 8008374:	ab56      	add	r3, sp, #344	; 0x158
 8008376:	19da      	adds	r2, r3, r7
 8008378:	3a4c      	subs	r2, #76	; 0x4c
 800837a:	2300      	movs	r3, #0
 800837c:	1ae9      	subs	r1, r5, r3
 800837e:	2900      	cmp	r1, #0
 8008380:	dc4c      	bgt.n	800841c <__kernel_rem_pio2f+0x174>
 8008382:	4620      	mov	r0, r4
 8008384:	f000 faa6 	bl	80088d4 <scalbnf>
 8008388:	eeb0 8a40 	vmov.f32	s16, s0
 800838c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008390:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008394:	f000 fa5c 	bl	8008850 <floorf>
 8008398:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800839c:	eea0 8a67 	vfms.f32	s16, s0, s15
 80083a0:	2c00      	cmp	r4, #0
 80083a2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80083a6:	edcd 7a01 	vstr	s15, [sp, #4]
 80083aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083ae:	ee38 8a67 	vsub.f32	s16, s16, s15
 80083b2:	dd48      	ble.n	8008446 <__kernel_rem_pio2f+0x19e>
 80083b4:	1e69      	subs	r1, r5, #1
 80083b6:	ab06      	add	r3, sp, #24
 80083b8:	f1c4 0008 	rsb	r0, r4, #8
 80083bc:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 80083c0:	9a01      	ldr	r2, [sp, #4]
 80083c2:	fa4c f300 	asr.w	r3, ip, r0
 80083c6:	441a      	add	r2, r3
 80083c8:	4083      	lsls	r3, r0
 80083ca:	9201      	str	r2, [sp, #4]
 80083cc:	ebac 0203 	sub.w	r2, ip, r3
 80083d0:	ab06      	add	r3, sp, #24
 80083d2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80083d6:	f1c4 0307 	rsb	r3, r4, #7
 80083da:	fa42 f803 	asr.w	r8, r2, r3
 80083de:	f1b8 0f00 	cmp.w	r8, #0
 80083e2:	dd41      	ble.n	8008468 <__kernel_rem_pio2f+0x1c0>
 80083e4:	9b01      	ldr	r3, [sp, #4]
 80083e6:	2000      	movs	r0, #0
 80083e8:	3301      	adds	r3, #1
 80083ea:	9301      	str	r3, [sp, #4]
 80083ec:	4601      	mov	r1, r0
 80083ee:	4285      	cmp	r5, r0
 80083f0:	dc6d      	bgt.n	80084ce <__kernel_rem_pio2f+0x226>
 80083f2:	2c00      	cmp	r4, #0
 80083f4:	dd04      	ble.n	8008400 <__kernel_rem_pio2f+0x158>
 80083f6:	2c01      	cmp	r4, #1
 80083f8:	d07e      	beq.n	80084f8 <__kernel_rem_pio2f+0x250>
 80083fa:	2c02      	cmp	r4, #2
 80083fc:	f000 8086 	beq.w	800850c <__kernel_rem_pio2f+0x264>
 8008400:	f1b8 0f02 	cmp.w	r8, #2
 8008404:	d130      	bne.n	8008468 <__kernel_rem_pio2f+0x1c0>
 8008406:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800840a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800840e:	b359      	cbz	r1, 8008468 <__kernel_rem_pio2f+0x1c0>
 8008410:	4620      	mov	r0, r4
 8008412:	f000 fa5f 	bl	80088d4 <scalbnf>
 8008416:	ee38 8a40 	vsub.f32	s16, s16, s0
 800841a:	e025      	b.n	8008468 <__kernel_rem_pio2f+0x1c0>
 800841c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008420:	a806      	add	r0, sp, #24
 8008422:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800842a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800842e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008432:	ee10 1a10 	vmov	r1, s0
 8008436:	ed32 0a01 	vldmdb	r2!, {s0}
 800843a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800843e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008442:	3301      	adds	r3, #1
 8008444:	e79a      	b.n	800837c <__kernel_rem_pio2f+0xd4>
 8008446:	d106      	bne.n	8008456 <__kernel_rem_pio2f+0x1ae>
 8008448:	1e6b      	subs	r3, r5, #1
 800844a:	aa06      	add	r2, sp, #24
 800844c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008450:	ea4f 2822 	mov.w	r8, r2, asr #8
 8008454:	e7c3      	b.n	80083de <__kernel_rem_pio2f+0x136>
 8008456:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800845a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800845e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008462:	da31      	bge.n	80084c8 <__kernel_rem_pio2f+0x220>
 8008464:	f04f 0800 	mov.w	r8, #0
 8008468:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800846c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008470:	f040 80a8 	bne.w	80085c4 <__kernel_rem_pio2f+0x31c>
 8008474:	1e6b      	subs	r3, r5, #1
 8008476:	4618      	mov	r0, r3
 8008478:	2200      	movs	r2, #0
 800847a:	4548      	cmp	r0, r9
 800847c:	da4d      	bge.n	800851a <__kernel_rem_pio2f+0x272>
 800847e:	2a00      	cmp	r2, #0
 8008480:	f000 8087 	beq.w	8008592 <__kernel_rem_pio2f+0x2ea>
 8008484:	aa06      	add	r2, sp, #24
 8008486:	3c08      	subs	r4, #8
 8008488:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800848c:	2900      	cmp	r1, #0
 800848e:	f000 808d 	beq.w	80085ac <__kernel_rem_pio2f+0x304>
 8008492:	4620      	mov	r0, r4
 8008494:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008498:	9302      	str	r3, [sp, #8]
 800849a:	f000 fa1b 	bl	80088d4 <scalbnf>
 800849e:	9b02      	ldr	r3, [sp, #8]
 80084a0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80085bc <__kernel_rem_pio2f+0x314>
 80084a4:	0099      	lsls	r1, r3, #2
 80084a6:	aa42      	add	r2, sp, #264	; 0x108
 80084a8:	1850      	adds	r0, r2, r1
 80084aa:	1d05      	adds	r5, r0, #4
 80084ac:	461c      	mov	r4, r3
 80084ae:	2c00      	cmp	r4, #0
 80084b0:	f280 80b8 	bge.w	8008624 <__kernel_rem_pio2f+0x37c>
 80084b4:	2500      	movs	r5, #0
 80084b6:	1b5c      	subs	r4, r3, r5
 80084b8:	2c00      	cmp	r4, #0
 80084ba:	f2c0 80d8 	blt.w	800866e <__kernel_rem_pio2f+0x3c6>
 80084be:	4f3d      	ldr	r7, [pc, #244]	; (80085b4 <__kernel_rem_pio2f+0x30c>)
 80084c0:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80085c0 <__kernel_rem_pio2f+0x318>
 80084c4:	2400      	movs	r4, #0
 80084c6:	e0c6      	b.n	8008656 <__kernel_rem_pio2f+0x3ae>
 80084c8:	f04f 0802 	mov.w	r8, #2
 80084cc:	e78a      	b.n	80083e4 <__kernel_rem_pio2f+0x13c>
 80084ce:	ab06      	add	r3, sp, #24
 80084d0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80084d4:	b949      	cbnz	r1, 80084ea <__kernel_rem_pio2f+0x242>
 80084d6:	b12b      	cbz	r3, 80084e4 <__kernel_rem_pio2f+0x23c>
 80084d8:	aa06      	add	r2, sp, #24
 80084da:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80084de:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80084e2:	2301      	movs	r3, #1
 80084e4:	3001      	adds	r0, #1
 80084e6:	4619      	mov	r1, r3
 80084e8:	e781      	b.n	80083ee <__kernel_rem_pio2f+0x146>
 80084ea:	aa06      	add	r2, sp, #24
 80084ec:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80084f0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80084f4:	460b      	mov	r3, r1
 80084f6:	e7f5      	b.n	80084e4 <__kernel_rem_pio2f+0x23c>
 80084f8:	1e68      	subs	r0, r5, #1
 80084fa:	ab06      	add	r3, sp, #24
 80084fc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008504:	aa06      	add	r2, sp, #24
 8008506:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800850a:	e779      	b.n	8008400 <__kernel_rem_pio2f+0x158>
 800850c:	1e68      	subs	r0, r5, #1
 800850e:	ab06      	add	r3, sp, #24
 8008510:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008518:	e7f4      	b.n	8008504 <__kernel_rem_pio2f+0x25c>
 800851a:	a906      	add	r1, sp, #24
 800851c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8008520:	3801      	subs	r0, #1
 8008522:	430a      	orrs	r2, r1
 8008524:	e7a9      	b.n	800847a <__kernel_rem_pio2f+0x1d2>
 8008526:	f10c 0c01 	add.w	ip, ip, #1
 800852a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800852e:	2a00      	cmp	r2, #0
 8008530:	d0f9      	beq.n	8008526 <__kernel_rem_pio2f+0x27e>
 8008532:	eb0b 0305 	add.w	r3, fp, r5
 8008536:	aa1a      	add	r2, sp, #104	; 0x68
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	1898      	adds	r0, r3, r2
 800853c:	3004      	adds	r0, #4
 800853e:	1c69      	adds	r1, r5, #1
 8008540:	3704      	adds	r7, #4
 8008542:	2200      	movs	r2, #0
 8008544:	4465      	add	r5, ip
 8008546:	9005      	str	r0, [sp, #20]
 8008548:	428d      	cmp	r5, r1
 800854a:	f6ff af0a 	blt.w	8008362 <__kernel_rem_pio2f+0xba>
 800854e:	a81a      	add	r0, sp, #104	; 0x68
 8008550:	eb02 0c03 	add.w	ip, r2, r3
 8008554:	4484      	add	ip, r0
 8008556:	9803      	ldr	r0, [sp, #12]
 8008558:	f8dd e008 	ldr.w	lr, [sp, #8]
 800855c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8008560:	9001      	str	r0, [sp, #4]
 8008562:	ee07 0a90 	vmov	s15, r0
 8008566:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800856a:	9805      	ldr	r0, [sp, #20]
 800856c:	edcc 7a00 	vstr	s15, [ip]
 8008570:	eddf 7a13 	vldr	s15, [pc, #76]	; 80085c0 <__kernel_rem_pio2f+0x318>
 8008574:	eb00 0802 	add.w	r8, r0, r2
 8008578:	f04f 0c00 	mov.w	ip, #0
 800857c:	45d4      	cmp	ip, sl
 800857e:	dd0c      	ble.n	800859a <__kernel_rem_pio2f+0x2f2>
 8008580:	eb02 0c07 	add.w	ip, r2, r7
 8008584:	a842      	add	r0, sp, #264	; 0x108
 8008586:	4484      	add	ip, r0
 8008588:	edcc 7a01 	vstr	s15, [ip, #4]
 800858c:	3101      	adds	r1, #1
 800858e:	3204      	adds	r2, #4
 8008590:	e7da      	b.n	8008548 <__kernel_rem_pio2f+0x2a0>
 8008592:	9b04      	ldr	r3, [sp, #16]
 8008594:	f04f 0c01 	mov.w	ip, #1
 8008598:	e7c7      	b.n	800852a <__kernel_rem_pio2f+0x282>
 800859a:	ecfe 6a01 	vldmia	lr!, {s13}
 800859e:	ed38 7a01 	vldmdb	r8!, {s14}
 80085a2:	f10c 0c01 	add.w	ip, ip, #1
 80085a6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80085aa:	e7e7      	b.n	800857c <__kernel_rem_pio2f+0x2d4>
 80085ac:	3b01      	subs	r3, #1
 80085ae:	e769      	b.n	8008484 <__kernel_rem_pio2f+0x1dc>
 80085b0:	0801c258 	.word	0x0801c258
 80085b4:	0801c22c 	.word	0x0801c22c
 80085b8:	43800000 	.word	0x43800000
 80085bc:	3b800000 	.word	0x3b800000
 80085c0:	00000000 	.word	0x00000000
 80085c4:	4260      	negs	r0, r4
 80085c6:	eeb0 0a48 	vmov.f32	s0, s16
 80085ca:	f000 f983 	bl	80088d4 <scalbnf>
 80085ce:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80085b8 <__kernel_rem_pio2f+0x310>
 80085d2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80085d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085da:	db1a      	blt.n	8008612 <__kernel_rem_pio2f+0x36a>
 80085dc:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80085bc <__kernel_rem_pio2f+0x314>
 80085e0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80085e4:	aa06      	add	r2, sp, #24
 80085e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085ea:	a906      	add	r1, sp, #24
 80085ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085f0:	3408      	adds	r4, #8
 80085f2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80085f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085fa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80085fe:	ee10 3a10 	vmov	r3, s0
 8008602:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8008606:	1c6b      	adds	r3, r5, #1
 8008608:	ee17 2a90 	vmov	r2, s15
 800860c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008610:	e73f      	b.n	8008492 <__kernel_rem_pio2f+0x1ea>
 8008612:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008616:	aa06      	add	r2, sp, #24
 8008618:	ee10 3a10 	vmov	r3, s0
 800861c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8008620:	462b      	mov	r3, r5
 8008622:	e736      	b.n	8008492 <__kernel_rem_pio2f+0x1ea>
 8008624:	aa06      	add	r2, sp, #24
 8008626:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800862a:	9202      	str	r2, [sp, #8]
 800862c:	ee07 2a90 	vmov	s15, r2
 8008630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008634:	3c01      	subs	r4, #1
 8008636:	ee67 7a80 	vmul.f32	s15, s15, s0
 800863a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800863e:	ed65 7a01 	vstmdb	r5!, {s15}
 8008642:	e734      	b.n	80084ae <__kernel_rem_pio2f+0x206>
 8008644:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8008648:	ecf7 6a01 	vldmia	r7!, {s13}
 800864c:	ed9c 7a00 	vldr	s14, [ip]
 8008650:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008654:	3401      	adds	r4, #1
 8008656:	454c      	cmp	r4, r9
 8008658:	dc01      	bgt.n	800865e <__kernel_rem_pio2f+0x3b6>
 800865a:	42a5      	cmp	r5, r4
 800865c:	daf2      	bge.n	8008644 <__kernel_rem_pio2f+0x39c>
 800865e:	aa56      	add	r2, sp, #344	; 0x158
 8008660:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8008664:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8008668:	3501      	adds	r5, #1
 800866a:	3804      	subs	r0, #4
 800866c:	e723      	b.n	80084b6 <__kernel_rem_pio2f+0x20e>
 800866e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8008670:	2a03      	cmp	r2, #3
 8008672:	d84d      	bhi.n	8008710 <__kernel_rem_pio2f+0x468>
 8008674:	e8df f002 	tbb	[pc, r2]
 8008678:	021f1f3e 	.word	0x021f1f3e
 800867c:	aa56      	add	r2, sp, #344	; 0x158
 800867e:	4411      	add	r1, r2
 8008680:	399c      	subs	r1, #156	; 0x9c
 8008682:	4608      	mov	r0, r1
 8008684:	461c      	mov	r4, r3
 8008686:	2c00      	cmp	r4, #0
 8008688:	dc5f      	bgt.n	800874a <__kernel_rem_pio2f+0x4a2>
 800868a:	4608      	mov	r0, r1
 800868c:	461c      	mov	r4, r3
 800868e:	2c01      	cmp	r4, #1
 8008690:	dc6b      	bgt.n	800876a <__kernel_rem_pio2f+0x4c2>
 8008692:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 80085c0 <__kernel_rem_pio2f+0x318>
 8008696:	2b01      	cmp	r3, #1
 8008698:	dc77      	bgt.n	800878a <__kernel_rem_pio2f+0x4e2>
 800869a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800869e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80086a2:	f1b8 0f00 	cmp.w	r8, #0
 80086a6:	d176      	bne.n	8008796 <__kernel_rem_pio2f+0x4ee>
 80086a8:	edc6 6a00 	vstr	s13, [r6]
 80086ac:	ed86 7a01 	vstr	s14, [r6, #4]
 80086b0:	edc6 7a02 	vstr	s15, [r6, #8]
 80086b4:	e02c      	b.n	8008710 <__kernel_rem_pio2f+0x468>
 80086b6:	aa56      	add	r2, sp, #344	; 0x158
 80086b8:	4411      	add	r1, r2
 80086ba:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 80085c0 <__kernel_rem_pio2f+0x318>
 80086be:	399c      	subs	r1, #156	; 0x9c
 80086c0:	4618      	mov	r0, r3
 80086c2:	2800      	cmp	r0, #0
 80086c4:	da32      	bge.n	800872c <__kernel_rem_pio2f+0x484>
 80086c6:	f1b8 0f00 	cmp.w	r8, #0
 80086ca:	d035      	beq.n	8008738 <__kernel_rem_pio2f+0x490>
 80086cc:	eef1 7a47 	vneg.f32	s15, s14
 80086d0:	edc6 7a00 	vstr	s15, [r6]
 80086d4:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80086d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80086dc:	a82f      	add	r0, sp, #188	; 0xbc
 80086de:	2101      	movs	r1, #1
 80086e0:	428b      	cmp	r3, r1
 80086e2:	da2c      	bge.n	800873e <__kernel_rem_pio2f+0x496>
 80086e4:	f1b8 0f00 	cmp.w	r8, #0
 80086e8:	d001      	beq.n	80086ee <__kernel_rem_pio2f+0x446>
 80086ea:	eef1 7a67 	vneg.f32	s15, s15
 80086ee:	edc6 7a01 	vstr	s15, [r6, #4]
 80086f2:	e00d      	b.n	8008710 <__kernel_rem_pio2f+0x468>
 80086f4:	aa56      	add	r2, sp, #344	; 0x158
 80086f6:	4411      	add	r1, r2
 80086f8:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80085c0 <__kernel_rem_pio2f+0x318>
 80086fc:	399c      	subs	r1, #156	; 0x9c
 80086fe:	2b00      	cmp	r3, #0
 8008700:	da0e      	bge.n	8008720 <__kernel_rem_pio2f+0x478>
 8008702:	f1b8 0f00 	cmp.w	r8, #0
 8008706:	d001      	beq.n	800870c <__kernel_rem_pio2f+0x464>
 8008708:	eef1 7a67 	vneg.f32	s15, s15
 800870c:	edc6 7a00 	vstr	s15, [r6]
 8008710:	9b01      	ldr	r3, [sp, #4]
 8008712:	f003 0007 	and.w	r0, r3, #7
 8008716:	b057      	add	sp, #348	; 0x15c
 8008718:	ecbd 8b04 	vpop	{d8-d9}
 800871c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008720:	ed31 7a01 	vldmdb	r1!, {s14}
 8008724:	3b01      	subs	r3, #1
 8008726:	ee77 7a87 	vadd.f32	s15, s15, s14
 800872a:	e7e8      	b.n	80086fe <__kernel_rem_pio2f+0x456>
 800872c:	ed71 7a01 	vldmdb	r1!, {s15}
 8008730:	3801      	subs	r0, #1
 8008732:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008736:	e7c4      	b.n	80086c2 <__kernel_rem_pio2f+0x41a>
 8008738:	eef0 7a47 	vmov.f32	s15, s14
 800873c:	e7c8      	b.n	80086d0 <__kernel_rem_pio2f+0x428>
 800873e:	ecb0 7a01 	vldmia	r0!, {s14}
 8008742:	3101      	adds	r1, #1
 8008744:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008748:	e7ca      	b.n	80086e0 <__kernel_rem_pio2f+0x438>
 800874a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800874e:	ed70 6a01 	vldmdb	r0!, {s13}
 8008752:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008756:	3c01      	subs	r4, #1
 8008758:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800875c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8008760:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008764:	edc0 7a00 	vstr	s15, [r0]
 8008768:	e78d      	b.n	8008686 <__kernel_rem_pio2f+0x3de>
 800876a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800876e:	ed70 6a01 	vldmdb	r0!, {s13}
 8008772:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008776:	3c01      	subs	r4, #1
 8008778:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800877c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8008780:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008784:	edc0 7a00 	vstr	s15, [r0]
 8008788:	e781      	b.n	800868e <__kernel_rem_pio2f+0x3e6>
 800878a:	ed31 7a01 	vldmdb	r1!, {s14}
 800878e:	3b01      	subs	r3, #1
 8008790:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008794:	e77f      	b.n	8008696 <__kernel_rem_pio2f+0x3ee>
 8008796:	eef1 6a66 	vneg.f32	s13, s13
 800879a:	eeb1 7a47 	vneg.f32	s14, s14
 800879e:	edc6 6a00 	vstr	s13, [r6]
 80087a2:	ed86 7a01 	vstr	s14, [r6, #4]
 80087a6:	eef1 7a67 	vneg.f32	s15, s15
 80087aa:	e781      	b.n	80086b0 <__kernel_rem_pio2f+0x408>

080087ac <__kernel_sinf>:
 80087ac:	ee10 3a10 	vmov	r3, s0
 80087b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087b4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80087b8:	da04      	bge.n	80087c4 <__kernel_sinf+0x18>
 80087ba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80087be:	ee17 3a90 	vmov	r3, s15
 80087c2:	b35b      	cbz	r3, 800881c <__kernel_sinf+0x70>
 80087c4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80087c8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008820 <__kernel_sinf+0x74>
 80087cc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8008824 <__kernel_sinf+0x78>
 80087d0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80087d4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008828 <__kernel_sinf+0x7c>
 80087d8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80087dc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800882c <__kernel_sinf+0x80>
 80087e0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80087e4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008830 <__kernel_sinf+0x84>
 80087e8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80087ec:	eee6 7a07 	vfma.f32	s15, s12, s14
 80087f0:	b930      	cbnz	r0, 8008800 <__kernel_sinf+0x54>
 80087f2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008834 <__kernel_sinf+0x88>
 80087f6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80087fa:	eea6 0a26 	vfma.f32	s0, s12, s13
 80087fe:	4770      	bx	lr
 8008800:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008804:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008808:	eee0 7a86 	vfma.f32	s15, s1, s12
 800880c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008810:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008838 <__kernel_sinf+0x8c>
 8008814:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008818:	ee30 0a60 	vsub.f32	s0, s0, s1
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	2f2ec9d3 	.word	0x2f2ec9d3
 8008824:	b2d72f34 	.word	0xb2d72f34
 8008828:	3638ef1b 	.word	0x3638ef1b
 800882c:	b9500d01 	.word	0xb9500d01
 8008830:	3c088889 	.word	0x3c088889
 8008834:	be2aaaab 	.word	0xbe2aaaab
 8008838:	3e2aaaab 	.word	0x3e2aaaab

0800883c <matherr>:
 800883c:	2000      	movs	r0, #0
 800883e:	4770      	bx	lr

08008840 <fabsf>:
 8008840:	ee10 3a10 	vmov	r3, s0
 8008844:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008848:	ee00 3a10 	vmov	s0, r3
 800884c:	4770      	bx	lr
	...

08008850 <floorf>:
 8008850:	ee10 3a10 	vmov	r3, s0
 8008854:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008858:	0dca      	lsrs	r2, r1, #23
 800885a:	3a7f      	subs	r2, #127	; 0x7f
 800885c:	2a16      	cmp	r2, #22
 800885e:	dc2a      	bgt.n	80088b6 <floorf+0x66>
 8008860:	2a00      	cmp	r2, #0
 8008862:	da11      	bge.n	8008888 <floorf+0x38>
 8008864:	eddf 7a18 	vldr	s15, [pc, #96]	; 80088c8 <floorf+0x78>
 8008868:	ee30 0a27 	vadd.f32	s0, s0, s15
 800886c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008874:	dd05      	ble.n	8008882 <floorf+0x32>
 8008876:	2b00      	cmp	r3, #0
 8008878:	da23      	bge.n	80088c2 <floorf+0x72>
 800887a:	4a14      	ldr	r2, [pc, #80]	; (80088cc <floorf+0x7c>)
 800887c:	2900      	cmp	r1, #0
 800887e:	bf18      	it	ne
 8008880:	4613      	movne	r3, r2
 8008882:	ee00 3a10 	vmov	s0, r3
 8008886:	4770      	bx	lr
 8008888:	4911      	ldr	r1, [pc, #68]	; (80088d0 <floorf+0x80>)
 800888a:	4111      	asrs	r1, r2
 800888c:	420b      	tst	r3, r1
 800888e:	d0fa      	beq.n	8008886 <floorf+0x36>
 8008890:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80088c8 <floorf+0x78>
 8008894:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008898:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800889c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088a0:	ddef      	ble.n	8008882 <floorf+0x32>
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	bfbe      	ittt	lt
 80088a6:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80088aa:	fa40 f202 	asrlt.w	r2, r0, r2
 80088ae:	189b      	addlt	r3, r3, r2
 80088b0:	ea23 0301 	bic.w	r3, r3, r1
 80088b4:	e7e5      	b.n	8008882 <floorf+0x32>
 80088b6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80088ba:	d3e4      	bcc.n	8008886 <floorf+0x36>
 80088bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80088c0:	4770      	bx	lr
 80088c2:	2300      	movs	r3, #0
 80088c4:	e7dd      	b.n	8008882 <floorf+0x32>
 80088c6:	bf00      	nop
 80088c8:	7149f2ca 	.word	0x7149f2ca
 80088cc:	bf800000 	.word	0xbf800000
 80088d0:	007fffff 	.word	0x007fffff

080088d4 <scalbnf>:
 80088d4:	b508      	push	{r3, lr}
 80088d6:	ee10 2a10 	vmov	r2, s0
 80088da:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80088de:	ed2d 8b02 	vpush	{d8}
 80088e2:	eef0 0a40 	vmov.f32	s1, s0
 80088e6:	d004      	beq.n	80088f2 <scalbnf+0x1e>
 80088e8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80088ec:	d306      	bcc.n	80088fc <scalbnf+0x28>
 80088ee:	ee70 0a00 	vadd.f32	s1, s0, s0
 80088f2:	ecbd 8b02 	vpop	{d8}
 80088f6:	eeb0 0a60 	vmov.f32	s0, s1
 80088fa:	bd08      	pop	{r3, pc}
 80088fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008900:	d21c      	bcs.n	800893c <scalbnf+0x68>
 8008902:	4b1f      	ldr	r3, [pc, #124]	; (8008980 <scalbnf+0xac>)
 8008904:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008984 <scalbnf+0xb0>
 8008908:	4298      	cmp	r0, r3
 800890a:	ee60 0a27 	vmul.f32	s1, s0, s15
 800890e:	db10      	blt.n	8008932 <scalbnf+0x5e>
 8008910:	ee10 2a90 	vmov	r2, s1
 8008914:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8008918:	3b19      	subs	r3, #25
 800891a:	4403      	add	r3, r0
 800891c:	2bfe      	cmp	r3, #254	; 0xfe
 800891e:	dd0f      	ble.n	8008940 <scalbnf+0x6c>
 8008920:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8008988 <scalbnf+0xb4>
 8008924:	eeb0 0a48 	vmov.f32	s0, s16
 8008928:	f000 f834 	bl	8008994 <copysignf>
 800892c:	ee60 0a08 	vmul.f32	s1, s0, s16
 8008930:	e7df      	b.n	80088f2 <scalbnf+0x1e>
 8008932:	eddf 7a16 	vldr	s15, [pc, #88]	; 800898c <scalbnf+0xb8>
 8008936:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800893a:	e7da      	b.n	80088f2 <scalbnf+0x1e>
 800893c:	0ddb      	lsrs	r3, r3, #23
 800893e:	e7ec      	b.n	800891a <scalbnf+0x46>
 8008940:	2b00      	cmp	r3, #0
 8008942:	dd06      	ble.n	8008952 <scalbnf+0x7e>
 8008944:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008948:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800894c:	ee00 3a90 	vmov	s1, r3
 8008950:	e7cf      	b.n	80088f2 <scalbnf+0x1e>
 8008952:	f113 0f16 	cmn.w	r3, #22
 8008956:	da06      	bge.n	8008966 <scalbnf+0x92>
 8008958:	f24c 3350 	movw	r3, #50000	; 0xc350
 800895c:	4298      	cmp	r0, r3
 800895e:	dcdf      	bgt.n	8008920 <scalbnf+0x4c>
 8008960:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800898c <scalbnf+0xb8>
 8008964:	e7de      	b.n	8008924 <scalbnf+0x50>
 8008966:	3319      	adds	r3, #25
 8008968:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800896c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008970:	eddf 7a07 	vldr	s15, [pc, #28]	; 8008990 <scalbnf+0xbc>
 8008974:	ee07 3a10 	vmov	s14, r3
 8008978:	ee67 0a27 	vmul.f32	s1, s14, s15
 800897c:	e7b9      	b.n	80088f2 <scalbnf+0x1e>
 800897e:	bf00      	nop
 8008980:	ffff3cb0 	.word	0xffff3cb0
 8008984:	4c000000 	.word	0x4c000000
 8008988:	7149f2ca 	.word	0x7149f2ca
 800898c:	0da24260 	.word	0x0da24260
 8008990:	33000000 	.word	0x33000000

08008994 <copysignf>:
 8008994:	ee10 3a10 	vmov	r3, s0
 8008998:	ee10 2a90 	vmov	r2, s1
 800899c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089a0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80089a4:	4313      	orrs	r3, r2
 80089a6:	ee00 3a10 	vmov	s0, r3
 80089aa:	4770      	bx	lr

080089ac <_init>:
 80089ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ae:	bf00      	nop
 80089b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089b2:	bc08      	pop	{r3}
 80089b4:	469e      	mov	lr, r3
 80089b6:	4770      	bx	lr

080089b8 <_fini>:
 80089b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ba:	bf00      	nop
 80089bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089be:	bc08      	pop	{r3}
 80089c0:	469e      	mov	lr, r3
 80089c2:	4770      	bx	lr
