
rsense-micro-adc-dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8e4  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000138ec  0800daa4  0800daa4  0001daa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021390  08021390  000401f8  2**0
                  CONTENTS
  4 .ARM          00000008  08021390  08021390  00031390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021398  08021398  000401f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021398  08021398  00031398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802139c  0802139c  0003139c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  080213a0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003b18  200001f8  08021598  000401f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003d10  08021598  00043d10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020afd  00000000  00000000  00040228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004260  00000000  00000000  00060d25  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001538  00000000  00000000  00064f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013a8  00000000  00000000  000664c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035c20  00000000  00000000  00067868  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015cc8  00000000  00000000  0009d488  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00136867  00000000  00000000  000b3150  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  001e99b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c3c  00000000  00000000  001e9aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00003452  00000000  00000000  001ef6e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800da8c 	.word	0x0800da8c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	0800da8c 	.word	0x0800da8c

08000200 <arm_bitreversal_32>:
 8000200:	1c4b      	adds	r3, r1, #1
 8000202:	2b01      	cmp	r3, #1
 8000204:	bf98      	it	ls
 8000206:	4770      	bxls	lr
 8000208:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800020c:	1c91      	adds	r1, r2, #2
 800020e:	089b      	lsrs	r3, r3, #2

08000210 <arm_bitreversal_32_0>:
 8000210:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000214:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000218:	880a      	ldrh	r2, [r1, #0]
 800021a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800021e:	4480      	add	r8, r0
 8000220:	4481      	add	r9, r0
 8000222:	4402      	add	r2, r0
 8000224:	4484      	add	ip, r0
 8000226:	f8d9 7000 	ldr.w	r7, [r9]
 800022a:	f8d8 6000 	ldr.w	r6, [r8]
 800022e:	6815      	ldr	r5, [r2, #0]
 8000230:	f8dc 4000 	ldr.w	r4, [ip]
 8000234:	f8c9 6000 	str.w	r6, [r9]
 8000238:	f8c8 7000 	str.w	r7, [r8]
 800023c:	f8cc 5000 	str.w	r5, [ip]
 8000240:	6014      	str	r4, [r2, #0]
 8000242:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000246:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800024a:	6855      	ldr	r5, [r2, #4]
 800024c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000250:	f8c9 6004 	str.w	r6, [r9, #4]
 8000254:	f8c8 7004 	str.w	r7, [r8, #4]
 8000258:	f8cc 5004 	str.w	r5, [ip, #4]
 800025c:	6054      	str	r4, [r2, #4]
 800025e:	3108      	adds	r1, #8
 8000260:	3b01      	subs	r3, #1
 8000262:	d1d5      	bne.n	8000210 <arm_bitreversal_32_0>
 8000264:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000268:	4770      	bx	lr

0800026a <arm_bitreversal_16>:
 800026a:	1c4b      	adds	r3, r1, #1
 800026c:	2b01      	cmp	r3, #1
 800026e:	bf98      	it	ls
 8000270:	4770      	bxls	lr
 8000272:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000276:	1c91      	adds	r1, r2, #2
 8000278:	089b      	lsrs	r3, r3, #2

0800027a <arm_bitreversal_16_0>:
 800027a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800027e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000282:	880a      	ldrh	r2, [r1, #0]
 8000284:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000288:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800028c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000290:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000294:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000298:	f8d9 7000 	ldr.w	r7, [r9]
 800029c:	f8d8 6000 	ldr.w	r6, [r8]
 80002a0:	6815      	ldr	r5, [r2, #0]
 80002a2:	f8dc 4000 	ldr.w	r4, [ip]
 80002a6:	f8c9 6000 	str.w	r6, [r9]
 80002aa:	f8c8 7000 	str.w	r7, [r8]
 80002ae:	f8cc 5000 	str.w	r5, [ip]
 80002b2:	6014      	str	r4, [r2, #0]
 80002b4:	3108      	adds	r1, #8
 80002b6:	3b01      	subs	r3, #1
 80002b8:	d1df      	bne.n	800027a <arm_bitreversal_16_0>
 80002ba:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <AUDIO_FFT_Init>:
* @brief  Initialize the FFT processing depending on the desired configuration
* @param  AUDIO_FFT_instance_t* AUDIO_FFT_instance
* @retval None
*/
int32_t AUDIO_FFT_Init(AUDIO_FFT_instance_t* AUDIO_FFT_instance)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Initialize FFT ARM structure */
  arm_rfft_fast_init_f32(&(AUDIO_FFT_instance->context.S), AUDIO_FFT_instance->FFT_len);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f103 0214 	add.w	r2, r3, #20
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4610      	mov	r0, r2
 8000f50:	f00a fba2 	bl	800b698 <arm_rfft_fast_init_f32>

  /*Compute indexes to be used for overlap */
  AUDIO_FFT_instance->context.new_data_len = (uint32_t)((float)(AUDIO_FFT_instance->FFT_len) *  (1.0f - (float)(AUDIO_FFT_instance->overlap)));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	ee07 3a90 	vmov	s15, r3
 8000f5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000f6a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f76:	ee17 2a90 	vmov	r2, s15
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	62da      	str	r2, [r3, #44]	; 0x2c
  AUDIO_FFT_instance->context.old_data_len = (uint32_t)((float)(AUDIO_FFT_instance->FFT_len) -  AUDIO_FFT_instance->context.new_data_len);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	ee07 3a90 	vmov	s15, r3
 8000f86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8e:	ee07 3a90 	vmov	s15, r3
 8000f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f9e:	ee17 2a90 	vmov	r2, s15
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize scratch buffer index */
  AUDIO_FFT_instance->context.scratch_idx = 0;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Memory allocation */
  if(AUDIO_FFT_instance->win_type != AUDIO_FTT_RECT_WIN)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d009      	beq.n	8000fc8 <AUDIO_FFT_Init+0x90>
  {
    AUDIO_FFT_instance->context.win = (float * )calloc(AUDIO_FFT_instance->FFT_len, sizeof(float));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2104      	movs	r1, #4
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f00b fc6e 	bl	800c89c <calloc>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  AUDIO_FFT_instance->context.scratch = (float * )calloc(AUDIO_FFT_instance->context.new_data_len, sizeof(float));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fcc:	2104      	movs	r1, #4
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f00b fc64 	bl	800c89c <calloc>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	63da      	str	r2, [r3, #60]	; 0x3c
  AUDIO_FFT_instance->context.dataIn = (float * )calloc(AUDIO_FFT_instance->FFT_len, sizeof(float));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2104      	movs	r1, #4
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f00b fc5a 	bl	800c89c <calloc>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	641a      	str	r2, [r3, #64]	; 0x40
  AUDIO_FFT_instance->context.fftIn = (float * )calloc(AUDIO_FFT_instance->FFT_len, sizeof(float));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f00b fc50 	bl	800c89c <calloc>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	461a      	mov	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	645a      	str	r2, [r3, #68]	; 0x44
  if(AUDIO_FFT_instance->output == MAGNITUDE || AUDIO_FFT_instance->output == PHASE)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d003      	beq.n	8001014 <AUDIO_FFT_Init+0xdc>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	2b02      	cmp	r3, #2
 8001012:	d109      	bne.n	8001028 <AUDIO_FFT_Init+0xf0>
  {
  AUDIO_FFT_instance->context.fftOut = (float * )calloc(AUDIO_FFT_instance->FFT_len, sizeof(float));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2104      	movs	r1, #4
 800101a:	4618      	mov	r0, r3
 800101c:	f00b fc3e 	bl	800c89c <calloc>
 8001020:	4603      	mov	r3, r0
 8001022:	461a      	mov	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Create window depending on the user choice */
  switch(AUDIO_FFT_instance->win_type)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	2b05      	cmp	r3, #5
 800102e:	d847      	bhi.n	80010c0 <AUDIO_FFT_Init+0x188>
 8001030:	a201      	add	r2, pc, #4	; (adr r2, 8001038 <AUDIO_FFT_Init+0x100>)
 8001032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001036:	bf00      	nop
 8001038:	080010c1 	.word	0x080010c1
 800103c:	08001051 	.word	0x08001051
 8001040:	08001065 	.word	0x08001065
 8001044:	0800107d 	.word	0x0800107d
 8001048:	08001091 	.word	0x08001091
 800104c:	080010a9 	.word	0x080010a9
  {
  case AUDIO_FTT_RECT_WIN:
    break;
  case AUDIO_FTT_HAMMING_WIN:
    HammingWin(AUDIO_FFT_instance->FFT_len, AUDIO_FFT_instance->context.win);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	b29a      	uxth	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800105a:	4619      	mov	r1, r3
 800105c:	4610      	mov	r0, r2
 800105e:	f000 f9eb 	bl	8001438 <HammingWin>
    break;
 8001062:	e02d      	b.n	80010c0 <AUDIO_FFT_Init+0x188>
  case AUDIO_FTT_HANNING_WIN:
    TukeyWin(AUDIO_FFT_instance->FFT_len, 1.0f, AUDIO_FFT_instance->context.win);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	b29a      	uxth	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800106e:	4619      	mov	r1, r3
 8001070:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001074:	4610      	mov	r0, r2
 8001076:	f000 f8df 	bl	8001238 <TukeyWin>
    break;
 800107a:	e021      	b.n	80010c0 <AUDIO_FFT_Init+0x188>
  case AUDIO_FTT_BLACKMAN_HARRIS_WIN:
    BlackmanHarrisWin(AUDIO_FFT_instance->FFT_len, AUDIO_FFT_instance->context.win);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	b29a      	uxth	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001086:	4619      	mov	r1, r3
 8001088:	4610      	mov	r0, r2
 800108a:	f000 fa39 	bl	8001500 <BlackmanHarrisWin>
    break;
 800108e:	e017      	b.n	80010c0 <AUDIO_FFT_Init+0x188>
  case AUDIO_FTT_TUKEY_0_25_WIN:
    TukeyWin(AUDIO_FFT_instance->FFT_len, 0.25f, AUDIO_FFT_instance->context.win);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	b29a      	uxth	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800109a:	4619      	mov	r1, r3
 800109c:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80010a0:	4610      	mov	r0, r2
 80010a2:	f000 f8c9 	bl	8001238 <TukeyWin>
    break;
 80010a6:	e00b      	b.n	80010c0 <AUDIO_FFT_Init+0x188>
  case AUDIO_FTT_TUKEY_0_75_WIN:
    TukeyWin(AUDIO_FFT_instance->FFT_len, 0.75f, AUDIO_FFT_instance->context.win);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010b2:	4619      	mov	r1, r3
 80010b4:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 80010b8:	4610      	mov	r0, r2
 80010ba:	f000 f8bd 	bl	8001238 <TukeyWin>
    break;
 80010be:	bf00      	nop
  }

  return 0;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop

080010cc <AUDIO_FFT_Data_Input>:
* @param  data: input data buffer
* @param  len: length of input data buffer
* @retval None
*/
int32_t AUDIO_FFT_Data_Input(int16_t * data, uint32_t len, AUDIO_FFT_instance_t* AUDIO_FFT_instance)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08c      	sub	sp, #48	; 0x30
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  int32_t ret = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
  int32_t index = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s_idx = AUDIO_FFT_instance->context.scratch_idx;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t new_data_len = AUDIO_FFT_instance->context.new_data_len;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ea:	61fb      	str	r3, [r7, #28]

  float * scratch_ptr = &AUDIO_FFT_instance->context.scratch[s_idx];
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	623b      	str	r3, [r7, #32]

  for (index = 0; index < len; index ++)
 80010f8:	2300      	movs	r3, #0
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80010fc:	e041      	b.n	8001182 <AUDIO_FFT_Data_Input+0xb6>
  {
    *scratch_ptr++ = (float)data[index]/32768.0f;
 80010fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	4413      	add	r3, r2
 8001106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001112:	6a3b      	ldr	r3, [r7, #32]
 8001114:	1d1a      	adds	r2, r3, #4
 8001116:	623a      	str	r2, [r7, #32]
 8001118:	eddf 6a20 	vldr	s13, [pc, #128]	; 800119c <AUDIO_FFT_Data_Input+0xd0>
 800111c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001120:	edc3 7a00 	vstr	s15, [r3]
    s_idx++;
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	3301      	adds	r3, #1
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
    if (s_idx == new_data_len)
 800112a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	429a      	cmp	r2, r3
 8001130:	d124      	bne.n	800117c <AUDIO_FFT_Data_Input+0xb0>
    {
      float * data_in = AUDIO_FFT_instance->context.dataIn;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	61bb      	str	r3, [r7, #24]
      uint32_t old_data_len = AUDIO_FFT_instance->context.old_data_len;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	617b      	str	r3, [r7, #20]

      memcpy(data_in, &data_in[AUDIO_FFT_instance->FFT_len - old_data_len], old_data_len * sizeof(float));
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	18d1      	adds	r1, r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	461a      	mov	r2, r3
 8001152:	69b8      	ldr	r0, [r7, #24]
 8001154:	f00b fbe4 	bl	800c920 <memcpy>
      memcpy(&data_in[old_data_len], AUDIO_FFT_instance->context.scratch, new_data_len * sizeof(float));
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	18d0      	adds	r0, r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	461a      	mov	r2, r3
 800116a:	f00b fbd9 	bl	800c920 <memcpy>

      ret = 1;
 800116e:	2301      	movs	r3, #1
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
      s_idx = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
      scratch_ptr = &AUDIO_FFT_instance->context.scratch[0];
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800117a:	623b      	str	r3, [r7, #32]
  for (index = 0; index < len; index ++)
 800117c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117e:	3301      	adds	r3, #1
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
 8001182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001184:	68ba      	ldr	r2, [r7, #8]
 8001186:	429a      	cmp	r2, r3
 8001188:	d8b9      	bhi.n	80010fe <AUDIO_FFT_Data_Input+0x32>

    }
  }

  AUDIO_FFT_instance->context.scratch_idx = s_idx;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800118e:	635a      	str	r2, [r3, #52]	; 0x34

  return ret;
 8001190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001192:	4618      	mov	r0, r3
 8001194:	3730      	adds	r7, #48	; 0x30
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	47000000 	.word	0x47000000

080011a0 <AUDIO_FFT_Process>:
* @param  AUDIO_FFT_instance_t* AUDIO_FFT_instance
* @param  output: FFT amplitude buffer
* @retval None
*/
int32_t AUDIO_FFT_Process(AUDIO_FFT_instance_t* AUDIO_FFT_instance, float * output)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]

  float * win = AUDIO_FFT_instance->context.win;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ae:	617b      	str	r3, [r7, #20]
  float * dataIn = AUDIO_FFT_instance->context.dataIn;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	613b      	str	r3, [r7, #16]
  float * fftIn = AUDIO_FFT_instance->context.fftIn;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	60fb      	str	r3, [r7, #12]

  if(AUDIO_FFT_instance->win_type != AUDIO_FTT_RECT_WIN)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d007      	beq.n	80011d4 <AUDIO_FFT_Process+0x34>
  {
  arm_mult_f32(dataIn, win, fftIn, AUDIO_FFT_instance->FFT_len);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	6979      	ldr	r1, [r7, #20]
 80011cc:	6938      	ldr	r0, [r7, #16]
 80011ce:	f00b f83d 	bl	800c24c <arm_mult_f32>
 80011d2:	e007      	b.n	80011e4 <AUDIO_FFT_Process+0x44>
  }
  else
  {
    memcpy(fftIn, dataIn, sizeof(float) * AUDIO_FFT_instance->FFT_len);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	461a      	mov	r2, r3
 80011dc:	6939      	ldr	r1, [r7, #16]
 80011de:	68f8      	ldr	r0, [r7, #12]
 80011e0:	f00b fb9e 	bl	800c920 <memcpy>
  }

  if(AUDIO_FFT_instance->output == COMPLEX)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d107      	bne.n	80011fc <AUDIO_FFT_Process+0x5c>
  {
  arm_rfft_fast_f32(&AUDIO_FFT_instance->context.S, fftIn, output, 0);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f103 0014 	add.w	r0, r3, #20
 80011f2:	2300      	movs	r3, #0
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	68f9      	ldr	r1, [r7, #12]
 80011f8:	f00a fad2 	bl	800b7a0 <arm_rfft_fast_f32>
  }

  if(AUDIO_FFT_instance->output == MAGNITUDE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d112      	bne.n	800122a <AUDIO_FFT_Process+0x8a>
  {
    float * fftOut = AUDIO_FFT_instance->context.fftOut;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001208:	60bb      	str	r3, [r7, #8]
    arm_rfft_fast_f32(&AUDIO_FFT_instance->context.S, fftIn, fftOut, 0);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f103 0014 	add.w	r0, r3, #20
 8001210:	2300      	movs	r3, #0
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	68f9      	ldr	r1, [r7, #12]
 8001216:	f00a fac3 	bl	800b7a0 <arm_rfft_fast_f32>
    arm_cmplx_mag_f32(fftOut, output, AUDIO_FFT_instance->FFT_len / 2);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	085b      	lsrs	r3, r3, #1
 8001220:	461a      	mov	r2, r3
 8001222:	6839      	ldr	r1, [r7, #0]
 8001224:	68b8      	ldr	r0, [r7, #8]
 8001226:	f00a ff29 	bl	800c07c <arm_cmplx_mag_f32>
  if(AUDIO_FFT_instance->output == PHASE)
  {
    /*Not implemented in v1.0.0*/
  }

  return 0;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	0000      	movs	r0, r0
	...

08001238 <TukeyWin>:


static void TukeyWin(uint16_t len, float ratio, float * dest)
{
 8001238:	b5b0      	push	{r4, r5, r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	ed87 0a02 	vstr	s0, [r7, #8]
 8001244:	6079      	str	r1, [r7, #4]
 8001246:	81fb      	strh	r3, [r7, #14]
  uint16_t x = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	82fb      	strh	r3, [r7, #22]
  for ( x = 0; x < len * (ratio / 2) ; x++)
 800124c:	2300      	movs	r3, #0
 800124e:	82fb      	strh	r3, [r7, #22]
 8001250:	e04f      	b.n	80012f2 <TukeyWin+0xba>
  {
    dest[x] = 0.5f * (1.0f + cosf(2.0f * M_PI / ratio * ( (float)x/(len - 1.0f) - (ratio / 2))));
 8001252:	68b8      	ldr	r0, [r7, #8]
 8001254:	f7ff f998 	bl	8000588 <__aeabi_f2d>
 8001258:	4603      	mov	r3, r0
 800125a:	460c      	mov	r4, r1
 800125c:	461a      	mov	r2, r3
 800125e:	4623      	mov	r3, r4
 8001260:	a173      	add	r1, pc, #460	; (adr r1, 8001430 <TukeyWin+0x1f8>)
 8001262:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001266:	f7ff fb11 	bl	800088c <__aeabi_ddiv>
 800126a:	4603      	mov	r3, r0
 800126c:	460c      	mov	r4, r1
 800126e:	4625      	mov	r5, r4
 8001270:	461c      	mov	r4, r3
 8001272:	8afb      	ldrh	r3, [r7, #22]
 8001274:	ee07 3a90 	vmov	s15, r3
 8001278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800127c:	89fb      	ldrh	r3, [r7, #14]
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001286:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800128a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800128e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001292:	edd7 6a02 	vldr	s13, [r7, #8]
 8001296:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800129a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800129e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a2:	ee17 0a90 	vmov	r0, s15
 80012a6:	f7ff f96f 	bl	8000588 <__aeabi_f2d>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4620      	mov	r0, r4
 80012b0:	4629      	mov	r1, r5
 80012b2:	f7ff f9c1 	bl	8000638 <__aeabi_dmul>
 80012b6:	4603      	mov	r3, r0
 80012b8:	460c      	mov	r4, r1
 80012ba:	4618      	mov	r0, r3
 80012bc:	4621      	mov	r1, r4
 80012be:	f7ff fc6b 	bl	8000b98 <__aeabi_d2f>
 80012c2:	4603      	mov	r3, r0
 80012c4:	ee00 3a10 	vmov	s0, r3
 80012c8:	f00b fc06 	bl	800cad8 <cosf>
 80012cc:	eeb0 7a40 	vmov.f32	s14, s0
 80012d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80012d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d8:	8afb      	ldrh	r3, [r7, #22]
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	4413      	add	r3, r2
 80012e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012e8:	edc3 7a00 	vstr	s15, [r3]
  for ( x = 0; x < len * (ratio / 2) ; x++)
 80012ec:	8afb      	ldrh	r3, [r7, #22]
 80012ee:	3301      	adds	r3, #1
 80012f0:	82fb      	strh	r3, [r7, #22]
 80012f2:	8afb      	ldrh	r3, [r7, #22]
 80012f4:	ee07 3a90 	vmov	s15, r3
 80012f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012fc:	89fb      	ldrh	r3, [r7, #14]
 80012fe:	ee07 3a90 	vmov	s15, r3
 8001302:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001306:	ed97 6a02 	vldr	s12, [r7, #8]
 800130a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800130e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001316:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800131a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131e:	d498      	bmi.n	8001252 <TukeyWin+0x1a>
  }
  for( ; x <  len - len * (ratio / 2); x++)
 8001320:	e009      	b.n	8001336 <TukeyWin+0xfe>
  {
    dest[x] = 1.0f;
 8001322:	8afb      	ldrh	r3, [r7, #22]
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800132e:	601a      	str	r2, [r3, #0]
  for( ; x <  len - len * (ratio / 2); x++)
 8001330:	8afb      	ldrh	r3, [r7, #22]
 8001332:	3301      	adds	r3, #1
 8001334:	82fb      	strh	r3, [r7, #22]
 8001336:	8afb      	ldrh	r3, [r7, #22]
 8001338:	ee07 3a90 	vmov	s15, r3
 800133c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001340:	89fb      	ldrh	r3, [r7, #14]
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800134a:	89fb      	ldrh	r3, [r7, #14]
 800134c:	ee07 3a90 	vmov	s15, r3
 8001350:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001354:	edd7 5a02 	vldr	s11, [r7, #8]
 8001358:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800135c:	eec5 7a85 	vdiv.f32	s15, s11, s10
 8001360:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001364:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001368:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800136c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001370:	d4d7      	bmi.n	8001322 <TukeyWin+0xea>
  }
  for( ; x <  len; x++)
 8001372:	e053      	b.n	800141c <TukeyWin+0x1e4>
  {
    dest[x] = 0.5f * (1.0f + cosf(2.0f * M_PI / ratio * ( (float)x/(len - 1.0f) - 1 + (ratio / 2))));
 8001374:	68b8      	ldr	r0, [r7, #8]
 8001376:	f7ff f907 	bl	8000588 <__aeabi_f2d>
 800137a:	4603      	mov	r3, r0
 800137c:	460c      	mov	r4, r1
 800137e:	461a      	mov	r2, r3
 8001380:	4623      	mov	r3, r4
 8001382:	a12b      	add	r1, pc, #172	; (adr r1, 8001430 <TukeyWin+0x1f8>)
 8001384:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001388:	f7ff fa80 	bl	800088c <__aeabi_ddiv>
 800138c:	4603      	mov	r3, r0
 800138e:	460c      	mov	r4, r1
 8001390:	4625      	mov	r5, r4
 8001392:	461c      	mov	r4, r3
 8001394:	8afb      	ldrh	r3, [r7, #22]
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013ac:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80013b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013b8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80013bc:	edd7 6a02 	vldr	s13, [r7, #8]
 80013c0:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80013c4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80013c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013cc:	ee17 0a90 	vmov	r0, s15
 80013d0:	f7ff f8da 	bl	8000588 <__aeabi_f2d>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4620      	mov	r0, r4
 80013da:	4629      	mov	r1, r5
 80013dc:	f7ff f92c 	bl	8000638 <__aeabi_dmul>
 80013e0:	4603      	mov	r3, r0
 80013e2:	460c      	mov	r4, r1
 80013e4:	4618      	mov	r0, r3
 80013e6:	4621      	mov	r1, r4
 80013e8:	f7ff fbd6 	bl	8000b98 <__aeabi_d2f>
 80013ec:	4603      	mov	r3, r0
 80013ee:	ee00 3a10 	vmov	s0, r3
 80013f2:	f00b fb71 	bl	800cad8 <cosf>
 80013f6:	eeb0 7a40 	vmov.f32	s14, s0
 80013fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80013fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001402:	8afb      	ldrh	r3, [r7, #22]
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800140e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001412:	edc3 7a00 	vstr	s15, [r3]
  for( ; x <  len; x++)
 8001416:	8afb      	ldrh	r3, [r7, #22]
 8001418:	3301      	adds	r3, #1
 800141a:	82fb      	strh	r3, [r7, #22]
 800141c:	8afa      	ldrh	r2, [r7, #22]
 800141e:	89fb      	ldrh	r3, [r7, #14]
 8001420:	429a      	cmp	r2, r3
 8001422:	d3a7      	bcc.n	8001374 <TukeyWin+0x13c>
  }
}
 8001424:	bf00      	nop
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bdb0      	pop	{r4, r5, r7, pc}
 800142c:	f3af 8000 	nop.w
 8001430:	54442d18 	.word	0x54442d18
 8001434:	401921fb 	.word	0x401921fb

08001438 <HammingWin>:

static void HammingWin(uint16_t len, float * dest)
{
 8001438:	b5b0      	push	{r4, r5, r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	6039      	str	r1, [r7, #0]
 8001442:	80fb      	strh	r3, [r7, #6]
  uint16_t x = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	82fb      	strh	r3, [r7, #22]
  float alpha0 = 0.53836f;
 8001448:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <HammingWin+0xc0>)
 800144a:	613b      	str	r3, [r7, #16]
  float alpha1 = 1.0f - alpha0;
 800144c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001450:	edd7 7a04 	vldr	s15, [r7, #16]
 8001454:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001458:	edc7 7a03 	vstr	s15, [r7, #12]

  for ( x = 0; x < len ; x++)
 800145c:	2300      	movs	r3, #0
 800145e:	82fb      	strh	r3, [r7, #22]
 8001460:	e03e      	b.n	80014e0 <HammingWin+0xa8>
  {
    dest[x] = alpha0 - alpha1 * cosf(2.0f * M_PI * (float)x / (float)len);
 8001462:	8afb      	ldrh	r3, [r7, #22]
 8001464:	ee07 3a90 	vmov	s15, r3
 8001468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800146c:	ee17 0a90 	vmov	r0, s15
 8001470:	f7ff f88a 	bl	8000588 <__aeabi_f2d>
 8001474:	a31e      	add	r3, pc, #120	; (adr r3, 80014f0 <HammingWin+0xb8>)
 8001476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147a:	f7ff f8dd 	bl	8000638 <__aeabi_dmul>
 800147e:	4603      	mov	r3, r0
 8001480:	460c      	mov	r4, r1
 8001482:	4625      	mov	r5, r4
 8001484:	461c      	mov	r4, r3
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	ee07 3a90 	vmov	s15, r3
 800148c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001490:	ee17 0a90 	vmov	r0, s15
 8001494:	f7ff f878 	bl	8000588 <__aeabi_f2d>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4620      	mov	r0, r4
 800149e:	4629      	mov	r1, r5
 80014a0:	f7ff f9f4 	bl	800088c <__aeabi_ddiv>
 80014a4:	4603      	mov	r3, r0
 80014a6:	460c      	mov	r4, r1
 80014a8:	4618      	mov	r0, r3
 80014aa:	4621      	mov	r1, r4
 80014ac:	f7ff fb74 	bl	8000b98 <__aeabi_d2f>
 80014b0:	4603      	mov	r3, r0
 80014b2:	ee00 3a10 	vmov	s0, r3
 80014b6:	f00b fb0f 	bl	800cad8 <cosf>
 80014ba:	eeb0 7a40 	vmov.f32	s14, s0
 80014be:	edd7 7a03 	vldr	s15, [r7, #12]
 80014c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c6:	8afb      	ldrh	r3, [r7, #22]
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	4413      	add	r3, r2
 80014ce:	ed97 7a04 	vldr	s14, [r7, #16]
 80014d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d6:	edc3 7a00 	vstr	s15, [r3]
  for ( x = 0; x < len ; x++)
 80014da:	8afb      	ldrh	r3, [r7, #22]
 80014dc:	3301      	adds	r3, #1
 80014de:	82fb      	strh	r3, [r7, #22]
 80014e0:	8afa      	ldrh	r2, [r7, #22]
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d3bc      	bcc.n	8001462 <HammingWin+0x2a>
  }
}
 80014e8:	bf00      	nop
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bdb0      	pop	{r4, r5, r7, pc}
 80014f0:	54442d18 	.word	0x54442d18
 80014f4:	401921fb 	.word	0x401921fb
 80014f8:	3f09d1f6 	.word	0x3f09d1f6
 80014fc:	00000000 	.word	0x00000000

08001500 <BlackmanHarrisWin>:

static void BlackmanHarrisWin(uint16_t len, float * dest)
{
 8001500:	b5b0      	push	{r4, r5, r7, lr}
 8001502:	ed2d 8b02 	vpush	{d8}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	80fb      	strh	r3, [r7, #6]
  uint16_t x = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	82fb      	strh	r3, [r7, #22]
  float alpha0 = 0.42f;
 8001514:	4b48      	ldr	r3, [pc, #288]	; (8001638 <BlackmanHarrisWin+0x138>)
 8001516:	613b      	str	r3, [r7, #16]
  float alpha1 = 0.5;
 8001518:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800151c:	60fb      	str	r3, [r7, #12]
  float alpha2 = 0.08f;
 800151e:	4b47      	ldr	r3, [pc, #284]	; (800163c <BlackmanHarrisWin+0x13c>)
 8001520:	60bb      	str	r3, [r7, #8]

  for ( x = 0; x < len ; x++)
 8001522:	2300      	movs	r3, #0
 8001524:	82fb      	strh	r3, [r7, #22]
 8001526:	e074      	b.n	8001612 <BlackmanHarrisWin+0x112>
  {
    dest[x] = alpha0 - alpha1 * cosf(2.0f * M_PI * (float)x / (float)len) + - alpha2 * cosf(4.0f * M_PI * (float)x / (float)len);
 8001528:	8afb      	ldrh	r3, [r7, #22]
 800152a:	ee07 3a90 	vmov	s15, r3
 800152e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001532:	ee17 0a90 	vmov	r0, s15
 8001536:	f7ff f827 	bl	8000588 <__aeabi_f2d>
 800153a:	a33b      	add	r3, pc, #236	; (adr r3, 8001628 <BlackmanHarrisWin+0x128>)
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	f7ff f87a 	bl	8000638 <__aeabi_dmul>
 8001544:	4603      	mov	r3, r0
 8001546:	460c      	mov	r4, r1
 8001548:	4625      	mov	r5, r4
 800154a:	461c      	mov	r4, r3
 800154c:	88fb      	ldrh	r3, [r7, #6]
 800154e:	ee07 3a90 	vmov	s15, r3
 8001552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001556:	ee17 0a90 	vmov	r0, s15
 800155a:	f7ff f815 	bl	8000588 <__aeabi_f2d>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4620      	mov	r0, r4
 8001564:	4629      	mov	r1, r5
 8001566:	f7ff f991 	bl	800088c <__aeabi_ddiv>
 800156a:	4603      	mov	r3, r0
 800156c:	460c      	mov	r4, r1
 800156e:	4618      	mov	r0, r3
 8001570:	4621      	mov	r1, r4
 8001572:	f7ff fb11 	bl	8000b98 <__aeabi_d2f>
 8001576:	4603      	mov	r3, r0
 8001578:	ee00 3a10 	vmov	s0, r3
 800157c:	f00b faac 	bl	800cad8 <cosf>
 8001580:	eeb0 7a40 	vmov.f32	s14, s0
 8001584:	edd7 7a03 	vldr	s15, [r7, #12]
 8001588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800158c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001590:	ee37 8a67 	vsub.f32	s16, s14, s15
 8001594:	edd7 7a02 	vldr	s15, [r7, #8]
 8001598:	eef1 8a67 	vneg.f32	s17, s15
 800159c:	8afb      	ldrh	r3, [r7, #22]
 800159e:	ee07 3a90 	vmov	s15, r3
 80015a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015a6:	ee17 0a90 	vmov	r0, s15
 80015aa:	f7fe ffed 	bl	8000588 <__aeabi_f2d>
 80015ae:	a320      	add	r3, pc, #128	; (adr r3, 8001630 <BlackmanHarrisWin+0x130>)
 80015b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b4:	f7ff f840 	bl	8000638 <__aeabi_dmul>
 80015b8:	4603      	mov	r3, r0
 80015ba:	460c      	mov	r4, r1
 80015bc:	4625      	mov	r5, r4
 80015be:	461c      	mov	r4, r3
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	ee07 3a90 	vmov	s15, r3
 80015c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ca:	ee17 0a90 	vmov	r0, s15
 80015ce:	f7fe ffdb 	bl	8000588 <__aeabi_f2d>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4620      	mov	r0, r4
 80015d8:	4629      	mov	r1, r5
 80015da:	f7ff f957 	bl	800088c <__aeabi_ddiv>
 80015de:	4603      	mov	r3, r0
 80015e0:	460c      	mov	r4, r1
 80015e2:	4618      	mov	r0, r3
 80015e4:	4621      	mov	r1, r4
 80015e6:	f7ff fad7 	bl	8000b98 <__aeabi_d2f>
 80015ea:	4603      	mov	r3, r0
 80015ec:	ee00 3a10 	vmov	s0, r3
 80015f0:	f00b fa72 	bl	800cad8 <cosf>
 80015f4:	eef0 7a40 	vmov.f32	s15, s0
 80015f8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80015fc:	8afb      	ldrh	r3, [r7, #22]
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	4413      	add	r3, r2
 8001604:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001608:	edc3 7a00 	vstr	s15, [r3]
  for ( x = 0; x < len ; x++)
 800160c:	8afb      	ldrh	r3, [r7, #22]
 800160e:	3301      	adds	r3, #1
 8001610:	82fb      	strh	r3, [r7, #22]
 8001612:	8afa      	ldrh	r2, [r7, #22]
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	429a      	cmp	r2, r3
 8001618:	d386      	bcc.n	8001528 <BlackmanHarrisWin+0x28>
  }
}
 800161a:	bf00      	nop
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	ecbd 8b02 	vpop	{d8}
 8001624:	bdb0      	pop	{r4, r5, r7, pc}
 8001626:	bf00      	nop
 8001628:	54442d18 	.word	0x54442d18
 800162c:	401921fb 	.word	0x401921fb
 8001630:	54442d18 	.word	0x54442d18
 8001634:	402921fb 	.word	0x402921fb
 8001638:	3ed70a3d 	.word	0x3ed70a3d
 800163c:	3da3d70a 	.word	0x3da3d70a

08001640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	f5ad 5d20 	sub.w	sp, sp, #10240	; 0x2800
 8001646:	b087      	sub	sp, #28
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800164a:	f000 ff16 	bl	800247a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800164e:	f000 f8d7 	bl	8001800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001652:	f000 fa27 	bl	8001aa4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001656:	f000 f9f3 	bl	8001a40 <MX_DMA_Init>
  MX_ADC1_Init();
 800165a:	f000 f93f 	bl	80018dc <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800165e:	f000 f9a3 	bl	80019a8 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001662:	f009 fa2b 	bl	800aabc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	HAL_DMA_RegisterCallback(&hdma_usart2_tx, HAL_DMA_XFER_CPLT_CB_ID, &DMATransferComplete);
 8001666:	4a59      	ldr	r2, [pc, #356]	; (80017cc <main+0x18c>)
 8001668:	2100      	movs	r1, #0
 800166a:	4859      	ldr	r0, [pc, #356]	; (80017d0 <main+0x190>)
 800166c:	f002 fd32 	bl	80040d4 <HAL_DMA_RegisterCallback>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8001670:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001674:	4957      	ldr	r1, [pc, #348]	; (80017d4 <main+0x194>)
 8001676:	4858      	ldr	r0, [pc, #352]	; (80017d8 <main+0x198>)
 8001678:	f001 fb08 	bl	8002c8c <HAL_ADC_Start_DMA>
	audio_fft_M1.sampling_frequency = 66667;
 800167c:	4b57      	ldr	r3, [pc, #348]	; (80017dc <main+0x19c>)
 800167e:	4a58      	ldr	r2, [pc, #352]	; (80017e0 <main+0x1a0>)
 8001680:	601a      	str	r2, [r3, #0]
	audio_fft_M1.FFT_len = 512;
 8001682:	4b56      	ldr	r3, [pc, #344]	; (80017dc <main+0x19c>)
 8001684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001688:	605a      	str	r2, [r3, #4]
	audio_fft_M1.overlap = 0.5f;
 800168a:	4b54      	ldr	r3, [pc, #336]	; (80017dc <main+0x19c>)
 800168c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001690:	609a      	str	r2, [r3, #8]
	audio_fft_M1.win_type = AUDIO_FTT_HANNING_WIN;
 8001692:	4b52      	ldr	r3, [pc, #328]	; (80017dc <main+0x19c>)
 8001694:	2202      	movs	r2, #2
 8001696:	60da      	str	r2, [r3, #12]
	audio_fft_M1.output = MAGNITUDE;
 8001698:	4b50      	ldr	r3, [pc, #320]	; (80017dc <main+0x19c>)
 800169a:	2201      	movs	r2, #1
 800169c:	611a      	str	r2, [r3, #16]
	AUDIO_FFT_Init(&audio_fft_M1);
 800169e:	484f      	ldr	r0, [pc, #316]	; (80017dc <main+0x19c>)
 80016a0:	f7ff fc4a 	bl	8000f38 <AUDIO_FFT_Init>

	/* Allocate output buffer */
	FFT_Out = calloc(audio_fft_M1.FFT_len / 2, sizeof(float));
 80016a4:	4b4d      	ldr	r3, [pc, #308]	; (80017dc <main+0x19c>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	085b      	lsrs	r3, r3, #1
 80016aa:	2104      	movs	r1, #4
 80016ac:	4618      	mov	r0, r3
 80016ae:	f00b f8f5 	bl	800c89c <calloc>
 80016b2:	4603      	mov	r3, r0
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b4b      	ldr	r3, [pc, #300]	; (80017e4 <main+0x1a4>)
 80016b8:	601a      	str	r2, [r3, #0]
	FFT_Average = calloc(audio_fft_M1.FFT_len / 2, sizeof(float));
 80016ba:	4b48      	ldr	r3, [pc, #288]	; (80017dc <main+0x19c>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	085b      	lsrs	r3, r3, #1
 80016c0:	2104      	movs	r1, #4
 80016c2:	4618      	mov	r0, r3
 80016c4:	f00b f8ea 	bl	800c89c <calloc>
 80016c8:	4603      	mov	r3, r0
 80016ca:	461a      	mov	r2, r3
 80016cc:	4b46      	ldr	r3, [pc, #280]	; (80017e8 <main+0x1a8>)
 80016ce:	601a      	str	r2, [r3, #0]
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (completo==1)
 80016d0:	4b46      	ldr	r3, [pc, #280]	; (80017ec <main+0x1ac>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d167      	bne.n	80017a8 <main+0x168>
		{
			HAL_ADC_Stop_DMA(&hadc1);
 80016d8:	483f      	ldr	r0, [pc, #252]	; (80017d8 <main+0x198>)
 80016da:	f001 fb5b 	bl	8002d94 <HAL_ADC_Stop_DMA>
			AUDIO_FFT_Data_Input(adc_buf, ADC_BUF_LEN, &audio_fft_M1);
 80016de:	4a3f      	ldr	r2, [pc, #252]	; (80017dc <main+0x19c>)
 80016e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016e4:	483b      	ldr	r0, [pc, #236]	; (80017d4 <main+0x194>)
 80016e6:	f7ff fcf1 	bl	80010cc <AUDIO_FFT_Data_Input>
			AUDIO_FFT_Process(&audio_fft_M1, FFT_Out);
 80016ea:	4b3e      	ldr	r3, [pc, #248]	; (80017e4 <main+0x1a4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4619      	mov	r1, r3
 80016f0:	483a      	ldr	r0, [pc, #232]	; (80017dc <main+0x19c>)
 80016f2:	f7ff fd55 	bl	80011a0 <AUDIO_FFT_Process>
			completo = 2;
 80016f6:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <main+0x1ac>)
 80016f8:	2202      	movs	r2, #2
 80016fa:	701a      	strb	r2, [r3, #0]
//				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
//				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
//			}
//			prueba[0] = 0xab;
//			prueba[1] =	0xcd;
			int j=0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8001702:	f102 0210 	add.w	r2, r2, #16
 8001706:	6013      	str	r3, [r2, #0]
			for (int i = 0; i<512; i++){
 8001708:	2300      	movs	r3, #0
 800170a:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 800170e:	f102 0214 	add.w	r2, r2, #20
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	e03a      	b.n	800178c <main+0x14c>
//				if (FFT_Out[i/2] >= 1) {
//					mayores[j]=i/2;
//					j++;
//				}
				prueba[i] = 20 * log(FFT_Out[i]/256);
 8001716:	4b33      	ldr	r3, [pc, #204]	; (80017e4 <main+0x1a4>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 800171e:	f103 0314 	add.w	r3, r3, #20
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	edd3 7a00 	vldr	s15, [r3]
 800172c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80017f0 <main+0x1b0>
 8001730:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001734:	ee16 0a90 	vmov	r0, s13
 8001738:	f7fe ff26 	bl	8000588 <__aeabi_f2d>
 800173c:	4603      	mov	r3, r0
 800173e:	460c      	mov	r4, r1
 8001740:	ec44 3b10 	vmov	d0, r3, r4
 8001744:	f00b fa08 	bl	800cb58 <log>
 8001748:	ec51 0b10 	vmov	r0, r1, d0
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	4b28      	ldr	r3, [pc, #160]	; (80017f4 <main+0x1b4>)
 8001752:	f7fe ff71 	bl	8000638 <__aeabi_dmul>
 8001756:	4603      	mov	r3, r0
 8001758:	460c      	mov	r4, r1
 800175a:	4619      	mov	r1, r3
 800175c:	4622      	mov	r2, r4
 800175e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001762:	3b18      	subs	r3, #24
 8001764:	f507 5020 	add.w	r0, r7, #10240	; 0x2800
 8001768:	f100 0014 	add.w	r0, r0, #20
 800176c:	6800      	ldr	r0, [r0, #0]
 800176e:	00c0      	lsls	r0, r0, #3
 8001770:	4403      	add	r3, r0
 8001772:	e9c3 1200 	strd	r1, r2, [r3]
			for (int i = 0; i<512; i++){
 8001776:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 800177a:	f103 0314 	add.w	r3, r3, #20
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	3301      	adds	r3, #1
 8001782:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8001786:	f102 0214 	add.w	r2, r2, #20
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001790:	f103 0314 	add.w	r3, r3, #20
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800179a:	dbbc      	blt.n	8001716 <main+0xd6>
//				prueba[i+2]=((uint16_t)(FFT_Out[i/2]))>>8;

			}
			//			huart2.Instance->CR3 |= USART_CR3_DMAT;
			//HAL_DMA_Start_IT(&hdma_usart2_tx, (uint32_t)FFT_Out, (uint32_t)&huart2.Instance->TDR, sizeof(FFT_Out));
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 800179c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017a0:	490c      	ldr	r1, [pc, #48]	; (80017d4 <main+0x194>)
 80017a2:	480d      	ldr	r0, [pc, #52]	; (80017d8 <main+0x198>)
 80017a4:	f001 fa72 	bl	8002c8c <HAL_ADC_Start_DMA>

		}

		if (completo==2){
 80017a8:	4b10      	ldr	r3, [pc, #64]	; (80017ec <main+0x1ac>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d18f      	bne.n	80016d0 <main+0x90>
//			CDC_Transmit_FS(&prueba, 1);
//			HAL_Delay(10);
//			huart2.Instance->CR3 |= USART_CR3_DMAT;
//			HAL_DMA_Start_IT(&hdma_usart2_tx, (uint32_t)FFT_Out, (uint32_t)&huart2.Instance->TDR, sizeof(FFT_Out));

			HAL_UART_Transmit(&huart2, prueba, sizeof(prueba),1000000);
 80017b0:	f607 0118 	addw	r1, r7, #2072	; 0x818
 80017b4:	3918      	subs	r1, #24
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <main+0x1b8>)
 80017b8:	f242 0210 	movw	r2, #8208	; 0x2010
 80017bc:	480f      	ldr	r0, [pc, #60]	; (80017fc <main+0x1bc>)
 80017be:	f005 fd45 	bl	800724c <HAL_UART_Transmit>
			//			HAL_UART_Transmit_IT(&huart2, (uint16_t)FFT_Out, 512);
			HAL_Delay(1000);
 80017c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017c6:	f000 fecd 	bl	8002564 <HAL_Delay>
		if (completo==1)
 80017ca:	e781      	b.n	80016d0 <main+0x90>
 80017cc:	08002051 	.word	0x08002051
 80017d0:	20000290 	.word	0x20000290
 80017d4:	200003a4 	.word	0x200003a4
 80017d8:	20000228 	.word	0x20000228
 80017dc:	20000354 	.word	0x20000354
 80017e0:	0001046b 	.word	0x0001046b
 80017e4:	200003a0 	.word	0x200003a0
 80017e8:	200002f0 	.word	0x200002f0
 80017ec:	20000214 	.word	0x20000214
 80017f0:	43800000 	.word	0x43800000
 80017f4:	40340000 	.word	0x40340000
 80017f8:	000f4240 	.word	0x000f4240
 80017fc:	200023a4 	.word	0x200023a4

08001800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b0be      	sub	sp, #248	; 0xf8
 8001804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001806:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800180a:	2244      	movs	r2, #68	; 0x44
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f00b f891 	bl	800c936 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001814:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	229c      	movs	r2, #156	; 0x9c
 8001828:	2100      	movs	r1, #0
 800182a:	4618      	mov	r0, r3
 800182c:	f00b f883 	bl	800c936 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001830:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001834:	f003 ffbc 	bl	80057b0 <HAL_PWREx_ControlVoltageScaling>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <SystemClock_Config+0x42>
  {
    Error_Handler();
 800183e:	f000 fc39 	bl	80020b4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001842:	2322      	movs	r3, #34	; 0x22
 8001844:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001848:	f44f 7380 	mov.w	r3, #256	; 0x100
 800184c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001850:	2301      	movs	r3, #1
 8001852:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001856:	2340      	movs	r3, #64	; 0x40
 8001858:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800185c:	2300      	movs	r3, #0
 800185e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001862:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001866:	4618      	mov	r0, r3
 8001868:	f004 f866 	bl	8005938 <HAL_RCC_OscConfig>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001872:	f000 fc1f 	bl	80020b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001876:	230f      	movs	r3, #15
 8001878:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800187c:	2301      	movs	r3, #1
 800187e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001882:	2300      	movs	r3, #0
 8001884:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001888:	2300      	movs	r3, #0
 800188a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800188e:	2300      	movs	r3, #0
 8001890:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001894:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001898:	2100      	movs	r1, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f004 fc72 	bl	8006184 <HAL_RCC_ClockConfig>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80018a6:	f000 fc05 	bl	80020b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USB
 80018aa:	f246 0302 	movw	r3, #24578	; 0x6002
 80018ae:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018b0:	2300      	movs	r3, #0
 80018b2:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80018b4:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80018b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80018bc:	2300      	movs	r3, #0
 80018be:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	4618      	mov	r0, r3
 80018c4:	f004 ff0a 	bl	80066dc <HAL_RCCEx_PeriphCLKConfig>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80018ce:	f000 fbf1 	bl	80020b4 <Error_Handler>
  }
}
 80018d2:	bf00      	nop
 80018d4:	37f8      	adds	r7, #248	; 0xf8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018e2:	463b      	mov	r3, r7
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
 80018f0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80018f2:	4b29      	ldr	r3, [pc, #164]	; (8001998 <MX_ADC1_Init+0xbc>)
 80018f4:	4a29      	ldr	r2, [pc, #164]	; (800199c <MX_ADC1_Init+0xc0>)
 80018f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 80018f8:	4b27      	ldr	r3, [pc, #156]	; (8001998 <MX_ADC1_Init+0xbc>)
 80018fa:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 80018fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001900:	4b25      	ldr	r3, [pc, #148]	; (8001998 <MX_ADC1_Init+0xbc>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001906:	4b24      	ldr	r3, [pc, #144]	; (8001998 <MX_ADC1_Init+0xbc>)
 8001908:	2200      	movs	r2, #0
 800190a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800190c:	4b22      	ldr	r3, [pc, #136]	; (8001998 <MX_ADC1_Init+0xbc>)
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001912:	4b21      	ldr	r3, [pc, #132]	; (8001998 <MX_ADC1_Init+0xbc>)
 8001914:	2204      	movs	r2, #4
 8001916:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001918:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <MX_ADC1_Init+0xbc>)
 800191a:	2200      	movs	r2, #0
 800191c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800191e:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <MX_ADC1_Init+0xbc>)
 8001920:	2201      	movs	r2, #1
 8001922:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001924:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <MX_ADC1_Init+0xbc>)
 8001926:	2201      	movs	r2, #1
 8001928:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800192a:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <MX_ADC1_Init+0xbc>)
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001932:	4b19      	ldr	r3, [pc, #100]	; (8001998 <MX_ADC1_Init+0xbc>)
 8001934:	2200      	movs	r2, #0
 8001936:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001938:	4b17      	ldr	r3, [pc, #92]	; (8001998 <MX_ADC1_Init+0xbc>)
 800193a:	2200      	movs	r2, #0
 800193c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800193e:	4b16      	ldr	r3, [pc, #88]	; (8001998 <MX_ADC1_Init+0xbc>)
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001946:	4b14      	ldr	r3, [pc, #80]	; (8001998 <MX_ADC1_Init+0xbc>)
 8001948:	2200      	movs	r2, #0
 800194a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <MX_ADC1_Init+0xbc>)
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001954:	4810      	ldr	r0, [pc, #64]	; (8001998 <MX_ADC1_Init+0xbc>)
 8001956:	f001 f84f 	bl	80029f8 <HAL_ADC_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001960:	f000 fba8 	bl	80020b4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001964:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <MX_ADC1_Init+0xc4>)
 8001966:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001968:	2306      	movs	r3, #6
 800196a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800196c:	2300      	movs	r3, #0
 800196e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;//ADC_SINGLE_ENDED
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_ADC1_Init+0xc8>)
 8001972:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001974:	2304      	movs	r3, #4
 8001976:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800197c:	463b      	mov	r3, r7
 800197e:	4619      	mov	r1, r3
 8001980:	4805      	ldr	r0, [pc, #20]	; (8001998 <MX_ADC1_Init+0xbc>)
 8001982:	f001 fa73 	bl	8002e6c <HAL_ADC_ConfigChannel>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800198c:	f000 fb92 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001990:	bf00      	nop
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000228 	.word	0x20000228
 800199c:	50040000 	.word	0x50040000
 80019a0:	04300002 	.word	0x04300002
 80019a4:	407f0000 	.word	0x407f0000

080019a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019ac:	4b22      	ldr	r3, [pc, #136]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 80019ae:	4a23      	ldr	r2, [pc, #140]	; (8001a3c <MX_USART2_UART_Init+0x94>)
 80019b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019b2:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 80019b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019ba:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019c0:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019c6:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019cc:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 80019ce:	220c      	movs	r2, #12
 80019d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019d2:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d8:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 80019da:	2200      	movs	r2, #0
 80019dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019de:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019e4:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019ea:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019f0:	4811      	ldr	r0, [pc, #68]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 80019f2:	f005 fbdb 	bl	80071ac <HAL_UART_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80019fc:	f000 fb5a 	bl	80020b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a00:	2100      	movs	r1, #0
 8001a02:	480d      	ldr	r0, [pc, #52]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 8001a04:	f006 f92f 	bl	8007c66 <HAL_UARTEx_SetTxFifoThreshold>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001a0e:	f000 fb51 	bl	80020b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a12:	2100      	movs	r1, #0
 8001a14:	4808      	ldr	r0, [pc, #32]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 8001a16:	f006 f964 	bl	8007ce2 <HAL_UARTEx_SetRxFifoThreshold>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001a20:	f000 fb48 	bl	80020b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a24:	4804      	ldr	r0, [pc, #16]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 8001a26:	f006 f8e5 	bl	8007bf4 <HAL_UARTEx_DisableFifoMode>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001a30:	f000 fb40 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	200023a4 	.word	0x200023a4
 8001a3c:	40004400 	.word	0x40004400

08001a40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a46:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <MX_DMA_Init+0x60>)
 8001a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a4a:	4a15      	ldr	r2, [pc, #84]	; (8001aa0 <MX_DMA_Init+0x60>)
 8001a4c:	f043 0304 	orr.w	r3, r3, #4
 8001a50:	6493      	str	r3, [r2, #72]	; 0x48
 8001a52:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <MX_DMA_Init+0x60>)
 8001a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <MX_DMA_Init+0x60>)
 8001a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a62:	4a0f      	ldr	r2, [pc, #60]	; (8001aa0 <MX_DMA_Init+0x60>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6493      	str	r3, [r2, #72]	; 0x48
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <MX_DMA_Init+0x60>)
 8001a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	603b      	str	r3, [r7, #0]
 8001a74:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	200b      	movs	r0, #11
 8001a7c:	f002 f8c5 	bl	8003c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a80:	200b      	movs	r0, #11
 8001a82:	f002 f8de 	bl	8003c42 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	200c      	movs	r0, #12
 8001a8c:	f002 f8bd 	bl	8003c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a90:	200c      	movs	r0, #12
 8001a92:	f002 f8d6 	bl	8003c42 <HAL_NVIC_EnableIRQ>

}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40021000 	.word	0x40021000

08001aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08e      	sub	sp, #56	; 0x38
 8001aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
 8001ab8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aba:	4bb6      	ldr	r3, [pc, #728]	; (8001d94 <MX_GPIO_Init+0x2f0>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abe:	4ab5      	ldr	r2, [pc, #724]	; (8001d94 <MX_GPIO_Init+0x2f0>)
 8001ac0:	f043 0310 	orr.w	r3, r3, #16
 8001ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac6:	4bb3      	ldr	r3, [pc, #716]	; (8001d94 <MX_GPIO_Init+0x2f0>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aca:	f003 0310 	and.w	r3, r3, #16
 8001ace:	623b      	str	r3, [r7, #32]
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad2:	4bb0      	ldr	r3, [pc, #704]	; (8001d94 <MX_GPIO_Init+0x2f0>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad6:	4aaf      	ldr	r2, [pc, #700]	; (8001d94 <MX_GPIO_Init+0x2f0>)
 8001ad8:	f043 0302 	orr.w	r3, r3, #2
 8001adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ade:	4bad      	ldr	r3, [pc, #692]	; (8001d94 <MX_GPIO_Init+0x2f0>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	61fb      	str	r3, [r7, #28]
 8001ae8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aea:	4baa      	ldr	r3, [pc, #680]	; (8001d94 <MX_GPIO_Init+0x2f0>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aee:	4aa9      	ldr	r2, [pc, #676]	; (8001d94 <MX_GPIO_Init+0x2f0>)
 8001af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af6:	4ba7      	ldr	r3, [pc, #668]	; (8001d94 <MX_GPIO_Init+0x2f0>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001afe:	61bb      	str	r3, [r7, #24]
 8001b00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b02:	4ba4      	ldr	r3, [pc, #656]	; (8001d94 <MX_GPIO_Init+0x2f0>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	4aa3      	ldr	r2, [pc, #652]	; (8001d94 <MX_GPIO_Init+0x2f0>)
 8001b08:	f043 0304 	orr.w	r3, r3, #4
 8001b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b0e:	4ba1      	ldr	r3, [pc, #644]	; (8001d94 <MX_GPIO_Init+0x2f0>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	4b9e      	ldr	r3, [pc, #632]	; (8001d94 <MX_GPIO_Init+0x2f0>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	4a9d      	ldr	r2, [pc, #628]	; (8001d94 <MX_GPIO_Init+0x2f0>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b26:	4b9b      	ldr	r3, [pc, #620]	; (8001d94 <MX_GPIO_Init+0x2f0>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b32:	4b98      	ldr	r3, [pc, #608]	; (8001d94 <MX_GPIO_Init+0x2f0>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	4a97      	ldr	r2, [pc, #604]	; (8001d94 <MX_GPIO_Init+0x2f0>)
 8001b38:	f043 0308 	orr.w	r3, r3, #8
 8001b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b3e:	4b95      	ldr	r3, [pc, #596]	; (8001d94 <MX_GPIO_Init+0x2f0>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b4a:	4b92      	ldr	r3, [pc, #584]	; (8001d94 <MX_GPIO_Init+0x2f0>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4e:	4a91      	ldr	r2, [pc, #580]	; (8001d94 <MX_GPIO_Init+0x2f0>)
 8001b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b56:	4b8f      	ldr	r3, [pc, #572]	; (8001d94 <MX_GPIO_Init+0x2f0>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8001b62:	f003 fed9 	bl	8005918 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b66:	4b8b      	ldr	r3, [pc, #556]	; (8001d94 <MX_GPIO_Init+0x2f0>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6a:	4a8a      	ldr	r2, [pc, #552]	; (8001d94 <MX_GPIO_Init+0x2f0>)
 8001b6c:	f043 0320 	orr.w	r3, r3, #32
 8001b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b72:	4b88      	ldr	r3, [pc, #544]	; (8001d94 <MX_GPIO_Init+0x2f0>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	f003 0320 	and.w	r3, r3, #32
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|DCDC_2_EN_Pin, GPIO_PIN_RESET);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f242 0102 	movw	r1, #8194	; 0x2002
 8001b84:	4884      	ldr	r0, [pc, #528]	; (8001d98 <MX_GPIO_Init+0x2f4>)
 8001b86:	f002 fd21 	bl	80045cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin, GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f648 0181 	movw	r1, #34945	; 0x8881
 8001b90:	4882      	ldr	r0, [pc, #520]	; (8001d9c <MX_GPIO_Init+0x2f8>)
 8001b92:	f002 fd1b 	bl	80045cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RST_GPIO_Port, BLE_RST_Pin, GPIO_PIN_RESET);
 8001b96:	2200      	movs	r2, #0
 8001b98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba0:	f002 fd14 	bl	80045cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2140      	movs	r1, #64	; 0x40
 8001ba8:	487d      	ldr	r0, [pc, #500]	; (8001da0 <MX_GPIO_Init+0x2fc>)
 8001baa:	f002 fd0f 	bl	80045cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f247 5128 	movw	r1, #29992	; 0x7528
 8001bb4:	487b      	ldr	r0, [pc, #492]	; (8001da4 <MX_GPIO_Init+0x300>)
 8001bb6:	f002 fd09 	bl	80045cc <HAL_GPIO_WritePin>
                          |WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BLE_SPI_CS_Pin|SEL1_2_Pin, GPIO_PIN_RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2121      	movs	r1, #33	; 0x21
 8001bbe:	487a      	ldr	r0, [pc, #488]	; (8001da8 <MX_GPIO_Init+0x304>)
 8001bc0:	f002 fd04 	bl	80045cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_MOSI_p2_Pin|PB11_Pin, GPIO_PIN_RESET);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8001bca:	4878      	ldr	r0, [pc, #480]	; (8001dac <MX_GPIO_Init+0x308>)
 8001bcc:	f002 fcfe 	bl	80045cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BOOT0_PE0_Pin BLE_TEST8_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0_Pin|BLE_TEST8_Pin;
 8001bd0:	f240 4301 	movw	r3, #1025	; 0x401
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be2:	4619      	mov	r1, r3
 8001be4:	486c      	ldr	r0, [pc, #432]	; (8001d98 <MX_GPIO_Init+0x2f4>)
 8001be6:	f002 fb5f 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9_Pin PB8_Pin PB14_Pin CHRGB0_Pin */
  GPIO_InitStruct.Pin = PB9_Pin|PB8_Pin|PB14_Pin|CHRGB0_Pin;
 8001bea:	f244 3301 	movw	r3, #17153	; 0x4301
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	486b      	ldr	r0, [pc, #428]	; (8001dac <MX_GPIO_Init+0x308>)
 8001c00:	f002 fb52 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT0_PE0H3_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0H3_Pin;
 8001c04:	2308      	movs	r3, #8
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT0_PE0H3_GPIO_Port, &GPIO_InitStruct);
 8001c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c14:	4619      	mov	r1, r3
 8001c16:	4866      	ldr	r0, [pc, #408]	; (8001db0 <MX_GPIO_Init+0x30c>)
 8001c18:	f002 fb46 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI3_MISO_Pin SPI3_MOSI_Pin SPI3_CLK_Pin */
  GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin|SPI3_CLK_Pin;
 8001c1c:	2338      	movs	r3, #56	; 0x38
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c2c:	2306      	movs	r3, #6
 8001c2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c34:	4619      	mov	r1, r3
 8001c36:	485d      	ldr	r0, [pc, #372]	; (8001dac <MX_GPIO_Init+0x308>)
 8001c38:	f002 fb36 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_D3_Pin SDMMC_D2_Pin SDMMC_D1_Pin SDMMC_CK_Pin
                           SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D3_Pin|SDMMC_D2_Pin|SDMMC_D1_Pin|SDMMC_CK_Pin
 8001c3c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDMMC_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c42:	2302      	movs	r3, #2
 8001c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c4e:	230c      	movs	r3, #12
 8001c50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c56:	4619      	mov	r1, r3
 8001c58:	4851      	ldr	r0, [pc, #324]	; (8001da0 <MX_GPIO_Init+0x2fc>)
 8001c5a:	f002 fb25 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_TEST9_Pin WIFI_DRDY_Pin INT1_DHC_Pin INT_STT_Pin
                           INT1_ADWB_Pin */
  GPIO_InitStruct.Pin = BLE_TEST9_Pin|WIFI_DRDY_Pin|INT1_DHC_Pin|INT_STT_Pin
 8001c5e:	f64c 1308 	movw	r3, #51464	; 0xc908
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
                          |INT1_ADWB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c64:	4b53      	ldr	r3, [pc, #332]	; (8001db4 <MX_GPIO_Init+0x310>)
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c70:	4619      	mov	r1, r3
 8001c72:	4849      	ldr	r0, [pc, #292]	; (8001d98 <MX_GPIO_Init+0x2f4>)
 8001c74:	f002 fb18 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CLK_Pin */
  GPIO_InitStruct.Pin = SPI2_CLK_Pin;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c84:	2303      	movs	r3, #3
 8001c86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c88:	2305      	movs	r3, #5
 8001c8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI2_CLK_GPIO_Port, &GPIO_InitStruct);
 8001c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c90:	4619      	mov	r1, r3
 8001c92:	4842      	ldr	r0, [pc, #264]	; (8001d9c <MX_GPIO_Init+0x2f8>)
 8001c94:	f002 fb08 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EX_PWM_Pin */
  GPIO_InitStruct.Pin = EX_PWM_Pin;
 8001c98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001caa:	2301      	movs	r3, #1
 8001cac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(EX_PWM_GPIO_Port, &GPIO_InitStruct);
 8001cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb8:	f002 faf6 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SCK_A_Pin SAI1_MCLK_A_Pin SAI1_FS_A_DFSDM_D3_Pin SAI1_SD_A_Pin
                           SAI1_SD_B_Pin */
  GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_MCLK_A_Pin|SAI1_FS_A_DFSDM_D3_Pin|SAI1_SD_A_Pin
 8001cbc:	23f4      	movs	r3, #244	; 0xf4
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
                          |SAI1_SD_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001ccc:	230d      	movs	r3, #13
 8001cce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4830      	ldr	r0, [pc, #192]	; (8001d98 <MX_GPIO_Init+0x2f4>)
 8001cd8:	f002 fae6 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin DCDC_2_EN_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|DCDC_2_EN_Pin;
 8001cdc:	f242 0302 	movw	r3, #8194	; 0x2002
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2300      	movs	r3, #0
 8001cec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4828      	ldr	r0, [pc, #160]	; (8001d98 <MX_GPIO_Init+0x2f4>)
 8001cf6:	f002 fad7 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin WIFI_WAKEUP_Pin CS_DH_Pin EX_RESET_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin;
 8001cfa:	f648 0381 	movw	r3, #34945	; 0x8881
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d00:	2301      	movs	r3, #1
 8001d02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d10:	4619      	mov	r1, r3
 8001d12:	4822      	ldr	r0, [pc, #136]	; (8001d9c <MX_GPIO_Init+0x2f8>)
 8001d14:	f002 fac8 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10_Pin PA9_Pin PA0_Pin DAC1_OUT1_Pin
                           PA1_Pin */
  GPIO_InitStruct.Pin = PA10_Pin|PA9_Pin|PA0_Pin|DAC1_OUT1_Pin
 8001d18:	f240 6313 	movw	r3, #1555	; 0x613
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
                          |PA1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d30:	f002 faba 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN5_Pin DFSDM1_D7_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN5_Pin|DFSDM1_D7_Pin;
 8001d34:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d42:	2303      	movs	r3, #3
 8001d44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001d46:	2306      	movs	r3, #6
 8001d48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4816      	ldr	r0, [pc, #88]	; (8001dac <MX_GPIO_Init+0x308>)
 8001d52:	f002 faa9 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG12_Pin PG10_Pin PG9_Pin */
  GPIO_InitStruct.Pin = PG12_Pin|PG10_Pin|PG9_Pin;
 8001d56:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d68:	4619      	mov	r1, r3
 8001d6a:	480f      	ldr	r0, [pc, #60]	; (8001da8 <MX_GPIO_Init+0x304>)
 8001d6c:	f002 fa9c 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001d70:	2304      	movs	r3, #4
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d80:	230c      	movs	r3, #12
 8001d82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4804      	ldr	r0, [pc, #16]	; (8001d9c <MX_GPIO_Init+0x2f8>)
 8001d8c:	f002 fa8c 	bl	80042a8 <HAL_GPIO_Init>
 8001d90:	e012      	b.n	8001db8 <MX_GPIO_Init+0x314>
 8001d92:	bf00      	nop
 8001d94:	40021000 	.word	0x40021000
 8001d98:	48001000 	.word	0x48001000
 8001d9c:	48000c00 	.word	0x48000c00
 8001da0:	48000800 	.word	0x48000800
 8001da4:	48001400 	.word	0x48001400
 8001da8:	48001800 	.word	0x48001800
 8001dac:	48000400 	.word	0x48000400
 8001db0:	48001c00 	.word	0x48001c00
 8001db4:	10110000 	.word	0x10110000

  /*Configure GPIO pin : BLE_RST_Pin */
  GPIO_InitStruct.Pin = BLE_RST_Pin;
 8001db8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BLE_RST_GPIO_Port, &GPIO_InitStruct);
 8001dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dce:	4619      	mov	r1, r3
 8001dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd4:	f002 fa68 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 8001dd8:	2340      	movs	r3, #64	; 0x40
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	2300      	movs	r3, #0
 8001de6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 8001de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dec:	4619      	mov	r1, r3
 8001dee:	4891      	ldr	r0, [pc, #580]	; (8002034 <MX_GPIO_Init+0x590>)
 8001df0:	f002 fa5a 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C2_SMBA_Pin I2C2_SDA_Pin I2C2_SDAF0_Pin */
  GPIO_InitStruct.Pin = I2C2_SMBA_Pin|I2C2_SDA_Pin|I2C2_SDAF0_Pin;
 8001df4:	2307      	movs	r3, #7
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001df8:	2312      	movs	r3, #18
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e00:	2303      	movs	r3, #3
 8001e02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e04:	2304      	movs	r3, #4
 8001e06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	488a      	ldr	r0, [pc, #552]	; (8002038 <MX_GPIO_Init+0x594>)
 8001e10:	f002 fa4a 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_WIFI_Pin C_EN_Pin CS_ADWB_Pin STSAFE_RESET_Pin
                           WIFI_BOOT0_Pin CS_DHC_Pin SEL3_4_Pin */
  GPIO_InitStruct.Pin = CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 8001e14:	f247 5328 	movw	r3, #29992	; 0x7528
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
                          |WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e22:	2300      	movs	r3, #0
 8001e24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4882      	ldr	r0, [pc, #520]	; (8002038 <MX_GPIO_Init+0x594>)
 8001e2e:	f002 fa3b 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C3_SDA_Pin I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 8001e32:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e38:	2312      	movs	r3, #18
 8001e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e40:	2303      	movs	r3, #3
 8001e42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e44:	2304      	movs	r3, #4
 8001e46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	487b      	ldr	r0, [pc, #492]	; (800203c <MX_GPIO_Init+0x598>)
 8001e50:	f002 fa2a 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_SEL_Pin */
  GPIO_InitStruct.Pin = SW_SEL_Pin;
 8001e54:	2340      	movs	r3, #64	; 0x40
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e60:	2302      	movs	r3, #2
 8001e62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001e64:	2302      	movs	r3, #2
 8001e66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SW_SEL_GPIO_Port, &GPIO_InitStruct);
 8001e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4872      	ldr	r0, [pc, #456]	; (8002038 <MX_GPIO_Init+0x594>)
 8001e70:	f002 fa1a 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_DHC_Pin PGOOD_Pin INT_M_Pin */
  GPIO_InitStruct.Pin = INT2_DHC_Pin|PGOOD_Pin|INT_M_Pin;
 8001e74:	f44f 7324 	mov.w	r3, #656	; 0x290
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e7a:	4b71      	ldr	r3, [pc, #452]	; (8002040 <MX_GPIO_Init+0x59c>)
 8001e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e86:	4619      	mov	r1, r3
 8001e88:	486b      	ldr	r0, [pc, #428]	; (8002038 <MX_GPIO_Init+0x594>)
 8001e8a:	f002 fa0d 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin SPI1_CLK_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin|SPI1_CLK_Pin;
 8001e8e:	231c      	movs	r3, #28
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
 8001e94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e9e:	2305      	movs	r3, #5
 8001ea0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4864      	ldr	r0, [pc, #400]	; (800203c <MX_GPIO_Init+0x598>)
 8001eaa:	f002 f9fd 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_SPI_CS_Pin SEL1_2_Pin */
  GPIO_InitStruct.Pin = BLE_SPI_CS_Pin|SEL1_2_Pin;
 8001eae:	2321      	movs	r3, #33	; 0x21
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	485d      	ldr	r0, [pc, #372]	; (800203c <MX_GPIO_Init+0x598>)
 8001ec6:	f002 f9ef 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_HTS_Pin BLE_INT_Pin */
  GPIO_InitStruct.Pin = INT_HTS_Pin|BLE_INT_Pin;
 8001eca:	2342      	movs	r3, #66	; 0x42
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ece:	4b5c      	ldr	r3, [pc, #368]	; (8002040 <MX_GPIO_Init+0x59c>)
 8001ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eda:	4619      	mov	r1, r3
 8001edc:	4857      	ldr	r0, [pc, #348]	; (800203c <MX_GPIO_Init+0x598>)
 8001ede:	f002 f9e3 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C4_SCL_Pin I2C4_SDA_Pin */
  GPIO_InitStruct.Pin = I2C4_SCL_Pin|I2C4_SDA_Pin;
 8001ee2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ee8:	2312      	movs	r3, #18
 8001eea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eec:	2301      	movs	r3, #1
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001efc:	4619      	mov	r1, r3
 8001efe:	4851      	ldr	r0, [pc, #324]	; (8002044 <MX_GPIO_Init+0x5a0>)
 8001f00:	f002 f9d2 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MISO_Pin SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8001f04:	230c      	movs	r3, #12
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f10:	2303      	movs	r3, #3
 8001f12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f14:	2305      	movs	r3, #5
 8001f16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4845      	ldr	r0, [pc, #276]	; (8002034 <MX_GPIO_Init+0x590>)
 8001f20:	f002 f9c2 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_ADWB_Pin SD_DETECT_Pin */
  GPIO_InitStruct.Pin = INT2_ADWB_Pin|SD_DETECT_Pin;
 8001f24:	f241 0304 	movw	r3, #4100	; 0x1004
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f36:	4619      	mov	r1, r3
 8001f38:	4843      	ldr	r0, [pc, #268]	; (8002048 <MX_GPIO_Init+0x5a4>)
 8001f3a:	f002 f9b5 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHRG_Pin */
  GPIO_InitStruct.Pin = CHRG_Pin;
 8001f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f44:	2300      	movs	r3, #0
 8001f46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHRG_GPIO_Port, &GPIO_InitStruct);
 8001f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f50:	4619      	mov	r1, r3
 8001f52:	4839      	ldr	r0, [pc, #228]	; (8002038 <MX_GPIO_Init+0x594>)
 8001f54:	f002 f9a8 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PWR_Pin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 8001f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f5e:	4b38      	ldr	r3, [pc, #224]	; (8002040 <MX_GPIO_Init+0x59c>)
 8001f60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8001f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4835      	ldr	r0, [pc, #212]	; (8002044 <MX_GPIO_Init+0x5a0>)
 8001f6e:	f002 f99b 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8001f72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f80:	2303      	movs	r3, #3
 8001f82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f84:	2307      	movs	r3, #7
 8001f86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	482d      	ldr	r0, [pc, #180]	; (8002044 <MX_GPIO_Init+0x5a0>)
 8001f90:	f002 f98a 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RTS_Pin USART3_CTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin|USART3_CTS_Pin;
 8001f94:	f242 0302 	movw	r3, #8194	; 0x2002
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fa6:	2307      	movs	r3, #7
 8001fa8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4825      	ldr	r0, [pc, #148]	; (8002048 <MX_GPIO_Init+0x5a4>)
 8001fb2:	f002 f979 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001fb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001fc8:	2306      	movs	r3, #6
 8001fca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	481e      	ldr	r0, [pc, #120]	; (800204c <MX_GPIO_Init+0x5a8>)
 8001fd4:	f002 f968 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MOSI_p2_Pin PB11_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|PB11_Pin;
 8001fd8:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4815      	ldr	r0, [pc, #84]	; (8002048 <MX_GPIO_Init+0x5a4>)
 8001ff2:	f002 f959 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT2_DH_Pin */
  GPIO_InitStruct.Pin = INT2_DH_Pin;
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <MX_GPIO_Init+0x59c>)
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT2_DH_GPIO_Port, &GPIO_InitStruct);
 8002002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002006:	4619      	mov	r1, r3
 8002008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800200c:	f002 f94c 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12_Pin */
  GPIO_InitStruct.Pin = PE12_Pin;
 8002010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002016:	2303      	movs	r3, #3
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PE12_GPIO_Port, &GPIO_InitStruct);
 800201e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002022:	4619      	mov	r1, r3
 8002024:	4809      	ldr	r0, [pc, #36]	; (800204c <MX_GPIO_Init+0x5a8>)
 8002026:	f002 f93f 	bl	80042a8 <HAL_GPIO_Init>

}
 800202a:	bf00      	nop
 800202c:	3738      	adds	r7, #56	; 0x38
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	48000800 	.word	0x48000800
 8002038:	48001400 	.word	0x48001400
 800203c:	48001800 	.word	0x48001800
 8002040:	10110000 	.word	0x10110000
 8002044:	48000c00 	.word	0x48000c00
 8002048:	48000400 	.word	0x48000400
 800204c:	48001000 	.word	0x48001000

08002050 <DMATransferComplete>:

/* USER CODE BEGIN 4 */
void DMATransferComplete(DMA_HandleTypeDef *hdma) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]

	// Disable UART DMA mode
	huart2.Instance->CR3 &= ~USART_CR3_DMAT;
 8002058:	4b07      	ldr	r3, [pc, #28]	; (8002078 <DMATransferComplete+0x28>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <DMATransferComplete+0x28>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002066:	609a      	str	r2, [r3, #8]

	// Toggle LD2
	HAL_GPIO_TogglePin(GPIOE, LED1_Pin);
 8002068:	2102      	movs	r1, #2
 800206a:	4804      	ldr	r0, [pc, #16]	; (800207c <DMATransferComplete+0x2c>)
 800206c:	f002 fac6 	bl	80045fc <HAL_GPIO_TogglePin>
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	200023a4 	.word	0x200023a4
 800207c:	48001000 	.word	0x48001000

08002080 <HAL_ADC_ConvHalfCpltCallback>:
//Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
	// Toggle LD2

//	completo = 1;
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_ADC_ConvCpltCallback>:

//Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
	// Toggle LD2
	//HAL_GPIO_TogglePin(GPIOE, LED1_Pin);
	completo = 1;
 800209c:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <HAL_ADC_ConvCpltCallback+0x1c>)
 800209e:	2201      	movs	r2, #1
 80020a0:	701a      	strb	r2, [r3, #0]
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000214 	.word	0x20000214

080020b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020b8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80020ba:	e7fe      	b.n	80020ba <Error_Handler+0x6>

080020bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <HAL_MspInit+0x44>)
 80020c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c6:	4a0e      	ldr	r2, [pc, #56]	; (8002100 <HAL_MspInit+0x44>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	6613      	str	r3, [r2, #96]	; 0x60
 80020ce:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <HAL_MspInit+0x44>)
 80020d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	607b      	str	r3, [r7, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <HAL_MspInit+0x44>)
 80020dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020de:	4a08      	ldr	r2, [pc, #32]	; (8002100 <HAL_MspInit+0x44>)
 80020e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e4:	6593      	str	r3, [r2, #88]	; 0x58
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_MspInit+0x44>)
 80020e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	603b      	str	r3, [r7, #0]
 80020f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000

08002104 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	; 0x28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a2a      	ldr	r2, [pc, #168]	; (80021cc <HAL_ADC_MspInit+0xc8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d14e      	bne.n	80021c4 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002126:	4b2a      	ldr	r3, [pc, #168]	; (80021d0 <HAL_ADC_MspInit+0xcc>)
 8002128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212a:	4a29      	ldr	r2, [pc, #164]	; (80021d0 <HAL_ADC_MspInit+0xcc>)
 800212c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002132:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <HAL_ADC_MspInit+0xcc>)
 8002134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002136:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800213e:	4b24      	ldr	r3, [pc, #144]	; (80021d0 <HAL_ADC_MspInit+0xcc>)
 8002140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002142:	4a23      	ldr	r2, [pc, #140]	; (80021d0 <HAL_ADC_MspInit+0xcc>)
 8002144:	f043 0304 	orr.w	r3, r3, #4
 8002148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800214a:	4b21      	ldr	r3, [pc, #132]	; (80021d0 <HAL_ADC_MspInit+0xcc>)
 800214c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC1_IN1_Pin|ADC1_IN2_Pin;
 8002156:	2303      	movs	r3, #3
 8002158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800215a:	230b      	movs	r3, #11
 800215c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002162:	f107 0314 	add.w	r3, r7, #20
 8002166:	4619      	mov	r1, r3
 8002168:	481a      	ldr	r0, [pc, #104]	; (80021d4 <HAL_ADC_MspInit+0xd0>)
 800216a:	f002 f89d 	bl	80042a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800216e:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <HAL_ADC_MspInit+0xd4>)
 8002170:	4a1a      	ldr	r2, [pc, #104]	; (80021dc <HAL_ADC_MspInit+0xd8>)
 8002172:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002174:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <HAL_ADC_MspInit+0xd4>)
 8002176:	2205      	movs	r2, #5
 8002178:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800217a:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <HAL_ADC_MspInit+0xd4>)
 800217c:	2200      	movs	r2, #0
 800217e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002180:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <HAL_ADC_MspInit+0xd4>)
 8002182:	2200      	movs	r2, #0
 8002184:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002186:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <HAL_ADC_MspInit+0xd4>)
 8002188:	2280      	movs	r2, #128	; 0x80
 800218a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800218c:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <HAL_ADC_MspInit+0xd4>)
 800218e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002192:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002194:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <HAL_ADC_MspInit+0xd4>)
 8002196:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800219a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800219c:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <HAL_ADC_MspInit+0xd4>)
 800219e:	2220      	movs	r2, #32
 80021a0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80021a2:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <HAL_ADC_MspInit+0xd4>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80021a8:	480b      	ldr	r0, [pc, #44]	; (80021d8 <HAL_ADC_MspInit+0xd4>)
 80021aa:	f001 fd65 	bl	8003c78 <HAL_DMA_Init>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 80021b4:	f7ff ff7e 	bl	80020b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a07      	ldr	r2, [pc, #28]	; (80021d8 <HAL_ADC_MspInit+0xd4>)
 80021bc:	651a      	str	r2, [r3, #80]	; 0x50
 80021be:	4a06      	ldr	r2, [pc, #24]	; (80021d8 <HAL_ADC_MspInit+0xd4>)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021c4:	bf00      	nop
 80021c6:	3728      	adds	r7, #40	; 0x28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	50040000 	.word	0x50040000
 80021d0:	40021000 	.word	0x40021000
 80021d4:	48000800 	.word	0x48000800
 80021d8:	200002f4 	.word	0x200002f4
 80021dc:	40020008 	.word	0x40020008

080021e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08a      	sub	sp, #40	; 0x28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a2b      	ldr	r2, [pc, #172]	; (80022ac <HAL_UART_MspInit+0xcc>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d150      	bne.n	80022a4 <HAL_UART_MspInit+0xc4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002202:	4b2b      	ldr	r3, [pc, #172]	; (80022b0 <HAL_UART_MspInit+0xd0>)
 8002204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002206:	4a2a      	ldr	r2, [pc, #168]	; (80022b0 <HAL_UART_MspInit+0xd0>)
 8002208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800220c:	6593      	str	r3, [r2, #88]	; 0x58
 800220e:	4b28      	ldr	r3, [pc, #160]	; (80022b0 <HAL_UART_MspInit+0xd0>)
 8002210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800221a:	4b25      	ldr	r3, [pc, #148]	; (80022b0 <HAL_UART_MspInit+0xd0>)
 800221c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221e:	4a24      	ldr	r2, [pc, #144]	; (80022b0 <HAL_UART_MspInit+0xd0>)
 8002220:	f043 0308 	orr.w	r3, r3, #8
 8002224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002226:	4b22      	ldr	r3, [pc, #136]	; (80022b0 <HAL_UART_MspInit+0xd0>)
 8002228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 8002232:	2370      	movs	r3, #112	; 0x70
 8002234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002236:	2302      	movs	r3, #2
 8002238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223e:	2303      	movs	r3, #3
 8002240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002242:	2307      	movs	r3, #7
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002246:	f107 0314 	add.w	r3, r7, #20
 800224a:	4619      	mov	r1, r3
 800224c:	4819      	ldr	r0, [pc, #100]	; (80022b4 <HAL_UART_MspInit+0xd4>)
 800224e:	f002 f82b 	bl	80042a8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8002252:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <HAL_UART_MspInit+0xd8>)
 8002254:	4a19      	ldr	r2, [pc, #100]	; (80022bc <HAL_UART_MspInit+0xdc>)
 8002256:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002258:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <HAL_UART_MspInit+0xd8>)
 800225a:	221b      	movs	r2, #27
 800225c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800225e:	4b16      	ldr	r3, [pc, #88]	; (80022b8 <HAL_UART_MspInit+0xd8>)
 8002260:	2210      	movs	r2, #16
 8002262:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002264:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <HAL_UART_MspInit+0xd8>)
 8002266:	2200      	movs	r2, #0
 8002268:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800226a:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <HAL_UART_MspInit+0xd8>)
 800226c:	2280      	movs	r2, #128	; 0x80
 800226e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <HAL_UART_MspInit+0xd8>)
 8002272:	2200      	movs	r2, #0
 8002274:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <HAL_UART_MspInit+0xd8>)
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800227c:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <HAL_UART_MspInit+0xd8>)
 800227e:	2200      	movs	r2, #0
 8002280:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002282:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <HAL_UART_MspInit+0xd8>)
 8002284:	2200      	movs	r2, #0
 8002286:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002288:	480b      	ldr	r0, [pc, #44]	; (80022b8 <HAL_UART_MspInit+0xd8>)
 800228a:	f001 fcf5 	bl	8003c78 <HAL_DMA_Init>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 8002294:	f7ff ff0e 	bl	80020b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a07      	ldr	r2, [pc, #28]	; (80022b8 <HAL_UART_MspInit+0xd8>)
 800229c:	675a      	str	r2, [r3, #116]	; 0x74
 800229e:	4a06      	ldr	r2, [pc, #24]	; (80022b8 <HAL_UART_MspInit+0xd8>)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022a4:	bf00      	nop
 80022a6:	3728      	adds	r7, #40	; 0x28
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40004400 	.word	0x40004400
 80022b0:	40021000 	.word	0x40021000
 80022b4:	48000c00 	.word	0x48000c00
 80022b8:	20000290 	.word	0x20000290
 80022bc:	4002001c 	.word	0x4002001c

080022c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022c4:	e7fe      	b.n	80022c4 <NMI_Handler+0x4>

080022c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ca:	e7fe      	b.n	80022ca <HardFault_Handler+0x4>

080022cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <MemManage_Handler+0x4>

080022d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022d6:	e7fe      	b.n	80022d6 <BusFault_Handler+0x4>

080022d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022dc:	e7fe      	b.n	80022dc <UsageFault_Handler+0x4>

080022de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800230c:	f000 f90a 	bl	8002524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002310:	bf00      	nop
 8002312:	bd80      	pop	{r7, pc}

08002314 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002318:	4802      	ldr	r0, [pc, #8]	; (8002324 <DMA1_Channel1_IRQHandler+0x10>)
 800231a:	f001 fe2c 	bl	8003f76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	200002f4 	.word	0x200002f4

08002328 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800232c:	4802      	ldr	r0, [pc, #8]	; (8002338 <DMA1_Channel2_IRQHandler+0x10>)
 800232e:	f001 fe22 	bl	8003f76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000290 	.word	0x20000290

0800233c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002340:	4802      	ldr	r0, [pc, #8]	; (800234c <OTG_FS_IRQHandler+0x10>)
 8002342:	f002 fac8 	bl	80048d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20003904 	.word	0x20003904

08002350 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002358:	4a14      	ldr	r2, [pc, #80]	; (80023ac <_sbrk+0x5c>)
 800235a:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <_sbrk+0x60>)
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002364:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <_sbrk+0x64>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d102      	bne.n	8002372 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800236c:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <_sbrk+0x64>)
 800236e:	4a12      	ldr	r2, [pc, #72]	; (80023b8 <_sbrk+0x68>)
 8002370:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002372:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <_sbrk+0x64>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	429a      	cmp	r2, r3
 800237e:	d207      	bcs.n	8002390 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002380:	f00a fa94 	bl	800c8ac <__errno>
 8002384:	4602      	mov	r2, r0
 8002386:	230c      	movs	r3, #12
 8002388:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800238a:	f04f 33ff 	mov.w	r3, #4294967295
 800238e:	e009      	b.n	80023a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002390:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <_sbrk+0x64>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002396:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <_sbrk+0x64>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	4a05      	ldr	r2, [pc, #20]	; (80023b4 <_sbrk+0x64>)
 80023a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023a2:	68fb      	ldr	r3, [r7, #12]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	200a0000 	.word	0x200a0000
 80023b0:	00000400 	.word	0x00000400
 80023b4:	20000218 	.word	0x20000218
 80023b8:	20003d10 	.word	0x20003d10

080023bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023c0:	4b17      	ldr	r3, [pc, #92]	; (8002420 <SystemInit+0x64>)
 80023c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c6:	4a16      	ldr	r2, [pc, #88]	; (8002420 <SystemInit+0x64>)
 80023c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <SystemInit+0x68>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a13      	ldr	r2, [pc, #76]	; (8002424 <SystemInit+0x68>)
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <SystemInit+0x68>)
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <SystemInit+0x68>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a0f      	ldr	r2, [pc, #60]	; (8002424 <SystemInit+0x68>)
 80023e8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80023ec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80023f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80023f2:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <SystemInit+0x68>)
 80023f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023f8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023fa:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <SystemInit+0x68>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a09      	ldr	r2, [pc, #36]	; (8002424 <SystemInit+0x68>)
 8002400:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002404:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <SystemInit+0x68>)
 8002408:	2200      	movs	r2, #0
 800240a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800240c:	4b04      	ldr	r3, [pc, #16]	; (8002420 <SystemInit+0x64>)
 800240e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002412:	609a      	str	r2, [r3, #8]
#endif
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	e000ed00 	.word	0xe000ed00
 8002424:	40021000 	.word	0x40021000

08002428 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002428:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002460 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800242c:	f7ff ffc6 	bl	80023bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002430:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002432:	e003      	b.n	800243c <LoopCopyDataInit>

08002434 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002436:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002438:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800243a:	3104      	adds	r1, #4

0800243c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800243c:	480a      	ldr	r0, [pc, #40]	; (8002468 <LoopForever+0xa>)
	ldr	r3, =_edata
 800243e:	4b0b      	ldr	r3, [pc, #44]	; (800246c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002440:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002442:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002444:	d3f6      	bcc.n	8002434 <CopyDataInit>
	ldr	r2, =_sbss
 8002446:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002448:	e002      	b.n	8002450 <LoopFillZerobss>

0800244a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800244a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800244c:	f842 3b04 	str.w	r3, [r2], #4

08002450 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002450:	4b08      	ldr	r3, [pc, #32]	; (8002474 <LoopForever+0x16>)
	cmp	r2, r3
 8002452:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002454:	d3f9      	bcc.n	800244a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002456:	f00a fa2f 	bl	800c8b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800245a:	f7ff f8f1 	bl	8001640 <main>

0800245e <LoopForever>:

LoopForever:
    b LoopForever
 800245e:	e7fe      	b.n	800245e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002460:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8002464:	080213a0 	.word	0x080213a0
	ldr	r0, =_sdata
 8002468:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800246c:	200001f8 	.word	0x200001f8
	ldr	r2, =_sbss
 8002470:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 8002474:	20003d10 	.word	0x20003d10

08002478 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002478:	e7fe      	b.n	8002478 <ADC1_IRQHandler>

0800247a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002484:	2003      	movs	r0, #3
 8002486:	f001 fbb5 	bl	8003bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800248a:	2000      	movs	r0, #0
 800248c:	f000 f80e 	bl	80024ac <HAL_InitTick>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	71fb      	strb	r3, [r7, #7]
 800249a:	e001      	b.n	80024a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800249c:	f7ff fe0e 	bl	80020bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024a0:	79fb      	ldrb	r3, [r7, #7]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
	...

080024ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80024b8:	4b17      	ldr	r3, [pc, #92]	; (8002518 <HAL_InitTick+0x6c>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d023      	beq.n	8002508 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024c0:	4b16      	ldr	r3, [pc, #88]	; (800251c <HAL_InitTick+0x70>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	4b14      	ldr	r3, [pc, #80]	; (8002518 <HAL_InitTick+0x6c>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	4619      	mov	r1, r3
 80024ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80024d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d6:	4618      	mov	r0, r3
 80024d8:	f001 fbc1 	bl	8003c5e <HAL_SYSTICK_Config>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10f      	bne.n	8002502 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b0f      	cmp	r3, #15
 80024e6:	d809      	bhi.n	80024fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024e8:	2200      	movs	r2, #0
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	f04f 30ff 	mov.w	r0, #4294967295
 80024f0:	f001 fb8b 	bl	8003c0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024f4:	4a0a      	ldr	r2, [pc, #40]	; (8002520 <HAL_InitTick+0x74>)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	e007      	b.n	800250c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
 8002500:	e004      	b.n	800250c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
 8002506:	e001      	b.n	800250c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800250c:	7bfb      	ldrb	r3, [r7, #15]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000008 	.word	0x20000008
 800251c:	20000000 	.word	0x20000000
 8002520:	20000004 	.word	0x20000004

08002524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <HAL_IncTick+0x20>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	461a      	mov	r2, r3
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_IncTick+0x24>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4413      	add	r3, r2
 8002534:	4a04      	ldr	r2, [pc, #16]	; (8002548 <HAL_IncTick+0x24>)
 8002536:	6013      	str	r3, [r2, #0]
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	20000008 	.word	0x20000008
 8002548:	20002430 	.word	0x20002430

0800254c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return uwTick;
 8002550:	4b03      	ldr	r3, [pc, #12]	; (8002560 <HAL_GetTick+0x14>)
 8002552:	681b      	ldr	r3, [r3, #0]
}
 8002554:	4618      	mov	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	20002430 	.word	0x20002430

08002564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800256c:	f7ff ffee 	bl	800254c <HAL_GetTick>
 8002570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257c:	d005      	beq.n	800258a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_Delay+0x40>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4413      	add	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800258a:	bf00      	nop
 800258c:	f7ff ffde 	bl	800254c <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	429a      	cmp	r2, r3
 800259a:	d8f7      	bhi.n	800258c <HAL_Delay+0x28>
  {
  }
}
 800259c:	bf00      	nop
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20000008 	.word	0x20000008

080025a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	609a      	str	r2, [r3, #8]
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
 80025d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	609a      	str	r2, [r3, #8]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002610:	b480      	push	{r7}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
 800261c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	3360      	adds	r3, #96	; 0x60
 8002622:	461a      	mov	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b08      	ldr	r3, [pc, #32]	; (8002654 <LL_ADC_SetOffset+0x44>)
 8002632:	4013      	ands	r3, r2
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	4313      	orrs	r3, r2
 8002640:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002648:	bf00      	nop
 800264a:	371c      	adds	r7, #28
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	03fff000 	.word	0x03fff000

08002658 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3360      	adds	r3, #96	; 0x60
 8002666:	461a      	mov	r2, r3
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002678:	4618      	mov	r0, r3
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	3360      	adds	r3, #96	; 0x60
 8002694:	461a      	mov	r2, r3
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80026ae:	bf00      	nop
 80026b0:	371c      	adds	r7, #28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	615a      	str	r2, [r3, #20]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002706:	b480      	push	{r7}
 8002708:	b087      	sub	sp, #28
 800270a:	af00      	add	r7, sp, #0
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	3330      	adds	r3, #48	; 0x30
 8002716:	461a      	mov	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	0a1b      	lsrs	r3, r3, #8
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	f003 030c 	and.w	r3, r3, #12
 8002722:	4413      	add	r3, r2
 8002724:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	211f      	movs	r1, #31
 8002732:	fa01 f303 	lsl.w	r3, r1, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	401a      	ands	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	0e9b      	lsrs	r3, r3, #26
 800273e:	f003 011f 	and.w	r1, r3, #31
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f003 031f 	and.w	r3, r3, #31
 8002748:	fa01 f303 	lsl.w	r3, r1, r3
 800274c:	431a      	orrs	r2, r3
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002752:	bf00      	nop
 8002754:	371c      	adds	r7, #28
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800275e:	b480      	push	{r7}
 8002760:	b087      	sub	sp, #28
 8002762:	af00      	add	r7, sp, #0
 8002764:	60f8      	str	r0, [r7, #12]
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	3314      	adds	r3, #20
 800276e:	461a      	mov	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	0e5b      	lsrs	r3, r3, #25
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	4413      	add	r3, r2
 800277c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	0d1b      	lsrs	r3, r3, #20
 8002786:	f003 031f 	and.w	r3, r3, #31
 800278a:	2107      	movs	r1, #7
 800278c:	fa01 f303 	lsl.w	r3, r1, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	401a      	ands	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	0d1b      	lsrs	r3, r3, #20
 8002798:	f003 031f 	and.w	r3, r3, #31
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	fa01 f303 	lsl.w	r3, r1, r3
 80027a2:	431a      	orrs	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80027a8:	bf00      	nop
 80027aa:	371c      	adds	r7, #28
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027cc:	43db      	mvns	r3, r3
 80027ce:	401a      	ands	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f003 0318 	and.w	r3, r3, #24
 80027d6:	4908      	ldr	r1, [pc, #32]	; (80027f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80027d8:	40d9      	lsrs	r1, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	400b      	ands	r3, r1
 80027de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e2:	431a      	orrs	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80027ea:	bf00      	nop
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	0007ffff 	.word	0x0007ffff

080027fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800280c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6093      	str	r3, [r2, #8]
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002834:	d101      	bne.n	800283a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002858:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800285c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002880:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002884:	d101      	bne.n	800288a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028ac:	f043 0201 	orr.w	r2, r3, #1
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028d4:	f043 0202 	orr.w	r2, r3, #2
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d101      	bne.n	8002900 <LL_ADC_IsEnabled+0x18>
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <LL_ADC_IsEnabled+0x1a>
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b02      	cmp	r3, #2
 8002920:	d101      	bne.n	8002926 <LL_ADC_IsDisableOngoing+0x18>
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <LL_ADC_IsDisableOngoing+0x1a>
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002944:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002948:	f043 0204 	orr.w	r2, r3, #4
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800296c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002970:	f043 0210 	orr.w	r2, r3, #16
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b04      	cmp	r3, #4
 8002996:	d101      	bne.n	800299c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029be:	f043 0220 	orr.w	r2, r3, #32
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d101      	bne.n	80029ea <LL_ADC_INJ_IsConversionOngoing+0x18>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e12d      	b.n	8002c6e <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d109      	bne.n	8002a34 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff fb6f 	bl	8002104 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff fef1 	bl	8002820 <LL_ADC_IsDeepPowerDownEnabled>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d004      	beq.n	8002a4e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff fed7 	bl	80027fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff ff0c 	bl	8002870 <LL_ADC_IsInternalRegulatorEnabled>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d113      	bne.n	8002a86 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff fef0 	bl	8002848 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002a68:	4b83      	ldr	r3, [pc, #524]	; (8002c78 <HAL_ADC_Init+0x280>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	099b      	lsrs	r3, r3, #6
 8002a6e:	4a83      	ldr	r2, [pc, #524]	; (8002c7c <HAL_ADC_Init+0x284>)
 8002a70:	fba2 2303 	umull	r2, r3, r2, r3
 8002a74:	099b      	lsrs	r3, r3, #6
 8002a76:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a78:	e002      	b.n	8002a80 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f9      	bne.n	8002a7a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fef0 	bl	8002870 <LL_ADC_IsInternalRegulatorEnabled>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10d      	bne.n	8002ab2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9a:	f043 0210 	orr.w	r2, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa6:	f043 0201 	orr.w	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff ff64 	bl	8002984 <LL_ADC_REG_IsConversionOngoing>
 8002abc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f040 80c8 	bne.w	8002c5c <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f040 80c4 	bne.w	8002c5c <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002adc:	f043 0202 	orr.w	r2, r3, #2
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff fefd 	bl	80028e8 <LL_ADC_IsEnabled>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10b      	bne.n	8002b0c <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002af4:	4862      	ldr	r0, [pc, #392]	; (8002c80 <HAL_ADC_Init+0x288>)
 8002af6:	f7ff fef7 	bl	80028e8 <LL_ADC_IsEnabled>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d105      	bne.n	8002b0c <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	4619      	mov	r1, r3
 8002b06:	485f      	ldr	r0, [pc, #380]	; (8002c84 <HAL_ADC_Init+0x28c>)
 8002b08:	f7ff fd4e 	bl	80025a8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	7e5b      	ldrb	r3, [r3, #25]
 8002b10:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b16:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002b1c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002b22:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b2a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d106      	bne.n	8002b48 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	045b      	lsls	r3, r3, #17
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d009      	beq.n	8002b64 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b54:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	4b47      	ldr	r3, [pc, #284]	; (8002c88 <HAL_ADC_Init+0x290>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	69b9      	ldr	r1, [r7, #24]
 8002b74:	430b      	orrs	r3, r1
 8002b76:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff01 	bl	8002984 <LL_ADC_REG_IsConversionOngoing>
 8002b82:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff ff22 	bl	80029d2 <LL_ADC_INJ_IsConversionOngoing>
 8002b8e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d140      	bne.n	8002c18 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d13d      	bne.n	8002c18 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	7e1b      	ldrb	r3, [r3, #24]
 8002ba4:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ba6:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bae:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bbe:	f023 0306 	bic.w	r3, r3, #6
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	69b9      	ldr	r1, [r7, #24]
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d118      	bne.n	8002c08 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002be0:	f023 0304 	bic.w	r3, r3, #4
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bec:	4311      	orrs	r1, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002bf2:	4311      	orrs	r1, r2
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0201 	orr.w	r2, r2, #1
 8002c04:	611a      	str	r2, [r3, #16]
 8002c06:	e007      	b.n	8002c18 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691a      	ldr	r2, [r3, #16]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0201 	bic.w	r2, r2, #1
 8002c16:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d10c      	bne.n	8002c3a <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	f023 010f 	bic.w	r1, r3, #15
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	1e5a      	subs	r2, r3, #1
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	631a      	str	r2, [r3, #48]	; 0x30
 8002c38:	e007      	b.n	8002c4a <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 020f 	bic.w	r2, r2, #15
 8002c48:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4e:	f023 0303 	bic.w	r3, r3, #3
 8002c52:	f043 0201 	orr.w	r2, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	659a      	str	r2, [r3, #88]	; 0x58
 8002c5a:	e007      	b.n	8002c6c <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c60:	f043 0210 	orr.w	r2, r3, #16
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3720      	adds	r7, #32
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	053e2d63 	.word	0x053e2d63
 8002c80:	50040000 	.word	0x50040000
 8002c84:	50040300 	.word	0x50040300
 8002c88:	fff0c007 	.word	0xfff0c007

08002c8c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff fe71 	bl	8002984 <LL_ADC_REG_IsConversionOngoing>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d167      	bne.n	8002d78 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d101      	bne.n	8002cb6 <HAL_ADC_Start_DMA+0x2a>
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	e063      	b.n	8002d7e <HAL_ADC_Start_DMA+0xf2>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 fd82 	bl	80037c8 <ADC_Enable>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002cc8:	7dfb      	ldrb	r3, [r7, #23]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d14f      	bne.n	8002d6e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cd6:	f023 0301 	bic.w	r3, r3, #1
 8002cda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d006      	beq.n	8002cfc <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf2:	f023 0206 	bic.w	r2, r3, #6
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cfa:	e002      	b.n	8002d02 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d06:	4a20      	ldr	r2, [pc, #128]	; (8002d88 <HAL_ADC_Start_DMA+0xfc>)
 8002d08:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d0e:	4a1f      	ldr	r2, [pc, #124]	; (8002d8c <HAL_ADC_Start_DMA+0x100>)
 8002d10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d16:	4a1e      	ldr	r2, [pc, #120]	; (8002d90 <HAL_ADC_Start_DMA+0x104>)
 8002d18:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	221c      	movs	r2, #28
 8002d20:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 0210 	orr.w	r2, r2, #16
 8002d38:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0201 	orr.w	r2, r2, #1
 8002d48:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	3340      	adds	r3, #64	; 0x40
 8002d54:	4619      	mov	r1, r3
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f001 f835 	bl	8003dc8 <HAL_DMA_Start_IT>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff fde4 	bl	8002934 <LL_ADC_REG_StartConversion>
 8002d6c:	e006      	b.n	8002d7c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002d76:	e001      	b.n	8002d7c <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	0800392d 	.word	0x0800392d
 8002d8c:	08003a05 	.word	0x08003a05
 8002d90:	08003a21 	.word	0x08003a21

08002d94 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_ADC_Stop_DMA+0x16>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e051      	b.n	8002e4e <HAL_ADC_Stop_DMA+0xba>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002db2:	2103      	movs	r1, #3
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fc53 	bl	8003660 <ADC_ConversionStop>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d13f      	bne.n	8002e44 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dd8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d10f      	bne.n	8002e02 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de6:	4618      	mov	r0, r3
 8002de8:	f001 f869 	bl	8003ebe <HAL_DMA_Abort>
 8002dec:	4603      	mov	r3, r0
 8002dee:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0210 	bic.w	r2, r2, #16
 8002e10:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d105      	bne.n	8002e24 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 fd2f 	bl	800387c <ADC_Disable>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	73fb      	strb	r3, [r7, #15]
 8002e22:	e002      	b.n	8002e2a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 fd29 	bl	800387c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d109      	bne.n	8002e44 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e38:	f023 0301 	bic.w	r3, r3, #1
 8002e3c:	f043 0201 	orr.w	r2, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
	...

08002e6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b0b6      	sub	sp, #216	; 0xd8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x22>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e3d4      	b.n	8003638 <HAL_ADC_ConfigChannel+0x7cc>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fd72 	bl	8002984 <LL_ADC_REG_IsConversionOngoing>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f040 83b9 	bne.w	800361a <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b05      	cmp	r3, #5
 8002eae:	d824      	bhi.n	8002efa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	3b02      	subs	r3, #2
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d81b      	bhi.n	8002ef2 <HAL_ADC_ConfigChannel+0x86>
 8002eba:	a201      	add	r2, pc, #4	; (adr r2, 8002ec0 <HAL_ADC_ConfigChannel+0x54>)
 8002ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec0:	08002ed1 	.word	0x08002ed1
 8002ec4:	08002ed9 	.word	0x08002ed9
 8002ec8:	08002ee1 	.word	0x08002ee1
 8002ecc:	08002ee9 	.word	0x08002ee9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	220c      	movs	r2, #12
 8002ed4:	605a      	str	r2, [r3, #4]
          break;
 8002ed6:	e011      	b.n	8002efc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2212      	movs	r2, #18
 8002edc:	605a      	str	r2, [r3, #4]
          break;
 8002ede:	e00d      	b.n	8002efc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	2218      	movs	r2, #24
 8002ee4:	605a      	str	r2, [r3, #4]
          break;
 8002ee6:	e009      	b.n	8002efc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eee:	605a      	str	r2, [r3, #4]
          break;
 8002ef0:	e004      	b.n	8002efc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2206      	movs	r2, #6
 8002ef6:	605a      	str	r2, [r3, #4]
          break;
 8002ef8:	e000      	b.n	8002efc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002efa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6818      	ldr	r0, [r3, #0]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	6859      	ldr	r1, [r3, #4]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	f7ff fbfc 	bl	8002706 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff fd36 	bl	8002984 <LL_ADC_REG_IsConversionOngoing>
 8002f18:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff fd56 	bl	80029d2 <LL_ADC_INJ_IsConversionOngoing>
 8002f26:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f2a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f040 81c1 	bne.w	80032b6 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f040 81bc 	bne.w	80032b6 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f46:	d10f      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6818      	ldr	r0, [r3, #0]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2200      	movs	r2, #0
 8002f52:	4619      	mov	r1, r3
 8002f54:	f7ff fc03 	bl	800275e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fbaa 	bl	80026ba <LL_ADC_SetSamplingTimeCommonConfig>
 8002f66:	e00e      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	6819      	ldr	r1, [r3, #0]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	461a      	mov	r2, r3
 8002f76:	f7ff fbf2 	bl	800275e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2100      	movs	r1, #0
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fb9a 	bl	80026ba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	08db      	lsrs	r3, r3, #3
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d00a      	beq.n	8002fbe <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	6919      	ldr	r1, [r3, #16]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fb8:	f7ff fb2a 	bl	8002610 <LL_ADC_SetOffset>
 8002fbc:	e17b      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fb47 	bl	8002658 <LL_ADC_GetOffsetChannel>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10a      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x17e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2100      	movs	r1, #0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fb3c 	bl	8002658 <LL_ADC_GetOffsetChannel>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	0e9b      	lsrs	r3, r3, #26
 8002fe4:	f003 021f 	and.w	r2, r3, #31
 8002fe8:	e01e      	b.n	8003028 <HAL_ADC_ConfigChannel+0x1bc>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2100      	movs	r1, #0
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff fb31 	bl	8002658 <LL_ADC_GetOffsetChannel>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003000:	fa93 f3a3 	rbit	r3, r3
 8003004:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003008:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800300c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003010:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003018:	2320      	movs	r3, #32
 800301a:	e004      	b.n	8003026 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800301c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003020:	fab3 f383 	clz	r3, r3
 8003024:	b2db      	uxtb	r3, r3
 8003026:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003030:	2b00      	cmp	r3, #0
 8003032:	d105      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x1d4>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	0e9b      	lsrs	r3, r3, #26
 800303a:	f003 031f 	and.w	r3, r3, #31
 800303e:	e018      	b.n	8003072 <HAL_ADC_ConfigChannel+0x206>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003048:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800304c:	fa93 f3a3 	rbit	r3, r3
 8003050:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003054:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003058:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800305c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8003064:	2320      	movs	r3, #32
 8003066:	e004      	b.n	8003072 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8003068:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800306c:	fab3 f383 	clz	r3, r3
 8003070:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003072:	429a      	cmp	r2, r3
 8003074:	d106      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2200      	movs	r2, #0
 800307c:	2100      	movs	r1, #0
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fb00 	bl	8002684 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2101      	movs	r1, #1
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff fae4 	bl	8002658 <LL_ADC_GetOffsetChannel>
 8003090:	4603      	mov	r3, r0
 8003092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10a      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x244>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2101      	movs	r1, #1
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff fad9 	bl	8002658 <LL_ADC_GetOffsetChannel>
 80030a6:	4603      	mov	r3, r0
 80030a8:	0e9b      	lsrs	r3, r3, #26
 80030aa:	f003 021f 	and.w	r2, r3, #31
 80030ae:	e01e      	b.n	80030ee <HAL_ADC_ConfigChannel+0x282>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2101      	movs	r1, #1
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff face 	bl	8002658 <LL_ADC_GetOffsetChannel>
 80030bc:	4603      	mov	r3, r0
 80030be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030c6:	fa93 f3a3 	rbit	r3, r3
 80030ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80030ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80030d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80030de:	2320      	movs	r3, #32
 80030e0:	e004      	b.n	80030ec <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80030e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030e6:	fab3 f383 	clz	r3, r3
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d105      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x29a>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	0e9b      	lsrs	r3, r3, #26
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	e018      	b.n	8003138 <HAL_ADC_ConfigChannel+0x2cc>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003112:	fa93 f3a3 	rbit	r3, r3
 8003116:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800311a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800311e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003122:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800312a:	2320      	movs	r3, #32
 800312c:	e004      	b.n	8003138 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800312e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003132:	fab3 f383 	clz	r3, r3
 8003136:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003138:	429a      	cmp	r2, r3
 800313a:	d106      	bne.n	800314a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2200      	movs	r2, #0
 8003142:	2101      	movs	r1, #1
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff fa9d 	bl	8002684 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2102      	movs	r1, #2
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff fa81 	bl	8002658 <LL_ADC_GetOffsetChannel>
 8003156:	4603      	mov	r3, r0
 8003158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10a      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x30a>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2102      	movs	r1, #2
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff fa76 	bl	8002658 <LL_ADC_GetOffsetChannel>
 800316c:	4603      	mov	r3, r0
 800316e:	0e9b      	lsrs	r3, r3, #26
 8003170:	f003 021f 	and.w	r2, r3, #31
 8003174:	e01e      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x348>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2102      	movs	r1, #2
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff fa6b 	bl	8002658 <LL_ADC_GetOffsetChannel>
 8003182:	4603      	mov	r3, r0
 8003184:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800318c:	fa93 f3a3 	rbit	r3, r3
 8003190:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003194:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003198:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800319c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80031a4:	2320      	movs	r3, #32
 80031a6:	e004      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80031a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031ac:	fab3 f383 	clz	r3, r3
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x360>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	0e9b      	lsrs	r3, r3, #26
 80031c6:	f003 031f 	and.w	r3, r3, #31
 80031ca:	e016      	b.n	80031fa <HAL_ADC_ConfigChannel+0x38e>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031d8:	fa93 f3a3 	rbit	r3, r3
 80031dc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80031de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80031e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80031ec:	2320      	movs	r3, #32
 80031ee:	e004      	b.n	80031fa <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80031f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031f4:	fab3 f383 	clz	r3, r3
 80031f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d106      	bne.n	800320c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2200      	movs	r2, #0
 8003204:	2102      	movs	r1, #2
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff fa3c 	bl	8002684 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2103      	movs	r1, #3
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff fa20 	bl	8002658 <LL_ADC_GetOffsetChannel>
 8003218:	4603      	mov	r3, r0
 800321a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10a      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x3cc>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2103      	movs	r1, #3
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff fa15 	bl	8002658 <LL_ADC_GetOffsetChannel>
 800322e:	4603      	mov	r3, r0
 8003230:	0e9b      	lsrs	r3, r3, #26
 8003232:	f003 021f 	and.w	r2, r3, #31
 8003236:	e017      	b.n	8003268 <HAL_ADC_ConfigChannel+0x3fc>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2103      	movs	r1, #3
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff fa0a 	bl	8002658 <LL_ADC_GetOffsetChannel>
 8003244:	4603      	mov	r3, r0
 8003246:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003248:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800324a:	fa93 f3a3 	rbit	r3, r3
 800324e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003250:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003252:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003254:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800325a:	2320      	movs	r3, #32
 800325c:	e003      	b.n	8003266 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800325e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003260:	fab3 f383 	clz	r3, r3
 8003264:	b2db      	uxtb	r3, r3
 8003266:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003270:	2b00      	cmp	r3, #0
 8003272:	d105      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x414>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	0e9b      	lsrs	r3, r3, #26
 800327a:	f003 031f 	and.w	r3, r3, #31
 800327e:	e011      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x438>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003288:	fa93 f3a3 	rbit	r3, r3
 800328c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800328e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003290:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003298:	2320      	movs	r3, #32
 800329a:	e003      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800329c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800329e:	fab3 f383 	clz	r3, r3
 80032a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d106      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2200      	movs	r2, #0
 80032ae:	2103      	movs	r1, #3
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff f9e7 	bl	8002684 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff fb14 	bl	80028e8 <LL_ADC_IsEnabled>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f040 8140 	bne.w	8003548 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	6819      	ldr	r1, [r3, #0]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	461a      	mov	r2, r3
 80032d6:	f7ff fa6d 	bl	80027b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	4a8f      	ldr	r2, [pc, #572]	; (800351c <HAL_ADC_ConfigChannel+0x6b0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	f040 8131 	bne.w	8003548 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10b      	bne.n	800330e <HAL_ADC_ConfigChannel+0x4a2>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	0e9b      	lsrs	r3, r3, #26
 80032fc:	3301      	adds	r3, #1
 80032fe:	f003 031f 	and.w	r3, r3, #31
 8003302:	2b09      	cmp	r3, #9
 8003304:	bf94      	ite	ls
 8003306:	2301      	movls	r3, #1
 8003308:	2300      	movhi	r3, #0
 800330a:	b2db      	uxtb	r3, r3
 800330c:	e019      	b.n	8003342 <HAL_ADC_ConfigChannel+0x4d6>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003316:	fa93 f3a3 	rbit	r3, r3
 800331a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800331c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800331e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003320:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003326:	2320      	movs	r3, #32
 8003328:	e003      	b.n	8003332 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800332a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800332c:	fab3 f383 	clz	r3, r3
 8003330:	b2db      	uxtb	r3, r3
 8003332:	3301      	adds	r3, #1
 8003334:	f003 031f 	and.w	r3, r3, #31
 8003338:	2b09      	cmp	r3, #9
 800333a:	bf94      	ite	ls
 800333c:	2301      	movls	r3, #1
 800333e:	2300      	movhi	r3, #0
 8003340:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003342:	2b00      	cmp	r3, #0
 8003344:	d079      	beq.n	800343a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800334e:	2b00      	cmp	r3, #0
 8003350:	d107      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x4f6>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	0e9b      	lsrs	r3, r3, #26
 8003358:	3301      	adds	r3, #1
 800335a:	069b      	lsls	r3, r3, #26
 800335c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003360:	e015      	b.n	800338e <HAL_ADC_ConfigChannel+0x522>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800336a:	fa93 f3a3 	rbit	r3, r3
 800336e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003372:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800337a:	2320      	movs	r3, #32
 800337c:	e003      	b.n	8003386 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800337e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003380:	fab3 f383 	clz	r3, r3
 8003384:	b2db      	uxtb	r3, r3
 8003386:	3301      	adds	r3, #1
 8003388:	069b      	lsls	r3, r3, #26
 800338a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x542>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	0e9b      	lsrs	r3, r3, #26
 80033a0:	3301      	adds	r3, #1
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	2101      	movs	r1, #1
 80033a8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ac:	e017      	b.n	80033de <HAL_ADC_ConfigChannel+0x572>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80033bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033be:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80033c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80033c6:	2320      	movs	r3, #32
 80033c8:	e003      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80033ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033cc:	fab3 f383 	clz	r3, r3
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	3301      	adds	r3, #1
 80033d4:	f003 031f 	and.w	r3, r3, #31
 80033d8:	2101      	movs	r1, #1
 80033da:	fa01 f303 	lsl.w	r3, r1, r3
 80033de:	ea42 0103 	orr.w	r1, r2, r3
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10a      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x598>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	0e9b      	lsrs	r3, r3, #26
 80033f4:	3301      	adds	r3, #1
 80033f6:	f003 021f 	and.w	r2, r3, #31
 80033fa:	4613      	mov	r3, r2
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	4413      	add	r3, r2
 8003400:	051b      	lsls	r3, r3, #20
 8003402:	e018      	b.n	8003436 <HAL_ADC_ConfigChannel+0x5ca>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340c:	fa93 f3a3 	rbit	r3, r3
 8003410:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003414:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800341c:	2320      	movs	r3, #32
 800341e:	e003      	b.n	8003428 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003422:	fab3 f383 	clz	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	3301      	adds	r3, #1
 800342a:	f003 021f 	and.w	r2, r3, #31
 800342e:	4613      	mov	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	4413      	add	r3, r2
 8003434:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003436:	430b      	orrs	r3, r1
 8003438:	e081      	b.n	800353e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003442:	2b00      	cmp	r3, #0
 8003444:	d107      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x5ea>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	0e9b      	lsrs	r3, r3, #26
 800344c:	3301      	adds	r3, #1
 800344e:	069b      	lsls	r3, r3, #26
 8003450:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003454:	e015      	b.n	8003482 <HAL_ADC_ConfigChannel+0x616>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345e:	fa93 f3a3 	rbit	r3, r3
 8003462:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003466:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800346e:	2320      	movs	r3, #32
 8003470:	e003      	b.n	800347a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8003472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003474:	fab3 f383 	clz	r3, r3
 8003478:	b2db      	uxtb	r3, r3
 800347a:	3301      	adds	r3, #1
 800347c:	069b      	lsls	r3, r3, #26
 800347e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348a:	2b00      	cmp	r3, #0
 800348c:	d109      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x636>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	0e9b      	lsrs	r3, r3, #26
 8003494:	3301      	adds	r3, #1
 8003496:	f003 031f 	and.w	r3, r3, #31
 800349a:	2101      	movs	r1, #1
 800349c:	fa01 f303 	lsl.w	r3, r1, r3
 80034a0:	e017      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x666>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	fa93 f3a3 	rbit	r3, r3
 80034ae:	61fb      	str	r3, [r7, #28]
  return result;
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80034ba:	2320      	movs	r3, #32
 80034bc:	e003      	b.n	80034c6 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	fab3 f383 	clz	r3, r3
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	3301      	adds	r3, #1
 80034c8:	f003 031f 	and.w	r3, r3, #31
 80034cc:	2101      	movs	r1, #1
 80034ce:	fa01 f303 	lsl.w	r3, r1, r3
 80034d2:	ea42 0103 	orr.w	r1, r2, r3
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10d      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x692>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	0e9b      	lsrs	r3, r3, #26
 80034e8:	3301      	adds	r3, #1
 80034ea:	f003 021f 	and.w	r2, r3, #31
 80034ee:	4613      	mov	r3, r2
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	4413      	add	r3, r2
 80034f4:	3b1e      	subs	r3, #30
 80034f6:	051b      	lsls	r3, r3, #20
 80034f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034fc:	e01e      	b.n	800353c <HAL_ADC_ConfigChannel+0x6d0>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	fa93 f3a3 	rbit	r3, r3
 800350a:	613b      	str	r3, [r7, #16]
  return result;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d104      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003516:	2320      	movs	r3, #32
 8003518:	e006      	b.n	8003528 <HAL_ADC_ConfigChannel+0x6bc>
 800351a:	bf00      	nop
 800351c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	fab3 f383 	clz	r3, r3
 8003526:	b2db      	uxtb	r3, r3
 8003528:	3301      	adds	r3, #1
 800352a:	f003 021f 	and.w	r2, r3, #31
 800352e:	4613      	mov	r3, r2
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	4413      	add	r3, r2
 8003534:	3b1e      	subs	r3, #30
 8003536:	051b      	lsls	r3, r3, #20
 8003538:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800353c:	430b      	orrs	r3, r1
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	6892      	ldr	r2, [r2, #8]
 8003542:	4619      	mov	r1, r3
 8003544:	f7ff f90b 	bl	800275e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	4b3c      	ldr	r3, [pc, #240]	; (8003640 <HAL_ADC_ConfigChannel+0x7d4>)
 800354e:	4013      	ands	r3, r2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d06b      	beq.n	800362c <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003554:	483b      	ldr	r0, [pc, #236]	; (8003644 <HAL_ADC_ConfigChannel+0x7d8>)
 8003556:	f7ff f84d 	bl	80025f4 <LL_ADC_GetCommonPathInternalCh>
 800355a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a39      	ldr	r2, [pc, #228]	; (8003648 <HAL_ADC_ConfigChannel+0x7dc>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d126      	bne.n	80035b6 <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003568:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800356c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d120      	bne.n	80035b6 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a34      	ldr	r2, [pc, #208]	; (800364c <HAL_ADC_ConfigChannel+0x7e0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d156      	bne.n	800362c <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800357e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003582:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003586:	4619      	mov	r1, r3
 8003588:	482e      	ldr	r0, [pc, #184]	; (8003644 <HAL_ADC_ConfigChannel+0x7d8>)
 800358a:	f7ff f820 	bl	80025ce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800358e:	4b30      	ldr	r3, [pc, #192]	; (8003650 <HAL_ADC_ConfigChannel+0x7e4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	099b      	lsrs	r3, r3, #6
 8003594:	4a2f      	ldr	r2, [pc, #188]	; (8003654 <HAL_ADC_ConfigChannel+0x7e8>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	099a      	lsrs	r2, r3, #6
 800359c:	4613      	mov	r3, r2
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	4413      	add	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035a6:	e002      	b.n	80035ae <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1f9      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035b4:	e03a      	b.n	800362c <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a27      	ldr	r2, [pc, #156]	; (8003658 <HAL_ADC_ConfigChannel+0x7ec>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d113      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x77c>
 80035c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10d      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a1e      	ldr	r2, [pc, #120]	; (800364c <HAL_ADC_ConfigChannel+0x7e0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d12a      	bne.n	800362c <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035de:	4619      	mov	r1, r3
 80035e0:	4818      	ldr	r0, [pc, #96]	; (8003644 <HAL_ADC_ConfigChannel+0x7d8>)
 80035e2:	f7fe fff4 	bl	80025ce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035e6:	e021      	b.n	800362c <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a1b      	ldr	r2, [pc, #108]	; (800365c <HAL_ADC_ConfigChannel+0x7f0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d11c      	bne.n	800362c <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d116      	bne.n	800362c <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a12      	ldr	r2, [pc, #72]	; (800364c <HAL_ADC_ConfigChannel+0x7e0>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d111      	bne.n	800362c <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003608:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800360c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003610:	4619      	mov	r1, r3
 8003612:	480c      	ldr	r0, [pc, #48]	; (8003644 <HAL_ADC_ConfigChannel+0x7d8>)
 8003614:	f7fe ffdb 	bl	80025ce <LL_ADC_SetCommonPathInternalCh>
 8003618:	e008      	b.n	800362c <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361e:	f043 0220 	orr.w	r2, r3, #32
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003634:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003638:	4618      	mov	r0, r3
 800363a:	37d8      	adds	r7, #216	; 0xd8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	80080000 	.word	0x80080000
 8003644:	50040300 	.word	0x50040300
 8003648:	c7520000 	.word	0xc7520000
 800364c:	50040000 	.word	0x50040000
 8003650:	20000000 	.word	0x20000000
 8003654:	053e2d63 	.word	0x053e2d63
 8003658:	cb840000 	.word	0xcb840000
 800365c:	80000001 	.word	0x80000001

08003660 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800366a:	2300      	movs	r3, #0
 800366c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff f984 	bl	8002984 <LL_ADC_REG_IsConversionOngoing>
 800367c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff f9a5 	bl	80029d2 <LL_ADC_INJ_IsConversionOngoing>
 8003688:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d103      	bne.n	8003698 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 8090 	beq.w	80037b8 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d02a      	beq.n	80036fc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	7e5b      	ldrb	r3, [r3, #25]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d126      	bne.n	80036fc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	7e1b      	ldrb	r3, [r3, #24]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d122      	bne.n	80036fc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80036b6:	2301      	movs	r3, #1
 80036b8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80036ba:	e014      	b.n	80036e6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	4a41      	ldr	r2, [pc, #260]	; (80037c4 <ADC_ConversionStop+0x164>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d90d      	bls.n	80036e0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c8:	f043 0210 	orr.w	r2, r3, #16
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d4:	f043 0201 	orr.w	r2, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e06c      	b.n	80037ba <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	3301      	adds	r3, #1
 80036e4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f0:	2b40      	cmp	r3, #64	; 0x40
 80036f2:	d1e3      	bne.n	80036bc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2240      	movs	r2, #64	; 0x40
 80036fa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d014      	beq.n	800372c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff f93c 	bl	8002984 <LL_ADC_REG_IsConversionOngoing>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00c      	beq.n	800372c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff f8f9 	bl	800290e <LL_ADC_IsDisableOngoing>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d104      	bne.n	800372c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff f918 	bl	800295c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d014      	beq.n	800375c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff f94b 	bl	80029d2 <LL_ADC_INJ_IsConversionOngoing>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00c      	beq.n	800375c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff f8e1 	bl	800290e <LL_ADC_IsDisableOngoing>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d104      	bne.n	800375c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff f927 	bl	80029aa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d004      	beq.n	800376c <ADC_ConversionStop+0x10c>
 8003762:	2b03      	cmp	r3, #3
 8003764:	d105      	bne.n	8003772 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003766:	230c      	movs	r3, #12
 8003768:	617b      	str	r3, [r7, #20]
        break;
 800376a:	e005      	b.n	8003778 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800376c:	2308      	movs	r3, #8
 800376e:	617b      	str	r3, [r7, #20]
        break;
 8003770:	e002      	b.n	8003778 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003772:	2304      	movs	r3, #4
 8003774:	617b      	str	r3, [r7, #20]
        break;
 8003776:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003778:	f7fe fee8 	bl	800254c <HAL_GetTick>
 800377c:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800377e:	e014      	b.n	80037aa <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003780:	f7fe fee4 	bl	800254c <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b05      	cmp	r3, #5
 800378c:	d90d      	bls.n	80037aa <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003792:	f043 0210 	orr.w	r2, r3, #16
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379e:	f043 0201 	orr.w	r2, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e007      	b.n	80037ba <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	4013      	ands	r3, r2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e3      	bne.n	8003780 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3720      	adds	r7, #32
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	a33fffff 	.word	0xa33fffff

080037c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff f887 	bl	80028e8 <LL_ADC_IsEnabled>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d146      	bne.n	800386e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	4b24      	ldr	r3, [pc, #144]	; (8003878 <ADC_Enable+0xb0>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00d      	beq.n	800380a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f2:	f043 0210 	orr.w	r2, r3, #16
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fe:	f043 0201 	orr.w	r2, r3, #1
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e032      	b.n	8003870 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff f842 	bl	8002898 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003814:	f7fe fe9a 	bl	800254c <HAL_GetTick>
 8003818:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800381a:	e021      	b.n	8003860 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff f861 	bl	80028e8 <LL_ADC_IsEnabled>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d104      	bne.n	8003836 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff f831 	bl	8002898 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003836:	f7fe fe89 	bl	800254c <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d90d      	bls.n	8003860 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003848:	f043 0210 	orr.w	r2, r3, #16
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003854:	f043 0201 	orr.w	r2, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e007      	b.n	8003870 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b01      	cmp	r3, #1
 800386c:	d1d6      	bne.n	800381c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	8000003f 	.word	0x8000003f

0800387c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff f840 	bl	800290e <LL_ADC_IsDisableOngoing>
 800388e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff f827 	bl	80028e8 <LL_ADC_IsEnabled>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d040      	beq.n	8003922 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d13d      	bne.n	8003922 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 030d 	and.w	r3, r3, #13
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d10c      	bne.n	80038ce <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff f801 	bl	80028c0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2203      	movs	r2, #3
 80038c4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038c6:	f7fe fe41 	bl	800254c <HAL_GetTick>
 80038ca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038cc:	e022      	b.n	8003914 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d2:	f043 0210 	orr.w	r2, r3, #16
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038de:	f043 0201 	orr.w	r2, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e01c      	b.n	8003924 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80038ea:	f7fe fe2f 	bl	800254c <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d90d      	bls.n	8003914 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fc:	f043 0210 	orr.w	r2, r3, #16
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003908:	f043 0201 	orr.w	r2, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e007      	b.n	8003924 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1e3      	bne.n	80038ea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003942:	2b00      	cmp	r3, #0
 8003944:	d14b      	bne.n	80039de <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b00      	cmp	r3, #0
 800395e:	d021      	beq.n	80039a4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f7fe febb 	bl	80026e0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d032      	beq.n	80039d6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d12b      	bne.n	80039d6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003982:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d11f      	bne.n	80039d6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399a:	f043 0201 	orr.w	r2, r3, #1
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	659a      	str	r2, [r3, #88]	; 0x58
 80039a2:	e018      	b.n	80039d6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d111      	bne.n	80039d6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d105      	bne.n	80039d6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ce:	f043 0201 	orr.w	r2, r3, #1
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f7fe fb5c 	bl	8002094 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80039dc:	e00e      	b.n	80039fc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e2:	f003 0310 	and.w	r3, r3, #16
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f7ff fa33 	bl	8002e56 <HAL_ADC_ErrorCallback>
}
 80039f0:	e004      	b.n	80039fc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	4798      	blx	r3
}
 80039fc:	bf00      	nop
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a10:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f7fe fb34 	bl	8002080 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a18:	bf00      	nop
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3e:	f043 0204 	orr.w	r2, r3, #4
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f7ff fa05 	bl	8002e56 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a4c:	bf00      	nop
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a64:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <__NVIC_SetPriorityGrouping+0x44>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a70:	4013      	ands	r3, r2
 8003a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a86:	4a04      	ldr	r2, [pc, #16]	; (8003a98 <__NVIC_SetPriorityGrouping+0x44>)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	60d3      	str	r3, [r2, #12]
}
 8003a8c:	bf00      	nop
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	e000ed00 	.word	0xe000ed00

08003a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003aa0:	4b04      	ldr	r3, [pc, #16]	; (8003ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	0a1b      	lsrs	r3, r3, #8
 8003aa6:	f003 0307 	and.w	r3, r3, #7
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	e000ed00 	.word	0xe000ed00

08003ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	db0b      	blt.n	8003ae2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	f003 021f 	and.w	r2, r3, #31
 8003ad0:	4907      	ldr	r1, [pc, #28]	; (8003af0 <__NVIC_EnableIRQ+0x38>)
 8003ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad6:	095b      	lsrs	r3, r3, #5
 8003ad8:	2001      	movs	r0, #1
 8003ada:	fa00 f202 	lsl.w	r2, r0, r2
 8003ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	e000e100 	.word	0xe000e100

08003af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	6039      	str	r1, [r7, #0]
 8003afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	db0a      	blt.n	8003b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	490c      	ldr	r1, [pc, #48]	; (8003b40 <__NVIC_SetPriority+0x4c>)
 8003b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b12:	0112      	lsls	r2, r2, #4
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	440b      	add	r3, r1
 8003b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b1c:	e00a      	b.n	8003b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	4908      	ldr	r1, [pc, #32]	; (8003b44 <__NVIC_SetPriority+0x50>)
 8003b24:	79fb      	ldrb	r3, [r7, #7]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	3b04      	subs	r3, #4
 8003b2c:	0112      	lsls	r2, r2, #4
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	440b      	add	r3, r1
 8003b32:	761a      	strb	r2, [r3, #24]
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	e000e100 	.word	0xe000e100
 8003b44:	e000ed00 	.word	0xe000ed00

08003b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b089      	sub	sp, #36	; 0x24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f1c3 0307 	rsb	r3, r3, #7
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	bf28      	it	cs
 8003b66:	2304      	movcs	r3, #4
 8003b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	2b06      	cmp	r3, #6
 8003b70:	d902      	bls.n	8003b78 <NVIC_EncodePriority+0x30>
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	3b03      	subs	r3, #3
 8003b76:	e000      	b.n	8003b7a <NVIC_EncodePriority+0x32>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	43da      	mvns	r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	401a      	ands	r2, r3
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b90:	f04f 31ff 	mov.w	r1, #4294967295
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9a:	43d9      	mvns	r1, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba0:	4313      	orrs	r3, r2
         );
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3724      	adds	r7, #36	; 0x24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
	...

08003bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bc0:	d301      	bcc.n	8003bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e00f      	b.n	8003be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bc6:	4a0a      	ldr	r2, [pc, #40]	; (8003bf0 <SysTick_Config+0x40>)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bce:	210f      	movs	r1, #15
 8003bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd4:	f7ff ff8e 	bl	8003af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bd8:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <SysTick_Config+0x40>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bde:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <SysTick_Config+0x40>)
 8003be0:	2207      	movs	r2, #7
 8003be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	e000e010 	.word	0xe000e010

08003bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7ff ff29 	bl	8003a54 <__NVIC_SetPriorityGrouping>
}
 8003c02:	bf00      	nop
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b086      	sub	sp, #24
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	4603      	mov	r3, r0
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	607a      	str	r2, [r7, #4]
 8003c16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c1c:	f7ff ff3e 	bl	8003a9c <__NVIC_GetPriorityGrouping>
 8003c20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	68b9      	ldr	r1, [r7, #8]
 8003c26:	6978      	ldr	r0, [r7, #20]
 8003c28:	f7ff ff8e 	bl	8003b48 <NVIC_EncodePriority>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c32:	4611      	mov	r1, r2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff ff5d 	bl	8003af4 <__NVIC_SetPriority>
}
 8003c3a:	bf00      	nop
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b082      	sub	sp, #8
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	4603      	mov	r3, r0
 8003c4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff ff31 	bl	8003ab8 <__NVIC_EnableIRQ>
}
 8003c56:	bf00      	nop
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b082      	sub	sp, #8
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff ffa2 	bl	8003bb0 <SysTick_Config>
 8003c6c:	4603      	mov	r3, r0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e08d      	b.n	8003da6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	4b47      	ldr	r3, [pc, #284]	; (8003db0 <HAL_DMA_Init+0x138>)
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d80f      	bhi.n	8003cb6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	4b45      	ldr	r3, [pc, #276]	; (8003db4 <HAL_DMA_Init+0x13c>)
 8003c9e:	4413      	add	r3, r2
 8003ca0:	4a45      	ldr	r2, [pc, #276]	; (8003db8 <HAL_DMA_Init+0x140>)
 8003ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca6:	091b      	lsrs	r3, r3, #4
 8003ca8:	009a      	lsls	r2, r3, #2
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a42      	ldr	r2, [pc, #264]	; (8003dbc <HAL_DMA_Init+0x144>)
 8003cb2:	641a      	str	r2, [r3, #64]	; 0x40
 8003cb4:	e00e      	b.n	8003cd4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	4b40      	ldr	r3, [pc, #256]	; (8003dc0 <HAL_DMA_Init+0x148>)
 8003cbe:	4413      	add	r3, r2
 8003cc0:	4a3d      	ldr	r2, [pc, #244]	; (8003db8 <HAL_DMA_Init+0x140>)
 8003cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc6:	091b      	lsrs	r3, r3, #4
 8003cc8:	009a      	lsls	r2, r3, #2
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a3c      	ldr	r2, [pc, #240]	; (8003dc4 <HAL_DMA_Init+0x14c>)
 8003cd2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003cf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fa5c 	bl	80041e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d34:	d102      	bne.n	8003d3c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d50:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d010      	beq.n	8003d7c <HAL_DMA_Init+0x104>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d80c      	bhi.n	8003d7c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fa7c 	bl	8004260 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003d78:	605a      	str	r2, [r3, #4]
 8003d7a:	e008      	b.n	8003d8e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40020407 	.word	0x40020407
 8003db4:	bffdfff8 	.word	0xbffdfff8
 8003db8:	cccccccd 	.word	0xcccccccd
 8003dbc:	40020000 	.word	0x40020000
 8003dc0:	bffdfbf8 	.word	0xbffdfbf8
 8003dc4:	40020400 	.word	0x40020400

08003dc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_DMA_Start_IT+0x20>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e066      	b.n	8003eb6 <HAL_DMA_Start_IT+0xee>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d155      	bne.n	8003ea8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0201 	bic.w	r2, r2, #1
 8003e18:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	68b9      	ldr	r1, [r7, #8]
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 f9a1 	bl	8004168 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d008      	beq.n	8003e40 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 020e 	orr.w	r2, r2, #14
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	e00f      	b.n	8003e60 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0204 	bic.w	r2, r2, #4
 8003e4e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 020a 	orr.w	r2, r2, #10
 8003e5e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d007      	beq.n	8003e7e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e7c:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d007      	beq.n	8003e96 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e94:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0201 	orr.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	e005      	b.n	8003eb4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b085      	sub	sp, #20
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d008      	beq.n	8003ee8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2204      	movs	r2, #4
 8003eda:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e040      	b.n	8003f6a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 020e 	bic.w	r2, r2, #14
 8003ef6:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f06:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0201 	bic.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1c:	f003 021c 	and.w	r2, r3, #28
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	2101      	movs	r1, #1
 8003f26:	fa01 f202 	lsl.w	r2, r1, r2
 8003f2a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f34:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00c      	beq.n	8003f58 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f4c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f56:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b084      	sub	sp, #16
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f92:	f003 031c 	and.w	r3, r3, #28
 8003f96:	2204      	movs	r2, #4
 8003f98:	409a      	lsls	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d026      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x7a>
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d021      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d107      	bne.n	8003fca <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0204 	bic.w	r2, r2, #4
 8003fc8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fce:	f003 021c 	and.w	r2, r3, #28
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	2104      	movs	r1, #4
 8003fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003fdc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d071      	beq.n	80040ca <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003fee:	e06c      	b.n	80040ca <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff4:	f003 031c 	and.w	r3, r3, #28
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	409a      	lsls	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4013      	ands	r3, r2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d02e      	beq.n	8004062 <HAL_DMA_IRQHandler+0xec>
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d029      	beq.n	8004062 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0320 	and.w	r3, r3, #32
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10b      	bne.n	8004034 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 020a 	bic.w	r2, r2, #10
 800402a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004038:	f003 021c 	and.w	r2, r3, #28
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	2102      	movs	r1, #2
 8004042:	fa01 f202 	lsl.w	r2, r1, r2
 8004046:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004054:	2b00      	cmp	r3, #0
 8004056:	d038      	beq.n	80040ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004060:	e033      	b.n	80040ca <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004066:	f003 031c 	and.w	r3, r3, #28
 800406a:	2208      	movs	r2, #8
 800406c:	409a      	lsls	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4013      	ands	r3, r2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d02a      	beq.n	80040cc <HAL_DMA_IRQHandler+0x156>
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	2b00      	cmp	r3, #0
 800407e:	d025      	beq.n	80040cc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 020e 	bic.w	r2, r2, #14
 800408e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004094:	f003 021c 	and.w	r2, r3, #28
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	2101      	movs	r1, #1
 800409e:	fa01 f202 	lsl.w	r2, r1, r2
 80040a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d004      	beq.n	80040cc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80040ca:	bf00      	nop
 80040cc:	bf00      	nop
}
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	460b      	mov	r3, r1
 80040de:	607a      	str	r2, [r7, #4]
 80040e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d101      	bne.n	80040f4 <HAL_DMA_RegisterCallback+0x20>
 80040f0:	2302      	movs	r3, #2
 80040f2:	e032      	b.n	800415a <HAL_DMA_RegisterCallback+0x86>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b01      	cmp	r3, #1
 8004106:	d121      	bne.n	800414c <HAL_DMA_RegisterCallback+0x78>
  {
    switch (CallbackID)
 8004108:	7afb      	ldrb	r3, [r7, #11]
 800410a:	2b03      	cmp	r3, #3
 800410c:	d81a      	bhi.n	8004144 <HAL_DMA_RegisterCallback+0x70>
 800410e:	a201      	add	r2, pc, #4	; (adr r2, 8004114 <HAL_DMA_RegisterCallback+0x40>)
 8004110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004114:	08004125 	.word	0x08004125
 8004118:	0800412d 	.word	0x0800412d
 800411c:	08004135 	.word	0x08004135
 8004120:	0800413d 	.word	0x0800413d
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 800412a:	e011      	b.n	8004150 <HAL_DMA_RegisterCallback+0x7c>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 8004132:	e00d      	b.n	8004150 <HAL_DMA_RegisterCallback+0x7c>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 800413a:	e009      	b.n	8004150 <HAL_DMA_RegisterCallback+0x7c>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 8004142:	e005      	b.n	8004150 <HAL_DMA_RegisterCallback+0x7c>

     default:
           status = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	75fb      	strb	r3, [r7, #23]
           break;
 8004148:	bf00      	nop
 800414a:	e001      	b.n	8004150 <HAL_DMA_RegisterCallback+0x7c>
    }
  }
  else
  {
    status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004158:	7dfb      	ldrb	r3, [r7, #23]
}
 800415a:	4618      	mov	r0, r3
 800415c:	371c      	adds	r7, #28
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop

08004168 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
 8004174:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800417e:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004184:	2b00      	cmp	r3, #0
 8004186:	d004      	beq.n	8004192 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004190:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004196:	f003 021c 	and.w	r2, r3, #28
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	2101      	movs	r1, #1
 80041a0:	fa01 f202 	lsl.w	r2, r1, r2
 80041a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	2b10      	cmp	r3, #16
 80041b4:	d108      	bne.n	80041c8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80041c6:	e007      	b.n	80041d8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	60da      	str	r2, [r3, #12]
}
 80041d8:	bf00      	nop
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	461a      	mov	r2, r3
 80041f2:	4b17      	ldr	r3, [pc, #92]	; (8004250 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d80a      	bhi.n	800420e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fc:	089b      	lsrs	r3, r3, #2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004204:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6493      	str	r3, [r2, #72]	; 0x48
 800420c:	e007      	b.n	800421e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004212:	089b      	lsrs	r3, r3, #2
 8004214:	009a      	lsls	r2, r3, #2
 8004216:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004218:	4413      	add	r3, r2
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	b2db      	uxtb	r3, r3
 8004224:	3b08      	subs	r3, #8
 8004226:	4a0c      	ldr	r2, [pc, #48]	; (8004258 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004228:	fba2 2303 	umull	r2, r3, r2, r3
 800422c:	091b      	lsrs	r3, r3, #4
 800422e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a0a      	ldr	r2, [pc, #40]	; (800425c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004234:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f003 031f 	and.w	r3, r3, #31
 800423c:	2201      	movs	r2, #1
 800423e:	409a      	lsls	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004244:	bf00      	nop
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	40020407 	.word	0x40020407
 8004254:	4002081c 	.word	0x4002081c
 8004258:	cccccccd 	.word	0xcccccccd
 800425c:	40020880 	.word	0x40020880

08004260 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004274:	4413      	add	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	461a      	mov	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a08      	ldr	r2, [pc, #32]	; (80042a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004282:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	3b01      	subs	r3, #1
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	2201      	movs	r2, #1
 800428e:	409a      	lsls	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004294:	bf00      	nop
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	1000823f 	.word	0x1000823f
 80042a4:	40020940 	.word	0x40020940

080042a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042b2:	2300      	movs	r3, #0
 80042b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042b6:	e166      	b.n	8004586 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	2101      	movs	r1, #1
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	fa01 f303 	lsl.w	r3, r1, r3
 80042c4:	4013      	ands	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 8158 	beq.w	8004580 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d00b      	beq.n	80042f0 <HAL_GPIO_Init+0x48>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d007      	beq.n	80042f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042e4:	2b11      	cmp	r3, #17
 80042e6:	d003      	beq.n	80042f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b12      	cmp	r3, #18
 80042ee:	d130      	bne.n	8004352 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	2203      	movs	r2, #3
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	43db      	mvns	r3, r3
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	4013      	ands	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4313      	orrs	r3, r2
 8004318:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004326:	2201      	movs	r2, #1
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	43db      	mvns	r3, r3
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	4013      	ands	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	091b      	lsrs	r3, r3, #4
 800433c:	f003 0201 	and.w	r2, r3, #1
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4313      	orrs	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	2203      	movs	r2, #3
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	43db      	mvns	r3, r3
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	4013      	ands	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	689a      	ldr	r2, [r3, #8]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	fa02 f303 	lsl.w	r3, r2, r3
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4313      	orrs	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b02      	cmp	r3, #2
 8004388:	d003      	beq.n	8004392 <HAL_GPIO_Init+0xea>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b12      	cmp	r3, #18
 8004390:	d123      	bne.n	80043da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	08da      	lsrs	r2, r3, #3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	3208      	adds	r2, #8
 800439a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800439e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	220f      	movs	r2, #15
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	43db      	mvns	r3, r3
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4013      	ands	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	691a      	ldr	r2, [r3, #16]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	08da      	lsrs	r2, r3, #3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3208      	adds	r2, #8
 80043d4:	6939      	ldr	r1, [r7, #16]
 80043d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	2203      	movs	r2, #3
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	43db      	mvns	r3, r3
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	4013      	ands	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f003 0203 	and.w	r2, r3, #3
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	4313      	orrs	r3, r2
 8004406:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 80b2 	beq.w	8004580 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800441c:	4b61      	ldr	r3, [pc, #388]	; (80045a4 <HAL_GPIO_Init+0x2fc>)
 800441e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004420:	4a60      	ldr	r2, [pc, #384]	; (80045a4 <HAL_GPIO_Init+0x2fc>)
 8004422:	f043 0301 	orr.w	r3, r3, #1
 8004426:	6613      	str	r3, [r2, #96]	; 0x60
 8004428:	4b5e      	ldr	r3, [pc, #376]	; (80045a4 <HAL_GPIO_Init+0x2fc>)
 800442a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	60bb      	str	r3, [r7, #8]
 8004432:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004434:	4a5c      	ldr	r2, [pc, #368]	; (80045a8 <HAL_GPIO_Init+0x300>)
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	089b      	lsrs	r3, r3, #2
 800443a:	3302      	adds	r3, #2
 800443c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004440:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f003 0303 	and.w	r3, r3, #3
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	220f      	movs	r2, #15
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	43db      	mvns	r3, r3
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4013      	ands	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800445e:	d02b      	beq.n	80044b8 <HAL_GPIO_Init+0x210>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a52      	ldr	r2, [pc, #328]	; (80045ac <HAL_GPIO_Init+0x304>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d025      	beq.n	80044b4 <HAL_GPIO_Init+0x20c>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a51      	ldr	r2, [pc, #324]	; (80045b0 <HAL_GPIO_Init+0x308>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d01f      	beq.n	80044b0 <HAL_GPIO_Init+0x208>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a50      	ldr	r2, [pc, #320]	; (80045b4 <HAL_GPIO_Init+0x30c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d019      	beq.n	80044ac <HAL_GPIO_Init+0x204>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a4f      	ldr	r2, [pc, #316]	; (80045b8 <HAL_GPIO_Init+0x310>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d013      	beq.n	80044a8 <HAL_GPIO_Init+0x200>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a4e      	ldr	r2, [pc, #312]	; (80045bc <HAL_GPIO_Init+0x314>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d00d      	beq.n	80044a4 <HAL_GPIO_Init+0x1fc>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a4d      	ldr	r2, [pc, #308]	; (80045c0 <HAL_GPIO_Init+0x318>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d007      	beq.n	80044a0 <HAL_GPIO_Init+0x1f8>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a4c      	ldr	r2, [pc, #304]	; (80045c4 <HAL_GPIO_Init+0x31c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d101      	bne.n	800449c <HAL_GPIO_Init+0x1f4>
 8004498:	2307      	movs	r3, #7
 800449a:	e00e      	b.n	80044ba <HAL_GPIO_Init+0x212>
 800449c:	2308      	movs	r3, #8
 800449e:	e00c      	b.n	80044ba <HAL_GPIO_Init+0x212>
 80044a0:	2306      	movs	r3, #6
 80044a2:	e00a      	b.n	80044ba <HAL_GPIO_Init+0x212>
 80044a4:	2305      	movs	r3, #5
 80044a6:	e008      	b.n	80044ba <HAL_GPIO_Init+0x212>
 80044a8:	2304      	movs	r3, #4
 80044aa:	e006      	b.n	80044ba <HAL_GPIO_Init+0x212>
 80044ac:	2303      	movs	r3, #3
 80044ae:	e004      	b.n	80044ba <HAL_GPIO_Init+0x212>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e002      	b.n	80044ba <HAL_GPIO_Init+0x212>
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <HAL_GPIO_Init+0x212>
 80044b8:	2300      	movs	r3, #0
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	f002 0203 	and.w	r2, r2, #3
 80044c0:	0092      	lsls	r2, r2, #2
 80044c2:	4093      	lsls	r3, r2
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80044ca:	4937      	ldr	r1, [pc, #220]	; (80045a8 <HAL_GPIO_Init+0x300>)
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	089b      	lsrs	r3, r3, #2
 80044d0:	3302      	adds	r3, #2
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80044d8:	4b3b      	ldr	r3, [pc, #236]	; (80045c8 <HAL_GPIO_Init+0x320>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	43db      	mvns	r3, r3
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	4013      	ands	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80044fc:	4a32      	ldr	r2, [pc, #200]	; (80045c8 <HAL_GPIO_Init+0x320>)
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004502:	4b31      	ldr	r3, [pc, #196]	; (80045c8 <HAL_GPIO_Init+0x320>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	43db      	mvns	r3, r3
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4013      	ands	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4313      	orrs	r3, r2
 8004524:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004526:	4a28      	ldr	r2, [pc, #160]	; (80045c8 <HAL_GPIO_Init+0x320>)
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800452c:	4b26      	ldr	r3, [pc, #152]	; (80045c8 <HAL_GPIO_Init+0x320>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	43db      	mvns	r3, r3
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	4013      	ands	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004550:	4a1d      	ldr	r2, [pc, #116]	; (80045c8 <HAL_GPIO_Init+0x320>)
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004556:	4b1c      	ldr	r3, [pc, #112]	; (80045c8 <HAL_GPIO_Init+0x320>)
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	43db      	mvns	r3, r3
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4013      	ands	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800457a:	4a13      	ldr	r2, [pc, #76]	; (80045c8 <HAL_GPIO_Init+0x320>)
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	3301      	adds	r3, #1
 8004584:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	fa22 f303 	lsr.w	r3, r2, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	f47f ae91 	bne.w	80042b8 <HAL_GPIO_Init+0x10>
  }
}
 8004596:	bf00      	nop
 8004598:	371c      	adds	r7, #28
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	40021000 	.word	0x40021000
 80045a8:	40010000 	.word	0x40010000
 80045ac:	48000400 	.word	0x48000400
 80045b0:	48000800 	.word	0x48000800
 80045b4:	48000c00 	.word	0x48000c00
 80045b8:	48001000 	.word	0x48001000
 80045bc:	48001400 	.word	0x48001400
 80045c0:	48001800 	.word	0x48001800
 80045c4:	48001c00 	.word	0x48001c00
 80045c8:	40010400 	.word	0x40010400

080045cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	460b      	mov	r3, r1
 80045d6:	807b      	strh	r3, [r7, #2]
 80045d8:	4613      	mov	r3, r2
 80045da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045dc:	787b      	ldrb	r3, [r7, #1]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045e2:	887a      	ldrh	r2, [r7, #2]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045e8:	e002      	b.n	80045f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045ea:	887a      	ldrh	r2, [r7, #2]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800460e:	887a      	ldrh	r2, [r7, #2]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4013      	ands	r3, r2
 8004614:	041a      	lsls	r2, r3, #16
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	43d9      	mvns	r1, r3
 800461a:	887b      	ldrh	r3, [r7, #2]
 800461c:	400b      	ands	r3, r1
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	619a      	str	r2, [r3, #24]
}
 8004624:	bf00      	nop
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004632:	b08f      	sub	sp, #60	; 0x3c
 8004634:	af0a      	add	r7, sp, #40	; 0x28
 8004636:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e116      	b.n	8004870 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	d106      	bne.n	8004662 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f006 fc1d 	bl	800ae9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2203      	movs	r2, #3
 8004666:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004672:	2b00      	cmp	r3, #0
 8004674:	d102      	bne.n	800467c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4618      	mov	r0, r3
 8004682:	f003 fcd4 	bl	800802e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	603b      	str	r3, [r7, #0]
 800468c:	687e      	ldr	r6, [r7, #4]
 800468e:	466d      	mov	r5, sp
 8004690:	f106 0410 	add.w	r4, r6, #16
 8004694:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004696:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004698:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800469a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800469c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80046a4:	1d33      	adds	r3, r6, #4
 80046a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046a8:	6838      	ldr	r0, [r7, #0]
 80046aa:	f003 fbc1 	bl	8007e30 <USB_CoreInit>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d005      	beq.n	80046c0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e0d7      	b.n	8004870 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2100      	movs	r1, #0
 80046c6:	4618      	mov	r0, r3
 80046c8:	f003 fcc2 	bl	8008050 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046cc:	2300      	movs	r3, #0
 80046ce:	73fb      	strb	r3, [r7, #15]
 80046d0:	e04a      	b.n	8004768 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80046d2:	7bfa      	ldrb	r2, [r7, #15]
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	1a9b      	subs	r3, r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	440b      	add	r3, r1
 80046e0:	333d      	adds	r3, #61	; 0x3d
 80046e2:	2201      	movs	r2, #1
 80046e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80046e6:	7bfa      	ldrb	r2, [r7, #15]
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	4613      	mov	r3, r2
 80046ec:	00db      	lsls	r3, r3, #3
 80046ee:	1a9b      	subs	r3, r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	440b      	add	r3, r1
 80046f4:	333c      	adds	r3, #60	; 0x3c
 80046f6:	7bfa      	ldrb	r2, [r7, #15]
 80046f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80046fa:	7bfa      	ldrb	r2, [r7, #15]
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	b298      	uxth	r0, r3
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	4613      	mov	r3, r2
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	1a9b      	subs	r3, r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	440b      	add	r3, r1
 800470c:	3342      	adds	r3, #66	; 0x42
 800470e:	4602      	mov	r2, r0
 8004710:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004712:	7bfa      	ldrb	r2, [r7, #15]
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	4613      	mov	r3, r2
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	1a9b      	subs	r3, r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	440b      	add	r3, r1
 8004720:	333f      	adds	r3, #63	; 0x3f
 8004722:	2200      	movs	r2, #0
 8004724:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004726:	7bfa      	ldrb	r2, [r7, #15]
 8004728:	6879      	ldr	r1, [r7, #4]
 800472a:	4613      	mov	r3, r2
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	1a9b      	subs	r3, r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	440b      	add	r3, r1
 8004734:	3344      	adds	r3, #68	; 0x44
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800473a:	7bfa      	ldrb	r2, [r7, #15]
 800473c:	6879      	ldr	r1, [r7, #4]
 800473e:	4613      	mov	r3, r2
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	1a9b      	subs	r3, r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	440b      	add	r3, r1
 8004748:	3348      	adds	r3, #72	; 0x48
 800474a:	2200      	movs	r2, #0
 800474c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800474e:	7bfa      	ldrb	r2, [r7, #15]
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	4613      	mov	r3, r2
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	1a9b      	subs	r3, r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	440b      	add	r3, r1
 800475c:	3350      	adds	r3, #80	; 0x50
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004762:	7bfb      	ldrb	r3, [r7, #15]
 8004764:	3301      	adds	r3, #1
 8004766:	73fb      	strb	r3, [r7, #15]
 8004768:	7bfa      	ldrb	r2, [r7, #15]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	429a      	cmp	r2, r3
 8004770:	d3af      	bcc.n	80046d2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004772:	2300      	movs	r3, #0
 8004774:	73fb      	strb	r3, [r7, #15]
 8004776:	e044      	b.n	8004802 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004778:	7bfa      	ldrb	r2, [r7, #15]
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	1a9b      	subs	r3, r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800478a:	2200      	movs	r2, #0
 800478c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800478e:	7bfa      	ldrb	r2, [r7, #15]
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	4613      	mov	r3, r2
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	1a9b      	subs	r3, r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	440b      	add	r3, r1
 800479c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80047a0:	7bfa      	ldrb	r2, [r7, #15]
 80047a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80047a4:	7bfa      	ldrb	r2, [r7, #15]
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	4613      	mov	r3, r2
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	1a9b      	subs	r3, r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80047b6:	2200      	movs	r2, #0
 80047b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80047ba:	7bfa      	ldrb	r2, [r7, #15]
 80047bc:	6879      	ldr	r1, [r7, #4]
 80047be:	4613      	mov	r3, r2
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	1a9b      	subs	r3, r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	440b      	add	r3, r1
 80047c8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80047d0:	7bfa      	ldrb	r2, [r7, #15]
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	4613      	mov	r3, r2
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80047e6:	7bfa      	ldrb	r2, [r7, #15]
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	4613      	mov	r3, r2
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	1a9b      	subs	r3, r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	3301      	adds	r3, #1
 8004800:	73fb      	strb	r3, [r7, #15]
 8004802:	7bfa      	ldrb	r2, [r7, #15]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	429a      	cmp	r2, r3
 800480a:	d3b5      	bcc.n	8004778 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	603b      	str	r3, [r7, #0]
 8004812:	687e      	ldr	r6, [r7, #4]
 8004814:	466d      	mov	r5, sp
 8004816:	f106 0410 	add.w	r4, r6, #16
 800481a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800481c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800481e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004820:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004822:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004826:	e885 0003 	stmia.w	r5, {r0, r1}
 800482a:	1d33      	adds	r3, r6, #4
 800482c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800482e:	6838      	ldr	r0, [r7, #0]
 8004830:	f003 fc38 	bl	80080a4 <USB_DevInit>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d005      	beq.n	8004846 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2202      	movs	r2, #2
 800483e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e014      	b.n	8004870 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	2b01      	cmp	r3, #1
 800485c:	d102      	bne.n	8004864 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 ff62 	bl	8005728 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4618      	mov	r0, r3
 800486a:	f004 fbba 	bl	8008fe2 <USB_DevDisconnect>

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004878 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <HAL_PCD_Start+0x1c>
 8004890:	2302      	movs	r3, #2
 8004892:	e01c      	b.n	80048ce <HAL_PCD_Start+0x56>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d105      	bne.n	80048b0 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f003 fba9 	bl	800800c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f004 fb6e 	bl	8008fa0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80048d6:	b590      	push	{r4, r7, lr}
 80048d8:	b08d      	sub	sp, #52	; 0x34
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f004 fc2c 	bl	800914a <USB_GetMode>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f040 838f 	bne.w	8005018 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f004 fb90 	bl	8009024 <USB_ReadInterrupts>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 8385 	beq.w	8005016 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4618      	mov	r0, r3
 8004912:	f004 fb87 	bl	8009024 <USB_ReadInterrupts>
 8004916:	4603      	mov	r3, r0
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b02      	cmp	r3, #2
 800491e:	d107      	bne.n	8004930 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	695a      	ldr	r2, [r3, #20]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f002 0202 	and.w	r2, r2, #2
 800492e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	f004 fb75 	bl	8009024 <USB_ReadInterrupts>
 800493a:	4603      	mov	r3, r0
 800493c:	f003 0310 	and.w	r3, r3, #16
 8004940:	2b10      	cmp	r3, #16
 8004942:	d161      	bne.n	8004a08 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699a      	ldr	r2, [r3, #24]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0210 	bic.w	r2, r2, #16
 8004952:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	f003 020f 	and.w	r2, r3, #15
 8004960:	4613      	mov	r3, r2
 8004962:	00db      	lsls	r3, r3, #3
 8004964:	1a9b      	subs	r3, r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	4413      	add	r3, r2
 8004970:	3304      	adds	r3, #4
 8004972:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	0c5b      	lsrs	r3, r3, #17
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	2b02      	cmp	r3, #2
 800497e:	d124      	bne.n	80049ca <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004986:	4013      	ands	r3, r2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d035      	beq.n	80049f8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	091b      	lsrs	r3, r3, #4
 8004994:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004996:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800499a:	b29b      	uxth	r3, r3
 800499c:	461a      	mov	r2, r3
 800499e:	6a38      	ldr	r0, [r7, #32]
 80049a0:	f004 f9db 	bl	8008d5a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	68da      	ldr	r2, [r3, #12]
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	091b      	lsrs	r3, r3, #4
 80049ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049b0:	441a      	add	r2, r3
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	699a      	ldr	r2, [r3, #24]
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	091b      	lsrs	r3, r3, #4
 80049be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049c2:	441a      	add	r2, r3
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	619a      	str	r2, [r3, #24]
 80049c8:	e016      	b.n	80049f8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	0c5b      	lsrs	r3, r3, #17
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	2b06      	cmp	r3, #6
 80049d4:	d110      	bne.n	80049f8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80049dc:	2208      	movs	r2, #8
 80049de:	4619      	mov	r1, r3
 80049e0:	6a38      	ldr	r0, [r7, #32]
 80049e2:	f004 f9ba 	bl	8008d5a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	699a      	ldr	r2, [r3, #24]
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	091b      	lsrs	r3, r3, #4
 80049ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049f2:	441a      	add	r2, r3
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699a      	ldr	r2, [r3, #24]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0210 	orr.w	r2, r2, #16
 8004a06:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f004 fb09 	bl	8009024 <USB_ReadInterrupts>
 8004a12:	4603      	mov	r3, r0
 8004a14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a18:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a1c:	d16e      	bne.n	8004afc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f004 fb0f 	bl	800904a <USB_ReadDevAllOutEpInterrupt>
 8004a2c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004a2e:	e062      	b.n	8004af6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d057      	beq.n	8004aea <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	4611      	mov	r1, r2
 8004a44:	4618      	mov	r0, r3
 8004a46:	f004 fb34 	bl	80090b2 <USB_ReadDevOutEPInterrupt>
 8004a4a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00c      	beq.n	8004a70 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a62:	461a      	mov	r2, r3
 8004a64:	2301      	movs	r3, #1
 8004a66:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004a68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fd82 	bl	8005574 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00c      	beq.n	8004a94 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a86:	461a      	mov	r2, r3
 8004a88:	2308      	movs	r3, #8
 8004a8a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004a8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fdbe 	bl	8005610 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	f003 0310 	and.w	r3, r3, #16
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d008      	beq.n	8004ab0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	015a      	lsls	r2, r3, #5
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aaa:	461a      	mov	r2, r3
 8004aac:	2310      	movs	r3, #16
 8004aae:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d008      	beq.n	8004acc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	2320      	movs	r3, #32
 8004aca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d009      	beq.n	8004aea <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ae8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	3301      	adds	r3, #1
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af2:	085b      	lsrs	r3, r3, #1
 8004af4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d199      	bne.n	8004a30 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f004 fa8f 	bl	8009024 <USB_ReadInterrupts>
 8004b06:	4603      	mov	r3, r0
 8004b08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b10:	f040 8087 	bne.w	8004c22 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f004 fab0 	bl	800907e <USB_ReadDevAllInEpInterrupt>
 8004b1e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004b24:	e07a      	b.n	8004c1c <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d06f      	beq.n	8004c10 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	4611      	mov	r1, r2
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f004 fad7 	bl	80090ee <USB_ReadDevInEPInterrupt>
 8004b40:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d020      	beq.n	8004b8e <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	2201      	movs	r2, #1
 8004b54:	fa02 f303 	lsl.w	r3, r2, r3
 8004b58:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	43db      	mvns	r3, r3
 8004b66:	69f9      	ldr	r1, [r7, #28]
 8004b68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	2301      	movs	r3, #1
 8004b80:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	4619      	mov	r1, r3
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f006 fa1a 	bl	800afc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f003 0308 	and.w	r3, r3, #8
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d008      	beq.n	8004baa <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	2308      	movs	r3, #8
 8004ba8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f003 0310 	and.w	r3, r3, #16
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d008      	beq.n	8004bc6 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	2310      	movs	r3, #16
 8004bc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d008      	beq.n	8004be2 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bdc:	461a      	mov	r2, r3
 8004bde:	2340      	movs	r3, #64	; 0x40
 8004be0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d008      	beq.n	8004bfe <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004c08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 fc29 	bl	8005462 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	3301      	adds	r3, #1
 8004c14:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c18:	085b      	lsrs	r3, r3, #1
 8004c1a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d181      	bne.n	8004b26 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f004 f9fc 	bl	8009024 <USB_ReadInterrupts>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c36:	d122      	bne.n	8004c7e <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	69fa      	ldr	r2, [r7, #28]
 8004c42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c46:	f023 0301 	bic.w	r3, r3, #1
 8004c4a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d108      	bne.n	8004c68 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004c5e:	2100      	movs	r1, #0
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f006 fcc5 	bl	800b5f0 <HAL_PCDEx_LPM_Callback>
 8004c66:	e002      	b.n	8004c6e <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f006 fa17 	bl	800b09c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	695a      	ldr	r2, [r3, #20]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004c7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f004 f9ce 	bl	8009024 <USB_ReadInterrupts>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c92:	d112      	bne.n	8004cba <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d102      	bne.n	8004caa <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f006 f9d3 	bl	800b050 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	695a      	ldr	r2, [r3, #20]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004cb8:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f004 f9b0 	bl	8009024 <USB_ReadInterrupts>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cce:	d121      	bne.n	8004d14 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	695a      	ldr	r2, [r3, #20]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004cde:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d111      	bne.n	8004d0e <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf8:	089b      	lsrs	r3, r3, #2
 8004cfa:	f003 020f 	and.w	r2, r3, #15
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004d04:	2101      	movs	r1, #1
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f006 fc72 	bl	800b5f0 <HAL_PCDEx_LPM_Callback>
 8004d0c:	e002      	b.n	8004d14 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f006 f99e 	bl	800b050 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f004 f983 	bl	8009024 <USB_ReadInterrupts>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d28:	f040 80c5 	bne.w	8004eb6 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	69fa      	ldr	r2, [r7, #28]
 8004d36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d3a:	f023 0301 	bic.w	r3, r3, #1
 8004d3e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2110      	movs	r1, #16
 8004d46:	4618      	mov	r0, r3
 8004d48:	f003 faf8 	bl	800833c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d50:	e056      	b.n	8004e00 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d64:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d76:	0151      	lsls	r1, r2, #5
 8004d78:	69fa      	ldr	r2, [r7, #28]
 8004d7a:	440a      	add	r2, r1
 8004d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d84:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d96:	0151      	lsls	r1, r2, #5
 8004d98:	69fa      	ldr	r2, [r7, #28]
 8004d9a:	440a      	add	r2, r1
 8004d9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004da4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db2:	461a      	mov	r2, r3
 8004db4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004db8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dca:	0151      	lsls	r1, r2, #5
 8004dcc:	69fa      	ldr	r2, [r7, #28]
 8004dce:	440a      	add	r2, r1
 8004dd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dd4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004dd8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dea:	0151      	lsls	r1, r2, #5
 8004dec:	69fa      	ldr	r2, [r7, #28]
 8004dee:	440a      	add	r2, r1
 8004df0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004df4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004df8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d3a3      	bcc.n	8004d52 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	69fa      	ldr	r2, [r7, #28]
 8004e14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e18:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004e1c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d016      	beq.n	8004e54 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e30:	69fa      	ldr	r2, [r7, #28]
 8004e32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e36:	f043 030b 	orr.w	r3, r3, #11
 8004e3a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e46:	69fa      	ldr	r2, [r7, #28]
 8004e48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e4c:	f043 030b 	orr.w	r3, r3, #11
 8004e50:	6453      	str	r3, [r2, #68]	; 0x44
 8004e52:	e015      	b.n	8004e80 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	69fa      	ldr	r2, [r7, #28]
 8004e5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e66:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004e6a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	69fa      	ldr	r2, [r7, #28]
 8004e76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e7a:	f043 030b 	orr.w	r3, r3, #11
 8004e7e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	69fa      	ldr	r2, [r7, #28]
 8004e8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e8e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004e92:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	f004 f983 	bl	80091ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695a      	ldr	r2, [r3, #20]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004eb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f004 f8b2 	bl	8009024 <USB_ReadInterrupts>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eca:	d124      	bne.n	8004f16 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f004 f948 	bl	8009166 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f003 fa8f 	bl	80083fe <USB_GetDevSpeed>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681c      	ldr	r4, [r3, #0]
 8004eec:	f001 fafe 	bl	80064ec <HAL_RCC_GetHCLKFreq>
 8004ef0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4620      	mov	r0, r4
 8004efc:	f002 ffea 	bl	8007ed4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f006 f886 	bl	800b012 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	695a      	ldr	r2, [r3, #20]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004f14:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f004 f882 	bl	8009024 <USB_ReadInterrupts>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f003 0308 	and.w	r3, r3, #8
 8004f26:	2b08      	cmp	r3, #8
 8004f28:	d10a      	bne.n	8004f40 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f006 f863 	bl	800aff6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	695a      	ldr	r2, [r3, #20]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f002 0208 	and.w	r2, r2, #8
 8004f3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f004 f86d 	bl	8009024 <USB_ReadInterrupts>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f54:	d10f      	bne.n	8004f76 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	4619      	mov	r1, r3
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f006 f8d5 	bl	800b110 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695a      	ldr	r2, [r3, #20]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004f74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f004 f852 	bl	8009024 <USB_ReadInterrupts>
 8004f80:	4603      	mov	r3, r0
 8004f82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f8a:	d10f      	bne.n	8004fac <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	4619      	mov	r1, r3
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f006 f8a8 	bl	800b0ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695a      	ldr	r2, [r3, #20]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004faa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f004 f837 	bl	8009024 <USB_ReadInterrupts>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc0:	d10a      	bne.n	8004fd8 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f006 f8b6 	bl	800b134 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695a      	ldr	r2, [r3, #20]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004fd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f004 f821 	bl	8009024 <USB_ReadInterrupts>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d115      	bne.n	8005018 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	f003 0304 	and.w	r3, r3, #4
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f006 f8a6 	bl	800b150 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6859      	ldr	r1, [r3, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	430a      	orrs	r2, r1
 8005012:	605a      	str	r2, [r3, #4]
 8005014:	e000      	b.n	8005018 <HAL_PCD_IRQHandler+0x742>
      return;
 8005016:	bf00      	nop
    }
  }
}
 8005018:	3734      	adds	r7, #52	; 0x34
 800501a:	46bd      	mov	sp, r7
 800501c:	bd90      	pop	{r4, r7, pc}

0800501e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b082      	sub	sp, #8
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	460b      	mov	r3, r1
 8005028:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005030:	2b01      	cmp	r3, #1
 8005032:	d101      	bne.n	8005038 <HAL_PCD_SetAddress+0x1a>
 8005034:	2302      	movs	r3, #2
 8005036:	e013      	b.n	8005060 <HAL_PCD_SetAddress+0x42>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	78fa      	ldrb	r2, [r7, #3]
 8005044:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	78fa      	ldrb	r2, [r7, #3]
 800504e:	4611      	mov	r1, r2
 8005050:	4618      	mov	r0, r3
 8005052:	f003 ff7f 	bl	8008f54 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	4608      	mov	r0, r1
 8005072:	4611      	mov	r1, r2
 8005074:	461a      	mov	r2, r3
 8005076:	4603      	mov	r3, r0
 8005078:	70fb      	strb	r3, [r7, #3]
 800507a:	460b      	mov	r3, r1
 800507c:	803b      	strh	r3, [r7, #0]
 800507e:	4613      	mov	r3, r2
 8005080:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005086:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800508a:	2b00      	cmp	r3, #0
 800508c:	da0f      	bge.n	80050ae <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800508e:	78fb      	ldrb	r3, [r7, #3]
 8005090:	f003 020f 	and.w	r2, r3, #15
 8005094:	4613      	mov	r3, r2
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	1a9b      	subs	r3, r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	3338      	adds	r3, #56	; 0x38
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	4413      	add	r3, r2
 80050a2:	3304      	adds	r3, #4
 80050a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2201      	movs	r2, #1
 80050aa:	705a      	strb	r2, [r3, #1]
 80050ac:	e00f      	b.n	80050ce <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050ae:	78fb      	ldrb	r3, [r7, #3]
 80050b0:	f003 020f 	and.w	r2, r3, #15
 80050b4:	4613      	mov	r3, r2
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	1a9b      	subs	r3, r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	4413      	add	r3, r2
 80050c4:	3304      	adds	r3, #4
 80050c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80050ce:	78fb      	ldrb	r3, [r7, #3]
 80050d0:	f003 030f 	and.w	r3, r3, #15
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80050da:	883a      	ldrh	r2, [r7, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	78ba      	ldrb	r2, [r7, #2]
 80050e4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	785b      	ldrb	r3, [r3, #1]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d004      	beq.n	80050f8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80050f8:	78bb      	ldrb	r3, [r7, #2]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d102      	bne.n	8005104 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800510a:	2b01      	cmp	r3, #1
 800510c:	d101      	bne.n	8005112 <HAL_PCD_EP_Open+0xaa>
 800510e:	2302      	movs	r3, #2
 8005110:	e00e      	b.n	8005130 <HAL_PCD_EP_Open+0xc8>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68f9      	ldr	r1, [r7, #12]
 8005120:	4618      	mov	r0, r3
 8005122:	f003 f98b 	bl	800843c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800512e:	7afb      	ldrb	r3, [r7, #11]
}
 8005130:	4618      	mov	r0, r3
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	460b      	mov	r3, r1
 8005142:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005144:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005148:	2b00      	cmp	r3, #0
 800514a:	da0f      	bge.n	800516c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800514c:	78fb      	ldrb	r3, [r7, #3]
 800514e:	f003 020f 	and.w	r2, r3, #15
 8005152:	4613      	mov	r3, r2
 8005154:	00db      	lsls	r3, r3, #3
 8005156:	1a9b      	subs	r3, r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	3338      	adds	r3, #56	; 0x38
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	4413      	add	r3, r2
 8005160:	3304      	adds	r3, #4
 8005162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2201      	movs	r2, #1
 8005168:	705a      	strb	r2, [r3, #1]
 800516a:	e00f      	b.n	800518c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800516c:	78fb      	ldrb	r3, [r7, #3]
 800516e:	f003 020f 	and.w	r2, r3, #15
 8005172:	4613      	mov	r3, r2
 8005174:	00db      	lsls	r3, r3, #3
 8005176:	1a9b      	subs	r3, r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	4413      	add	r3, r2
 8005182:	3304      	adds	r3, #4
 8005184:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800518c:	78fb      	ldrb	r3, [r7, #3]
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	b2da      	uxtb	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <HAL_PCD_EP_Close+0x6e>
 80051a2:	2302      	movs	r3, #2
 80051a4:	e00e      	b.n	80051c4 <HAL_PCD_EP_Close+0x8c>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68f9      	ldr	r1, [r7, #12]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f003 f9c9 	bl	800854c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	607a      	str	r2, [r7, #4]
 80051d6:	603b      	str	r3, [r7, #0]
 80051d8:	460b      	mov	r3, r1
 80051da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051dc:	7afb      	ldrb	r3, [r7, #11]
 80051de:	f003 020f 	and.w	r2, r3, #15
 80051e2:	4613      	mov	r3, r2
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	1a9b      	subs	r3, r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4413      	add	r3, r2
 80051f2:	3304      	adds	r3, #4
 80051f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2200      	movs	r2, #0
 8005206:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	2200      	movs	r2, #0
 800520c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800520e:	7afb      	ldrb	r3, [r7, #11]
 8005210:	f003 030f 	and.w	r3, r3, #15
 8005214:	b2da      	uxtb	r2, r3
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800521a:	7afb      	ldrb	r3, [r7, #11]
 800521c:	f003 030f 	and.w	r3, r3, #15
 8005220:	2b00      	cmp	r3, #0
 8005222:	d106      	bne.n	8005232 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6979      	ldr	r1, [r7, #20]
 800522a:	4618      	mov	r0, r3
 800522c:	f003 fc46 	bl	8008abc <USB_EP0StartXfer>
 8005230:	e005      	b.n	800523e <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6979      	ldr	r1, [r7, #20]
 8005238:	4618      	mov	r0, r3
 800523a:	f003 fa63 	bl	8008704 <USB_EPStartXfer>
  }

  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3718      	adds	r7, #24
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	460b      	mov	r3, r1
 8005252:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005254:	78fb      	ldrb	r3, [r7, #3]
 8005256:	f003 020f 	and.w	r2, r3, #15
 800525a:	6879      	ldr	r1, [r7, #4]
 800525c:	4613      	mov	r3, r2
 800525e:	00db      	lsls	r3, r3, #3
 8005260:	1a9b      	subs	r3, r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	440b      	add	r3, r1
 8005266:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800526a:	681b      	ldr	r3, [r3, #0]
}
 800526c:	4618      	mov	r0, r3
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	607a      	str	r2, [r7, #4]
 8005282:	603b      	str	r3, [r7, #0]
 8005284:	460b      	mov	r3, r1
 8005286:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005288:	7afb      	ldrb	r3, [r7, #11]
 800528a:	f003 020f 	and.w	r2, r3, #15
 800528e:	4613      	mov	r3, r2
 8005290:	00db      	lsls	r3, r3, #3
 8005292:	1a9b      	subs	r3, r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	3338      	adds	r3, #56	; 0x38
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	4413      	add	r3, r2
 800529c:	3304      	adds	r3, #4
 800529e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	2200      	movs	r2, #0
 80052b0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2201      	movs	r2, #1
 80052b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052b8:	7afb      	ldrb	r3, [r7, #11]
 80052ba:	f003 030f 	and.w	r3, r3, #15
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80052c4:	7afb      	ldrb	r3, [r7, #11]
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d106      	bne.n	80052dc <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6979      	ldr	r1, [r7, #20]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f003 fbf1 	bl	8008abc <USB_EP0StartXfer>
 80052da:	e005      	b.n	80052e8 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6979      	ldr	r1, [r7, #20]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f003 fa0e 	bl	8008704 <USB_EPStartXfer>
  }

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b084      	sub	sp, #16
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	460b      	mov	r3, r1
 80052fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80052fe:	78fb      	ldrb	r3, [r7, #3]
 8005300:	f003 020f 	and.w	r2, r3, #15
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	429a      	cmp	r2, r3
 800530a:	d901      	bls.n	8005310 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e04e      	b.n	80053ae <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005310:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005314:	2b00      	cmp	r3, #0
 8005316:	da0f      	bge.n	8005338 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005318:	78fb      	ldrb	r3, [r7, #3]
 800531a:	f003 020f 	and.w	r2, r3, #15
 800531e:	4613      	mov	r3, r2
 8005320:	00db      	lsls	r3, r3, #3
 8005322:	1a9b      	subs	r3, r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	3338      	adds	r3, #56	; 0x38
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	4413      	add	r3, r2
 800532c:	3304      	adds	r3, #4
 800532e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2201      	movs	r2, #1
 8005334:	705a      	strb	r2, [r3, #1]
 8005336:	e00d      	b.n	8005354 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005338:	78fa      	ldrb	r2, [r7, #3]
 800533a:	4613      	mov	r3, r2
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	1a9b      	subs	r3, r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	4413      	add	r3, r2
 800534a:	3304      	adds	r3, #4
 800534c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2201      	movs	r2, #1
 8005358:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800535a:	78fb      	ldrb	r3, [r7, #3]
 800535c:	f003 030f 	and.w	r3, r3, #15
 8005360:	b2da      	uxtb	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <HAL_PCD_EP_SetStall+0x82>
 8005370:	2302      	movs	r3, #2
 8005372:	e01c      	b.n	80053ae <HAL_PCD_EP_SetStall+0xbc>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68f9      	ldr	r1, [r7, #12]
 8005382:	4618      	mov	r0, r3
 8005384:	f003 fd12 	bl	8008dac <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005388:	78fb      	ldrb	r3, [r7, #3]
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	2b00      	cmp	r3, #0
 8005390:	d108      	bne.n	80053a4 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800539c:	4619      	mov	r1, r3
 800539e:	4610      	mov	r0, r2
 80053a0:	f003 ff04 	bl	80091ac <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b084      	sub	sp, #16
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	460b      	mov	r3, r1
 80053c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80053c2:	78fb      	ldrb	r3, [r7, #3]
 80053c4:	f003 020f 	and.w	r2, r3, #15
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d901      	bls.n	80053d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e042      	b.n	800545a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	da0f      	bge.n	80053fc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053dc:	78fb      	ldrb	r3, [r7, #3]
 80053de:	f003 020f 	and.w	r2, r3, #15
 80053e2:	4613      	mov	r3, r2
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	1a9b      	subs	r3, r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	3338      	adds	r3, #56	; 0x38
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	4413      	add	r3, r2
 80053f0:	3304      	adds	r3, #4
 80053f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2201      	movs	r2, #1
 80053f8:	705a      	strb	r2, [r3, #1]
 80053fa:	e00f      	b.n	800541c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053fc:	78fb      	ldrb	r3, [r7, #3]
 80053fe:	f003 020f 	and.w	r2, r3, #15
 8005402:	4613      	mov	r3, r2
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	1a9b      	subs	r3, r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	4413      	add	r3, r2
 8005412:	3304      	adds	r3, #4
 8005414:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005422:	78fb      	ldrb	r3, [r7, #3]
 8005424:	f003 030f 	and.w	r3, r3, #15
 8005428:	b2da      	uxtb	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_PCD_EP_ClrStall+0x86>
 8005438:	2302      	movs	r3, #2
 800543a:	e00e      	b.n	800545a <HAL_PCD_EP_ClrStall+0xa4>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68f9      	ldr	r1, [r7, #12]
 800544a:	4618      	mov	r0, r3
 800544c:	f003 fd1c 	bl	8008e88 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b088      	sub	sp, #32
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	4613      	mov	r3, r2
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	1a9b      	subs	r3, r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	3338      	adds	r3, #56	; 0x38
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	4413      	add	r3, r2
 8005486:	3304      	adds	r3, #4
 8005488:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	699a      	ldr	r2, [r3, #24]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	429a      	cmp	r2, r3
 8005494:	d901      	bls.n	800549a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e067      	b.n	800556a <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	695a      	ldr	r2, [r3, #20]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	69fa      	ldr	r2, [r7, #28]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d902      	bls.n	80054b6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	3303      	adds	r3, #3
 80054ba:	089b      	lsrs	r3, r3, #2
 80054bc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80054be:	e026      	b.n	800550e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	695a      	ldr	r2, [r3, #20]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	69fa      	ldr	r2, [r7, #28]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d902      	bls.n	80054dc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	3303      	adds	r3, #3
 80054e0:	089b      	lsrs	r3, r3, #2
 80054e2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	68d9      	ldr	r1, [r3, #12]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	6978      	ldr	r0, [r7, #20]
 80054f2:	f003 fc01 	bl	8008cf8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	441a      	add	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	699a      	ldr	r2, [r3, #24]
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	441a      	add	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	4413      	add	r3, r2
 8005516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	b29b      	uxth	r3, r3
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	429a      	cmp	r2, r3
 8005522:	d809      	bhi.n	8005538 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	699a      	ldr	r2, [r3, #24]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800552c:	429a      	cmp	r2, r3
 800552e:	d203      	bcs.n	8005538 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1c3      	bne.n	80054c0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	695a      	ldr	r2, [r3, #20]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	429a      	cmp	r2, r3
 8005542:	d811      	bhi.n	8005568 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	2201      	movs	r2, #1
 800554c:	fa02 f303 	lsl.w	r3, r2, r3
 8005550:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	43db      	mvns	r3, r3
 800555e:	6939      	ldr	r1, [r7, #16]
 8005560:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005564:	4013      	ands	r3, r2
 8005566:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3720      	adds	r7, #32
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
	...

08005574 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	333c      	adds	r3, #60	; 0x3c
 800558c:	3304      	adds	r3, #4
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4a19      	ldr	r2, [pc, #100]	; (800560c <PCD_EP_OutXfrComplete_int+0x98>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d124      	bne.n	80055f4 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00a      	beq.n	80055ca <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c0:	461a      	mov	r2, r3
 80055c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055c6:	6093      	str	r3, [r2, #8]
 80055c8:	e01a      	b.n	8005600 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f003 0320 	and.w	r3, r3, #32
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d008      	beq.n	80055e6 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e0:	461a      	mov	r2, r3
 80055e2:	2320      	movs	r3, #32
 80055e4:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	4619      	mov	r1, r3
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f005 fccd 	bl	800af8c <HAL_PCD_DataOutStageCallback>
 80055f2:	e005      	b.n	8005600 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	4619      	mov	r1, r3
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f005 fcc6 	bl	800af8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	4f54310a 	.word	0x4f54310a

08005610 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	333c      	adds	r3, #60	; 0x3c
 8005628:	3304      	adds	r3, #4
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	4a0c      	ldr	r2, [pc, #48]	; (8005674 <PCD_EP_OutSetupPacket_int+0x64>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d90e      	bls.n	8005664 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800564c:	2b00      	cmp	r3, #0
 800564e:	d009      	beq.n	8005664 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565c:	461a      	mov	r2, r3
 800565e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005662:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f005 fc7f 	bl	800af68 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3718      	adds	r7, #24
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	4f54300a 	.word	0x4f54300a

08005678 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	460b      	mov	r3, r1
 8005682:	70fb      	strb	r3, [r7, #3]
 8005684:	4613      	mov	r3, r2
 8005686:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005690:	78fb      	ldrb	r3, [r7, #3]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d107      	bne.n	80056a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005696:	883b      	ldrh	r3, [r7, #0]
 8005698:	0419      	lsls	r1, r3, #16
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	629a      	str	r2, [r3, #40]	; 0x28
 80056a4:	e028      	b.n	80056f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ac:	0c1b      	lsrs	r3, r3, #16
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	4413      	add	r3, r2
 80056b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80056b4:	2300      	movs	r3, #0
 80056b6:	73fb      	strb	r3, [r7, #15]
 80056b8:	e00d      	b.n	80056d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	7bfb      	ldrb	r3, [r7, #15]
 80056c0:	3340      	adds	r3, #64	; 0x40
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	0c1b      	lsrs	r3, r3, #16
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	4413      	add	r3, r2
 80056ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	3301      	adds	r3, #1
 80056d4:	73fb      	strb	r3, [r7, #15]
 80056d6:	7bfa      	ldrb	r2, [r7, #15]
 80056d8:	78fb      	ldrb	r3, [r7, #3]
 80056da:	3b01      	subs	r3, #1
 80056dc:	429a      	cmp	r2, r3
 80056de:	d3ec      	bcc.n	80056ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80056e0:	883b      	ldrh	r3, [r7, #0]
 80056e2:	0418      	lsls	r0, r3, #16
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6819      	ldr	r1, [r3, #0]
 80056e8:	78fb      	ldrb	r3, [r7, #3]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	4302      	orrs	r2, r0
 80056f0:	3340      	adds	r3, #64	; 0x40
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	440b      	add	r3, r1
 80056f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	460b      	mov	r3, r1
 8005710:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	887a      	ldrh	r2, [r7, #2]
 8005718:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800575a:	f043 0303 	orr.w	r3, r3, #3
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005770:	b480      	push	{r7}
 8005772:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005774:	4b0d      	ldr	r3, [pc, #52]	; (80057ac <HAL_PWREx_GetVoltageRange+0x3c>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800577c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005780:	d102      	bne.n	8005788 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005786:	e00b      	b.n	80057a0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005788:	4b08      	ldr	r3, [pc, #32]	; (80057ac <HAL_PWREx_GetVoltageRange+0x3c>)
 800578a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800578e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005796:	d102      	bne.n	800579e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005798:	f44f 7300 	mov.w	r3, #512	; 0x200
 800579c:	e000      	b.n	80057a0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800579e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	40007000 	.word	0x40007000

080057b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d141      	bne.n	8005842 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80057be:	4b4b      	ldr	r3, [pc, #300]	; (80058ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ca:	d131      	bne.n	8005830 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057cc:	4b47      	ldr	r3, [pc, #284]	; (80058ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057d2:	4a46      	ldr	r2, [pc, #280]	; (80058ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057dc:	4b43      	ldr	r3, [pc, #268]	; (80058ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80057e4:	4a41      	ldr	r2, [pc, #260]	; (80058ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80057ec:	4b40      	ldr	r3, [pc, #256]	; (80058f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2232      	movs	r2, #50	; 0x32
 80057f2:	fb02 f303 	mul.w	r3, r2, r3
 80057f6:	4a3f      	ldr	r2, [pc, #252]	; (80058f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80057f8:	fba2 2303 	umull	r2, r3, r2, r3
 80057fc:	0c9b      	lsrs	r3, r3, #18
 80057fe:	3301      	adds	r3, #1
 8005800:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005802:	e002      	b.n	800580a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	3b01      	subs	r3, #1
 8005808:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800580a:	4b38      	ldr	r3, [pc, #224]	; (80058ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005816:	d102      	bne.n	800581e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1f2      	bne.n	8005804 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800581e:	4b33      	ldr	r3, [pc, #204]	; (80058ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800582a:	d158      	bne.n	80058de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e057      	b.n	80058e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005830:	4b2e      	ldr	r3, [pc, #184]	; (80058ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005832:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005836:	4a2d      	ldr	r2, [pc, #180]	; (80058ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800583c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005840:	e04d      	b.n	80058de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005848:	d141      	bne.n	80058ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800584a:	4b28      	ldr	r3, [pc, #160]	; (80058ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005856:	d131      	bne.n	80058bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005858:	4b24      	ldr	r3, [pc, #144]	; (80058ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800585a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800585e:	4a23      	ldr	r2, [pc, #140]	; (80058ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005864:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005868:	4b20      	ldr	r3, [pc, #128]	; (80058ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005870:	4a1e      	ldr	r2, [pc, #120]	; (80058ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005872:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005876:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005878:	4b1d      	ldr	r3, [pc, #116]	; (80058f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2232      	movs	r2, #50	; 0x32
 800587e:	fb02 f303 	mul.w	r3, r2, r3
 8005882:	4a1c      	ldr	r2, [pc, #112]	; (80058f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005884:	fba2 2303 	umull	r2, r3, r2, r3
 8005888:	0c9b      	lsrs	r3, r3, #18
 800588a:	3301      	adds	r3, #1
 800588c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800588e:	e002      	b.n	8005896 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	3b01      	subs	r3, #1
 8005894:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005896:	4b15      	ldr	r3, [pc, #84]	; (80058ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800589e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058a2:	d102      	bne.n	80058aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1f2      	bne.n	8005890 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058aa:	4b10      	ldr	r3, [pc, #64]	; (80058ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b6:	d112      	bne.n	80058de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e011      	b.n	80058e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058bc:	4b0b      	ldr	r3, [pc, #44]	; (80058ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058c2:	4a0a      	ldr	r2, [pc, #40]	; (80058ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80058cc:	e007      	b.n	80058de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80058ce:	4b07      	ldr	r3, [pc, #28]	; (80058ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80058d6:	4a05      	ldr	r2, [pc, #20]	; (80058ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058dc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	40007000 	.word	0x40007000
 80058f0:	20000000 	.word	0x20000000
 80058f4:	431bde83 	.word	0x431bde83

080058f8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80058f8:	b480      	push	{r7}
 80058fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80058fc:	4b05      	ldr	r3, [pc, #20]	; (8005914 <HAL_PWREx_EnableVddUSB+0x1c>)
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	4a04      	ldr	r2, [pc, #16]	; (8005914 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005902:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005906:	6053      	str	r3, [r2, #4]
}
 8005908:	bf00      	nop
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	40007000 	.word	0x40007000

08005918 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800591c:	4b05      	ldr	r3, [pc, #20]	; (8005934 <HAL_PWREx_EnableVddIO2+0x1c>)
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	4a04      	ldr	r2, [pc, #16]	; (8005934 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005922:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005926:	6053      	str	r3, [r2, #4]
}
 8005928:	bf00      	nop
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40007000 	.word	0x40007000

08005938 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b088      	sub	sp, #32
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d102      	bne.n	800594c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	f000 bc16 	b.w	8006178 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800594c:	4ba0      	ldr	r3, [pc, #640]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f003 030c 	and.w	r3, r3, #12
 8005954:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005956:	4b9e      	ldr	r3, [pc, #632]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0310 	and.w	r3, r3, #16
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 80e4 	beq.w	8005b36 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d007      	beq.n	8005984 <HAL_RCC_OscConfig+0x4c>
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	2b0c      	cmp	r3, #12
 8005978:	f040 808b 	bne.w	8005a92 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	2b01      	cmp	r3, #1
 8005980:	f040 8087 	bne.w	8005a92 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005984:	4b92      	ldr	r3, [pc, #584]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d005      	beq.n	800599c <HAL_RCC_OscConfig+0x64>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e3ed      	b.n	8006178 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a1a      	ldr	r2, [r3, #32]
 80059a0:	4b8b      	ldr	r3, [pc, #556]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0308 	and.w	r3, r3, #8
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d004      	beq.n	80059b6 <HAL_RCC_OscConfig+0x7e>
 80059ac:	4b88      	ldr	r3, [pc, #544]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059b4:	e005      	b.n	80059c2 <HAL_RCC_OscConfig+0x8a>
 80059b6:	4b86      	ldr	r3, [pc, #536]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 80059b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059bc:	091b      	lsrs	r3, r3, #4
 80059be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d223      	bcs.n	8005a0e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 fdc6 	bl	800655c <RCC_SetFlashLatencyFromMSIRange>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e3ce      	b.n	8006178 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059da:	4b7d      	ldr	r3, [pc, #500]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a7c      	ldr	r2, [pc, #496]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 80059e0:	f043 0308 	orr.w	r3, r3, #8
 80059e4:	6013      	str	r3, [r2, #0]
 80059e6:	4b7a      	ldr	r3, [pc, #488]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	4977      	ldr	r1, [pc, #476]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059f8:	4b75      	ldr	r3, [pc, #468]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	69db      	ldr	r3, [r3, #28]
 8005a04:	021b      	lsls	r3, r3, #8
 8005a06:	4972      	ldr	r1, [pc, #456]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	604b      	str	r3, [r1, #4]
 8005a0c:	e025      	b.n	8005a5a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a0e:	4b70      	ldr	r3, [pc, #448]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a6f      	ldr	r2, [pc, #444]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005a14:	f043 0308 	orr.w	r3, r3, #8
 8005a18:	6013      	str	r3, [r2, #0]
 8005a1a:	4b6d      	ldr	r3, [pc, #436]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	496a      	ldr	r1, [pc, #424]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a2c:	4b68      	ldr	r3, [pc, #416]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	021b      	lsls	r3, r3, #8
 8005a3a:	4965      	ldr	r1, [pc, #404]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d109      	bne.n	8005a5a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 fd86 	bl	800655c <RCC_SetFlashLatencyFromMSIRange>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e38e      	b.n	8006178 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a5a:	f000 fcbf 	bl	80063dc <HAL_RCC_GetSysClockFreq>
 8005a5e:	4601      	mov	r1, r0
 8005a60:	4b5b      	ldr	r3, [pc, #364]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	091b      	lsrs	r3, r3, #4
 8005a66:	f003 030f 	and.w	r3, r3, #15
 8005a6a:	4a5a      	ldr	r2, [pc, #360]	; (8005bd4 <HAL_RCC_OscConfig+0x29c>)
 8005a6c:	5cd3      	ldrb	r3, [r2, r3]
 8005a6e:	f003 031f 	and.w	r3, r3, #31
 8005a72:	fa21 f303 	lsr.w	r3, r1, r3
 8005a76:	4a58      	ldr	r2, [pc, #352]	; (8005bd8 <HAL_RCC_OscConfig+0x2a0>)
 8005a78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005a7a:	4b58      	ldr	r3, [pc, #352]	; (8005bdc <HAL_RCC_OscConfig+0x2a4>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fc fd14 	bl	80024ac <HAL_InitTick>
 8005a84:	4603      	mov	r3, r0
 8005a86:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d052      	beq.n	8005b34 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005a8e:	7bfb      	ldrb	r3, [r7, #15]
 8005a90:	e372      	b.n	8006178 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d032      	beq.n	8005b00 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005a9a:	4b4d      	ldr	r3, [pc, #308]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a4c      	ldr	r2, [pc, #304]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005aa0:	f043 0301 	orr.w	r3, r3, #1
 8005aa4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005aa6:	f7fc fd51 	bl	800254c <HAL_GetTick>
 8005aaa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005aac:	e008      	b.n	8005ac0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005aae:	f7fc fd4d 	bl	800254c <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e35b      	b.n	8006178 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ac0:	4b43      	ldr	r3, [pc, #268]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d0f0      	beq.n	8005aae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005acc:	4b40      	ldr	r3, [pc, #256]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a3f      	ldr	r2, [pc, #252]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005ad2:	f043 0308 	orr.w	r3, r3, #8
 8005ad6:	6013      	str	r3, [r2, #0]
 8005ad8:	4b3d      	ldr	r3, [pc, #244]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	493a      	ldr	r1, [pc, #232]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005aea:	4b39      	ldr	r3, [pc, #228]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	021b      	lsls	r3, r3, #8
 8005af8:	4935      	ldr	r1, [pc, #212]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	604b      	str	r3, [r1, #4]
 8005afe:	e01a      	b.n	8005b36 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005b00:	4b33      	ldr	r3, [pc, #204]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a32      	ldr	r2, [pc, #200]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005b06:	f023 0301 	bic.w	r3, r3, #1
 8005b0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b0c:	f7fc fd1e 	bl	800254c <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b14:	f7fc fd1a 	bl	800254c <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e328      	b.n	8006178 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005b26:	4b2a      	ldr	r3, [pc, #168]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1f0      	bne.n	8005b14 <HAL_RCC_OscConfig+0x1dc>
 8005b32:	e000      	b.n	8005b36 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d073      	beq.n	8005c2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d005      	beq.n	8005b54 <HAL_RCC_OscConfig+0x21c>
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	2b0c      	cmp	r3, #12
 8005b4c:	d10e      	bne.n	8005b6c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	2b03      	cmp	r3, #3
 8005b52:	d10b      	bne.n	8005b6c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b54:	4b1e      	ldr	r3, [pc, #120]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d063      	beq.n	8005c28 <HAL_RCC_OscConfig+0x2f0>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d15f      	bne.n	8005c28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e305      	b.n	8006178 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b74:	d106      	bne.n	8005b84 <HAL_RCC_OscConfig+0x24c>
 8005b76:	4b16      	ldr	r3, [pc, #88]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a15      	ldr	r2, [pc, #84]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b80:	6013      	str	r3, [r2, #0]
 8005b82:	e01d      	b.n	8005bc0 <HAL_RCC_OscConfig+0x288>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b8c:	d10c      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x270>
 8005b8e:	4b10      	ldr	r3, [pc, #64]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a0f      	ldr	r2, [pc, #60]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b98:	6013      	str	r3, [r2, #0]
 8005b9a:	4b0d      	ldr	r3, [pc, #52]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a0c      	ldr	r2, [pc, #48]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	e00b      	b.n	8005bc0 <HAL_RCC_OscConfig+0x288>
 8005ba8:	4b09      	ldr	r3, [pc, #36]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a08      	ldr	r2, [pc, #32]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bb2:	6013      	str	r3, [r2, #0]
 8005bb4:	4b06      	ldr	r3, [pc, #24]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a05      	ldr	r2, [pc, #20]	; (8005bd0 <HAL_RCC_OscConfig+0x298>)
 8005bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d01b      	beq.n	8005c00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc8:	f7fc fcc0 	bl	800254c <HAL_GetTick>
 8005bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bce:	e010      	b.n	8005bf2 <HAL_RCC_OscConfig+0x2ba>
 8005bd0:	40021000 	.word	0x40021000
 8005bd4:	0800dafc 	.word	0x0800dafc
 8005bd8:	20000000 	.word	0x20000000
 8005bdc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005be0:	f7fc fcb4 	bl	800254c <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	2b64      	cmp	r3, #100	; 0x64
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e2c2      	b.n	8006178 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bf2:	4baf      	ldr	r3, [pc, #700]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d0f0      	beq.n	8005be0 <HAL_RCC_OscConfig+0x2a8>
 8005bfe:	e014      	b.n	8005c2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c00:	f7fc fca4 	bl	800254c <HAL_GetTick>
 8005c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c06:	e008      	b.n	8005c1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c08:	f7fc fca0 	bl	800254c <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b64      	cmp	r3, #100	; 0x64
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e2ae      	b.n	8006178 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c1a:	4ba5      	ldr	r3, [pc, #660]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1f0      	bne.n	8005c08 <HAL_RCC_OscConfig+0x2d0>
 8005c26:	e000      	b.n	8005c2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d060      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	2b04      	cmp	r3, #4
 8005c3a:	d005      	beq.n	8005c48 <HAL_RCC_OscConfig+0x310>
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	2b0c      	cmp	r3, #12
 8005c40:	d119      	bne.n	8005c76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d116      	bne.n	8005c76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c48:	4b99      	ldr	r3, [pc, #612]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <HAL_RCC_OscConfig+0x328>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e28b      	b.n	8006178 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c60:	4b93      	ldr	r3, [pc, #588]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	061b      	lsls	r3, r3, #24
 8005c6e:	4990      	ldr	r1, [pc, #576]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c74:	e040      	b.n	8005cf8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d023      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c7e:	4b8c      	ldr	r3, [pc, #560]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a8b      	ldr	r2, [pc, #556]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c8a:	f7fc fc5f 	bl	800254c <HAL_GetTick>
 8005c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c90:	e008      	b.n	8005ca4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c92:	f7fc fc5b 	bl	800254c <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d901      	bls.n	8005ca4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e269      	b.n	8006178 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ca4:	4b82      	ldr	r3, [pc, #520]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d0f0      	beq.n	8005c92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cb0:	4b7f      	ldr	r3, [pc, #508]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	061b      	lsls	r3, r3, #24
 8005cbe:	497c      	ldr	r1, [pc, #496]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	604b      	str	r3, [r1, #4]
 8005cc4:	e018      	b.n	8005cf8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cc6:	4b7a      	ldr	r3, [pc, #488]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a79      	ldr	r2, [pc, #484]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd2:	f7fc fc3b 	bl	800254c <HAL_GetTick>
 8005cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cd8:	e008      	b.n	8005cec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cda:	f7fc fc37 	bl	800254c <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d901      	bls.n	8005cec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e245      	b.n	8006178 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cec:	4b70      	ldr	r3, [pc, #448]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1f0      	bne.n	8005cda <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0308 	and.w	r3, r3, #8
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d03c      	beq.n	8005d7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d01c      	beq.n	8005d46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d0c:	4b68      	ldr	r3, [pc, #416]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d12:	4a67      	ldr	r2, [pc, #412]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005d14:	f043 0301 	orr.w	r3, r3, #1
 8005d18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d1c:	f7fc fc16 	bl	800254c <HAL_GetTick>
 8005d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d24:	f7fc fc12 	bl	800254c <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e220      	b.n	8006178 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d36:	4b5e      	ldr	r3, [pc, #376]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005d38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d0ef      	beq.n	8005d24 <HAL_RCC_OscConfig+0x3ec>
 8005d44:	e01b      	b.n	8005d7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d46:	4b5a      	ldr	r3, [pc, #360]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005d48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d4c:	4a58      	ldr	r2, [pc, #352]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005d4e:	f023 0301 	bic.w	r3, r3, #1
 8005d52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d56:	f7fc fbf9 	bl	800254c <HAL_GetTick>
 8005d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d5c:	e008      	b.n	8005d70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d5e:	f7fc fbf5 	bl	800254c <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d901      	bls.n	8005d70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e203      	b.n	8006178 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d70:	4b4f      	ldr	r3, [pc, #316]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1ef      	bne.n	8005d5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0304 	and.w	r3, r3, #4
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 80a6 	beq.w	8005ed8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005d90:	4b47      	ldr	r3, [pc, #284]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10d      	bne.n	8005db8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d9c:	4b44      	ldr	r3, [pc, #272]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da0:	4a43      	ldr	r2, [pc, #268]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005da6:	6593      	str	r3, [r2, #88]	; 0x58
 8005da8:	4b41      	ldr	r3, [pc, #260]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005db0:	60bb      	str	r3, [r7, #8]
 8005db2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005db4:	2301      	movs	r3, #1
 8005db6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005db8:	4b3e      	ldr	r3, [pc, #248]	; (8005eb4 <HAL_RCC_OscConfig+0x57c>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d118      	bne.n	8005df6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dc4:	4b3b      	ldr	r3, [pc, #236]	; (8005eb4 <HAL_RCC_OscConfig+0x57c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a3a      	ldr	r2, [pc, #232]	; (8005eb4 <HAL_RCC_OscConfig+0x57c>)
 8005dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dd0:	f7fc fbbc 	bl	800254c <HAL_GetTick>
 8005dd4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dd6:	e008      	b.n	8005dea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dd8:	f7fc fbb8 	bl	800254c <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e1c6      	b.n	8006178 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dea:	4b32      	ldr	r3, [pc, #200]	; (8005eb4 <HAL_RCC_OscConfig+0x57c>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d0f0      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d108      	bne.n	8005e10 <HAL_RCC_OscConfig+0x4d8>
 8005dfe:	4b2c      	ldr	r3, [pc, #176]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e04:	4a2a      	ldr	r2, [pc, #168]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005e06:	f043 0301 	orr.w	r3, r3, #1
 8005e0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e0e:	e024      	b.n	8005e5a <HAL_RCC_OscConfig+0x522>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	2b05      	cmp	r3, #5
 8005e16:	d110      	bne.n	8005e3a <HAL_RCC_OscConfig+0x502>
 8005e18:	4b25      	ldr	r3, [pc, #148]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1e:	4a24      	ldr	r2, [pc, #144]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005e20:	f043 0304 	orr.w	r3, r3, #4
 8005e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e28:	4b21      	ldr	r3, [pc, #132]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e2e:	4a20      	ldr	r2, [pc, #128]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005e30:	f043 0301 	orr.w	r3, r3, #1
 8005e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e38:	e00f      	b.n	8005e5a <HAL_RCC_OscConfig+0x522>
 8005e3a:	4b1d      	ldr	r3, [pc, #116]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e40:	4a1b      	ldr	r2, [pc, #108]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005e42:	f023 0301 	bic.w	r3, r3, #1
 8005e46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e4a:	4b19      	ldr	r3, [pc, #100]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e50:	4a17      	ldr	r2, [pc, #92]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005e52:	f023 0304 	bic.w	r3, r3, #4
 8005e56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d016      	beq.n	8005e90 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e62:	f7fc fb73 	bl	800254c <HAL_GetTick>
 8005e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e68:	e00a      	b.n	8005e80 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e6a:	f7fc fb6f 	bl	800254c <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d901      	bls.n	8005e80 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e17b      	b.n	8006178 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e80:	4b0b      	ldr	r3, [pc, #44]	; (8005eb0 <HAL_RCC_OscConfig+0x578>)
 8005e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d0ed      	beq.n	8005e6a <HAL_RCC_OscConfig+0x532>
 8005e8e:	e01a      	b.n	8005ec6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e90:	f7fc fb5c 	bl	800254c <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e96:	e00f      	b.n	8005eb8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e98:	f7fc fb58 	bl	800254c <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d906      	bls.n	8005eb8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e164      	b.n	8006178 <HAL_RCC_OscConfig+0x840>
 8005eae:	bf00      	nop
 8005eb0:	40021000 	.word	0x40021000
 8005eb4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005eb8:	4ba8      	ldr	r3, [pc, #672]	; (800615c <HAL_RCC_OscConfig+0x824>)
 8005eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1e8      	bne.n	8005e98 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ec6:	7ffb      	ldrb	r3, [r7, #31]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d105      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ecc:	4ba3      	ldr	r3, [pc, #652]	; (800615c <HAL_RCC_OscConfig+0x824>)
 8005ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed0:	4aa2      	ldr	r2, [pc, #648]	; (800615c <HAL_RCC_OscConfig+0x824>)
 8005ed2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ed6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0320 	and.w	r3, r3, #32
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d03c      	beq.n	8005f5e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d01c      	beq.n	8005f26 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005eec:	4b9b      	ldr	r3, [pc, #620]	; (800615c <HAL_RCC_OscConfig+0x824>)
 8005eee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ef2:	4a9a      	ldr	r2, [pc, #616]	; (800615c <HAL_RCC_OscConfig+0x824>)
 8005ef4:	f043 0301 	orr.w	r3, r3, #1
 8005ef8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005efc:	f7fc fb26 	bl	800254c <HAL_GetTick>
 8005f00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f02:	e008      	b.n	8005f16 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f04:	f7fc fb22 	bl	800254c <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e130      	b.n	8006178 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f16:	4b91      	ldr	r3, [pc, #580]	; (800615c <HAL_RCC_OscConfig+0x824>)
 8005f18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0ef      	beq.n	8005f04 <HAL_RCC_OscConfig+0x5cc>
 8005f24:	e01b      	b.n	8005f5e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f26:	4b8d      	ldr	r3, [pc, #564]	; (800615c <HAL_RCC_OscConfig+0x824>)
 8005f28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f2c:	4a8b      	ldr	r2, [pc, #556]	; (800615c <HAL_RCC_OscConfig+0x824>)
 8005f2e:	f023 0301 	bic.w	r3, r3, #1
 8005f32:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f36:	f7fc fb09 	bl	800254c <HAL_GetTick>
 8005f3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f3c:	e008      	b.n	8005f50 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f3e:	f7fc fb05 	bl	800254c <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d901      	bls.n	8005f50 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e113      	b.n	8006178 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f50:	4b82      	ldr	r3, [pc, #520]	; (800615c <HAL_RCC_OscConfig+0x824>)
 8005f52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1ef      	bne.n	8005f3e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 8107 	beq.w	8006176 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	f040 80cb 	bne.w	8006108 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005f72:	4b7a      	ldr	r3, [pc, #488]	; (800615c <HAL_RCC_OscConfig+0x824>)
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f003 0203 	and.w	r2, r3, #3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d12c      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f90:	3b01      	subs	r3, #1
 8005f92:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d123      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d11b      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d113      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc2:	085b      	lsrs	r3, r3, #1
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d109      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	085b      	lsrs	r3, r3, #1
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d06d      	beq.n	80060bc <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	2b0c      	cmp	r3, #12
 8005fe4:	d068      	beq.n	80060b8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005fe6:	4b5d      	ldr	r3, [pc, #372]	; (800615c <HAL_RCC_OscConfig+0x824>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d105      	bne.n	8005ffe <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005ff2:	4b5a      	ldr	r3, [pc, #360]	; (800615c <HAL_RCC_OscConfig+0x824>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e0ba      	b.n	8006178 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006002:	4b56      	ldr	r3, [pc, #344]	; (800615c <HAL_RCC_OscConfig+0x824>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a55      	ldr	r2, [pc, #340]	; (800615c <HAL_RCC_OscConfig+0x824>)
 8006008:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800600c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800600e:	f7fc fa9d 	bl	800254c <HAL_GetTick>
 8006012:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006014:	e008      	b.n	8006028 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006016:	f7fc fa99 	bl	800254c <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d901      	bls.n	8006028 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e0a7      	b.n	8006178 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006028:	4b4c      	ldr	r3, [pc, #304]	; (800615c <HAL_RCC_OscConfig+0x824>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1f0      	bne.n	8006016 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006034:	4b49      	ldr	r3, [pc, #292]	; (800615c <HAL_RCC_OscConfig+0x824>)
 8006036:	68da      	ldr	r2, [r3, #12]
 8006038:	4b49      	ldr	r3, [pc, #292]	; (8006160 <HAL_RCC_OscConfig+0x828>)
 800603a:	4013      	ands	r3, r2
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006044:	3a01      	subs	r2, #1
 8006046:	0112      	lsls	r2, r2, #4
 8006048:	4311      	orrs	r1, r2
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800604e:	0212      	lsls	r2, r2, #8
 8006050:	4311      	orrs	r1, r2
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006056:	0852      	lsrs	r2, r2, #1
 8006058:	3a01      	subs	r2, #1
 800605a:	0552      	lsls	r2, r2, #21
 800605c:	4311      	orrs	r1, r2
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006062:	0852      	lsrs	r2, r2, #1
 8006064:	3a01      	subs	r2, #1
 8006066:	0652      	lsls	r2, r2, #25
 8006068:	4311      	orrs	r1, r2
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800606e:	06d2      	lsls	r2, r2, #27
 8006070:	430a      	orrs	r2, r1
 8006072:	493a      	ldr	r1, [pc, #232]	; (800615c <HAL_RCC_OscConfig+0x824>)
 8006074:	4313      	orrs	r3, r2
 8006076:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006078:	4b38      	ldr	r3, [pc, #224]	; (800615c <HAL_RCC_OscConfig+0x824>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a37      	ldr	r2, [pc, #220]	; (800615c <HAL_RCC_OscConfig+0x824>)
 800607e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006082:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006084:	4b35      	ldr	r3, [pc, #212]	; (800615c <HAL_RCC_OscConfig+0x824>)
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	4a34      	ldr	r2, [pc, #208]	; (800615c <HAL_RCC_OscConfig+0x824>)
 800608a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800608e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006090:	f7fc fa5c 	bl	800254c <HAL_GetTick>
 8006094:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006096:	e008      	b.n	80060aa <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006098:	f7fc fa58 	bl	800254c <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d901      	bls.n	80060aa <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e066      	b.n	8006178 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060aa:	4b2c      	ldr	r3, [pc, #176]	; (800615c <HAL_RCC_OscConfig+0x824>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d0f0      	beq.n	8006098 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80060b6:	e05e      	b.n	8006176 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e05d      	b.n	8006178 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060bc:	4b27      	ldr	r3, [pc, #156]	; (800615c <HAL_RCC_OscConfig+0x824>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d156      	bne.n	8006176 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80060c8:	4b24      	ldr	r3, [pc, #144]	; (800615c <HAL_RCC_OscConfig+0x824>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a23      	ldr	r2, [pc, #140]	; (800615c <HAL_RCC_OscConfig+0x824>)
 80060ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060d4:	4b21      	ldr	r3, [pc, #132]	; (800615c <HAL_RCC_OscConfig+0x824>)
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	4a20      	ldr	r2, [pc, #128]	; (800615c <HAL_RCC_OscConfig+0x824>)
 80060da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060e0:	f7fc fa34 	bl	800254c <HAL_GetTick>
 80060e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060e6:	e008      	b.n	80060fa <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060e8:	f7fc fa30 	bl	800254c <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d901      	bls.n	80060fa <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e03e      	b.n	8006178 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060fa:	4b18      	ldr	r3, [pc, #96]	; (800615c <HAL_RCC_OscConfig+0x824>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d0f0      	beq.n	80060e8 <HAL_RCC_OscConfig+0x7b0>
 8006106:	e036      	b.n	8006176 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	2b0c      	cmp	r3, #12
 800610c:	d031      	beq.n	8006172 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800610e:	4b13      	ldr	r3, [pc, #76]	; (800615c <HAL_RCC_OscConfig+0x824>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a12      	ldr	r2, [pc, #72]	; (800615c <HAL_RCC_OscConfig+0x824>)
 8006114:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006118:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800611a:	4b10      	ldr	r3, [pc, #64]	; (800615c <HAL_RCC_OscConfig+0x824>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d105      	bne.n	8006132 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006126:	4b0d      	ldr	r3, [pc, #52]	; (800615c <HAL_RCC_OscConfig+0x824>)
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	4a0c      	ldr	r2, [pc, #48]	; (800615c <HAL_RCC_OscConfig+0x824>)
 800612c:	f023 0303 	bic.w	r3, r3, #3
 8006130:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006132:	4b0a      	ldr	r3, [pc, #40]	; (800615c <HAL_RCC_OscConfig+0x824>)
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	4a09      	ldr	r2, [pc, #36]	; (800615c <HAL_RCC_OscConfig+0x824>)
 8006138:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800613c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006140:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006142:	f7fc fa03 	bl	800254c <HAL_GetTick>
 8006146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006148:	e00c      	b.n	8006164 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800614a:	f7fc f9ff 	bl	800254c <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	2b02      	cmp	r3, #2
 8006156:	d905      	bls.n	8006164 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e00d      	b.n	8006178 <HAL_RCC_OscConfig+0x840>
 800615c:	40021000 	.word	0x40021000
 8006160:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006164:	4b06      	ldr	r3, [pc, #24]	; (8006180 <HAL_RCC_OscConfig+0x848>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1ec      	bne.n	800614a <HAL_RCC_OscConfig+0x812>
 8006170:	e001      	b.n	8006176 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e000      	b.n	8006178 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3720      	adds	r7, #32
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	40021000 	.word	0x40021000

08006184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800618e:	2300      	movs	r3, #0
 8006190:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e10f      	b.n	80063bc <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800619c:	4b89      	ldr	r3, [pc, #548]	; (80063c4 <HAL_RCC_ClockConfig+0x240>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 030f 	and.w	r3, r3, #15
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d910      	bls.n	80061cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061aa:	4b86      	ldr	r3, [pc, #536]	; (80063c4 <HAL_RCC_ClockConfig+0x240>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f023 020f 	bic.w	r2, r3, #15
 80061b2:	4984      	ldr	r1, [pc, #528]	; (80063c4 <HAL_RCC_ClockConfig+0x240>)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ba:	4b82      	ldr	r3, [pc, #520]	; (80063c4 <HAL_RCC_ClockConfig+0x240>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 030f 	and.w	r3, r3, #15
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d001      	beq.n	80061cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e0f7      	b.n	80063bc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 8089 	beq.w	80062ec <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	2b03      	cmp	r3, #3
 80061e0:	d133      	bne.n	800624a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061e2:	4b79      	ldr	r3, [pc, #484]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e0e4      	b.n	80063bc <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80061f2:	f000 fa0d 	bl	8006610 <RCC_GetSysClockFreqFromPLLSource>
 80061f6:	4602      	mov	r2, r0
 80061f8:	4b74      	ldr	r3, [pc, #464]	; (80063cc <HAL_RCC_ClockConfig+0x248>)
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d955      	bls.n	80062aa <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80061fe:	4b72      	ldr	r3, [pc, #456]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10a      	bne.n	8006220 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800620a:	4b6f      	ldr	r3, [pc, #444]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006212:	4a6d      	ldr	r2, [pc, #436]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 8006214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006218:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800621a:	2380      	movs	r3, #128	; 0x80
 800621c:	617b      	str	r3, [r7, #20]
 800621e:	e044      	b.n	80062aa <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	2b00      	cmp	r3, #0
 800622a:	d03e      	beq.n	80062aa <HAL_RCC_ClockConfig+0x126>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d13a      	bne.n	80062aa <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006234:	4b64      	ldr	r3, [pc, #400]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800623c:	4a62      	ldr	r2, [pc, #392]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 800623e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006242:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006244:	2380      	movs	r3, #128	; 0x80
 8006246:	617b      	str	r3, [r7, #20]
 8006248:	e02f      	b.n	80062aa <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	2b02      	cmp	r3, #2
 8006250:	d107      	bne.n	8006262 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006252:	4b5d      	ldr	r3, [pc, #372]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d115      	bne.n	800628a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e0ac      	b.n	80063bc <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d107      	bne.n	800627a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800626a:	4b57      	ldr	r3, [pc, #348]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	2b00      	cmp	r3, #0
 8006274:	d109      	bne.n	800628a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e0a0      	b.n	80063bc <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800627a:	4b53      	ldr	r3, [pc, #332]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e098      	b.n	80063bc <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800628a:	f000 f8a7 	bl	80063dc <HAL_RCC_GetSysClockFreq>
 800628e:	4602      	mov	r2, r0
 8006290:	4b4e      	ldr	r3, [pc, #312]	; (80063cc <HAL_RCC_ClockConfig+0x248>)
 8006292:	429a      	cmp	r2, r3
 8006294:	d909      	bls.n	80062aa <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006296:	4b4c      	ldr	r3, [pc, #304]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800629e:	4a4a      	ldr	r2, [pc, #296]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 80062a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80062a6:	2380      	movs	r3, #128	; 0x80
 80062a8:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80062aa:	4b47      	ldr	r3, [pc, #284]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f023 0203 	bic.w	r2, r3, #3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	4944      	ldr	r1, [pc, #272]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062bc:	f7fc f946 	bl	800254c <HAL_GetTick>
 80062c0:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062c2:	e00a      	b.n	80062da <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062c4:	f7fc f942 	bl	800254c <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d901      	bls.n	80062da <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e070      	b.n	80063bc <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062da:	4b3b      	ldr	r3, [pc, #236]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f003 020c 	and.w	r2, r3, #12
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d1eb      	bne.n	80062c4 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d009      	beq.n	800630c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062f8:	4b33      	ldr	r3, [pc, #204]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	4930      	ldr	r1, [pc, #192]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 8006306:	4313      	orrs	r3, r2
 8006308:	608b      	str	r3, [r1, #8]
 800630a:	e008      	b.n	800631e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	2b80      	cmp	r3, #128	; 0x80
 8006310:	d105      	bne.n	800631e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006312:	4b2d      	ldr	r3, [pc, #180]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	4a2c      	ldr	r2, [pc, #176]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 8006318:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800631c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800631e:	4b29      	ldr	r3, [pc, #164]	; (80063c4 <HAL_RCC_ClockConfig+0x240>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 030f 	and.w	r3, r3, #15
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	429a      	cmp	r2, r3
 800632a:	d210      	bcs.n	800634e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800632c:	4b25      	ldr	r3, [pc, #148]	; (80063c4 <HAL_RCC_ClockConfig+0x240>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f023 020f 	bic.w	r2, r3, #15
 8006334:	4923      	ldr	r1, [pc, #140]	; (80063c4 <HAL_RCC_ClockConfig+0x240>)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	4313      	orrs	r3, r2
 800633a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800633c:	4b21      	ldr	r3, [pc, #132]	; (80063c4 <HAL_RCC_ClockConfig+0x240>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 030f 	and.w	r3, r3, #15
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	429a      	cmp	r2, r3
 8006348:	d001      	beq.n	800634e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e036      	b.n	80063bc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0304 	and.w	r3, r3, #4
 8006356:	2b00      	cmp	r3, #0
 8006358:	d008      	beq.n	800636c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800635a:	4b1b      	ldr	r3, [pc, #108]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	4918      	ldr	r1, [pc, #96]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 8006368:	4313      	orrs	r3, r2
 800636a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0308 	and.w	r3, r3, #8
 8006374:	2b00      	cmp	r3, #0
 8006376:	d009      	beq.n	800638c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006378:	4b13      	ldr	r3, [pc, #76]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	00db      	lsls	r3, r3, #3
 8006386:	4910      	ldr	r1, [pc, #64]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 8006388:	4313      	orrs	r3, r2
 800638a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800638c:	f000 f826 	bl	80063dc <HAL_RCC_GetSysClockFreq>
 8006390:	4601      	mov	r1, r0
 8006392:	4b0d      	ldr	r3, [pc, #52]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	091b      	lsrs	r3, r3, #4
 8006398:	f003 030f 	and.w	r3, r3, #15
 800639c:	4a0c      	ldr	r2, [pc, #48]	; (80063d0 <HAL_RCC_ClockConfig+0x24c>)
 800639e:	5cd3      	ldrb	r3, [r2, r3]
 80063a0:	f003 031f 	and.w	r3, r3, #31
 80063a4:	fa21 f303 	lsr.w	r3, r1, r3
 80063a8:	4a0a      	ldr	r2, [pc, #40]	; (80063d4 <HAL_RCC_ClockConfig+0x250>)
 80063aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80063ac:	4b0a      	ldr	r3, [pc, #40]	; (80063d8 <HAL_RCC_ClockConfig+0x254>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7fc f87b 	bl	80024ac <HAL_InitTick>
 80063b6:	4603      	mov	r3, r0
 80063b8:	73fb      	strb	r3, [r7, #15]

  return status;
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3718      	adds	r7, #24
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	40022000 	.word	0x40022000
 80063c8:	40021000 	.word	0x40021000
 80063cc:	04c4b400 	.word	0x04c4b400
 80063d0:	0800dafc 	.word	0x0800dafc
 80063d4:	20000000 	.word	0x20000000
 80063d8:	20000004 	.word	0x20000004

080063dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063dc:	b480      	push	{r7}
 80063de:	b089      	sub	sp, #36	; 0x24
 80063e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	61fb      	str	r3, [r7, #28]
 80063e6:	2300      	movs	r3, #0
 80063e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063ea:	4b3d      	ldr	r3, [pc, #244]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x104>)
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f003 030c 	and.w	r3, r3, #12
 80063f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063f4:	4b3a      	ldr	r3, [pc, #232]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x104>)
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f003 0303 	and.w	r3, r3, #3
 80063fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d005      	beq.n	8006410 <HAL_RCC_GetSysClockFreq+0x34>
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	2b0c      	cmp	r3, #12
 8006408:	d121      	bne.n	800644e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d11e      	bne.n	800644e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006410:	4b33      	ldr	r3, [pc, #204]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x104>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0308 	and.w	r3, r3, #8
 8006418:	2b00      	cmp	r3, #0
 800641a:	d107      	bne.n	800642c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800641c:	4b30      	ldr	r3, [pc, #192]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x104>)
 800641e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006422:	0a1b      	lsrs	r3, r3, #8
 8006424:	f003 030f 	and.w	r3, r3, #15
 8006428:	61fb      	str	r3, [r7, #28]
 800642a:	e005      	b.n	8006438 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800642c:	4b2c      	ldr	r3, [pc, #176]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x104>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	091b      	lsrs	r3, r3, #4
 8006432:	f003 030f 	and.w	r3, r3, #15
 8006436:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006438:	4a2a      	ldr	r2, [pc, #168]	; (80064e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006440:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10d      	bne.n	8006464 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800644c:	e00a      	b.n	8006464 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	2b04      	cmp	r3, #4
 8006452:	d102      	bne.n	800645a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006454:	4b24      	ldr	r3, [pc, #144]	; (80064e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006456:	61bb      	str	r3, [r7, #24]
 8006458:	e004      	b.n	8006464 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	2b08      	cmp	r3, #8
 800645e:	d101      	bne.n	8006464 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006460:	4b21      	ldr	r3, [pc, #132]	; (80064e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006462:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	2b0c      	cmp	r3, #12
 8006468:	d133      	bne.n	80064d2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800646a:	4b1d      	ldr	r3, [pc, #116]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x104>)
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	f003 0303 	and.w	r3, r3, #3
 8006472:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2b02      	cmp	r3, #2
 8006478:	d002      	beq.n	8006480 <HAL_RCC_GetSysClockFreq+0xa4>
 800647a:	2b03      	cmp	r3, #3
 800647c:	d003      	beq.n	8006486 <HAL_RCC_GetSysClockFreq+0xaa>
 800647e:	e005      	b.n	800648c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006480:	4b19      	ldr	r3, [pc, #100]	; (80064e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006482:	617b      	str	r3, [r7, #20]
      break;
 8006484:	e005      	b.n	8006492 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006486:	4b18      	ldr	r3, [pc, #96]	; (80064e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006488:	617b      	str	r3, [r7, #20]
      break;
 800648a:	e002      	b.n	8006492 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	617b      	str	r3, [r7, #20]
      break;
 8006490:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006492:	4b13      	ldr	r3, [pc, #76]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x104>)
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	091b      	lsrs	r3, r3, #4
 8006498:	f003 030f 	and.w	r3, r3, #15
 800649c:	3301      	adds	r3, #1
 800649e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80064a0:	4b0f      	ldr	r3, [pc, #60]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x104>)
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	0a1b      	lsrs	r3, r3, #8
 80064a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	fb02 f203 	mul.w	r2, r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80064b8:	4b09      	ldr	r3, [pc, #36]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x104>)
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	0e5b      	lsrs	r3, r3, #25
 80064be:	f003 0303 	and.w	r3, r3, #3
 80064c2:	3301      	adds	r3, #1
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80064d2:	69bb      	ldr	r3, [r7, #24]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3724      	adds	r7, #36	; 0x24
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	40021000 	.word	0x40021000
 80064e4:	0800db14 	.word	0x0800db14
 80064e8:	00f42400 	.word	0x00f42400

080064ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064ec:	b480      	push	{r7}
 80064ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064f0:	4b03      	ldr	r3, [pc, #12]	; (8006500 <HAL_RCC_GetHCLKFreq+0x14>)
 80064f2:	681b      	ldr	r3, [r3, #0]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	20000000 	.word	0x20000000

08006504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006508:	f7ff fff0 	bl	80064ec <HAL_RCC_GetHCLKFreq>
 800650c:	4601      	mov	r1, r0
 800650e:	4b06      	ldr	r3, [pc, #24]	; (8006528 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	0a1b      	lsrs	r3, r3, #8
 8006514:	f003 0307 	and.w	r3, r3, #7
 8006518:	4a04      	ldr	r2, [pc, #16]	; (800652c <HAL_RCC_GetPCLK1Freq+0x28>)
 800651a:	5cd3      	ldrb	r3, [r2, r3]
 800651c:	f003 031f 	and.w	r3, r3, #31
 8006520:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006524:	4618      	mov	r0, r3
 8006526:	bd80      	pop	{r7, pc}
 8006528:	40021000 	.word	0x40021000
 800652c:	0800db0c 	.word	0x0800db0c

08006530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006534:	f7ff ffda 	bl	80064ec <HAL_RCC_GetHCLKFreq>
 8006538:	4601      	mov	r1, r0
 800653a:	4b06      	ldr	r3, [pc, #24]	; (8006554 <HAL_RCC_GetPCLK2Freq+0x24>)
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	0adb      	lsrs	r3, r3, #11
 8006540:	f003 0307 	and.w	r3, r3, #7
 8006544:	4a04      	ldr	r2, [pc, #16]	; (8006558 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006546:	5cd3      	ldrb	r3, [r2, r3]
 8006548:	f003 031f 	and.w	r3, r3, #31
 800654c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006550:	4618      	mov	r0, r3
 8006552:	bd80      	pop	{r7, pc}
 8006554:	40021000 	.word	0x40021000
 8006558:	0800db0c 	.word	0x0800db0c

0800655c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006564:	2300      	movs	r3, #0
 8006566:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006568:	4b27      	ldr	r3, [pc, #156]	; (8006608 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800656a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800656c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d003      	beq.n	800657c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006574:	f7ff f8fc 	bl	8005770 <HAL_PWREx_GetVoltageRange>
 8006578:	6178      	str	r0, [r7, #20]
 800657a:	e014      	b.n	80065a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800657c:	4b22      	ldr	r3, [pc, #136]	; (8006608 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800657e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006580:	4a21      	ldr	r2, [pc, #132]	; (8006608 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006586:	6593      	str	r3, [r2, #88]	; 0x58
 8006588:	4b1f      	ldr	r3, [pc, #124]	; (8006608 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800658a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800658c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006590:	60fb      	str	r3, [r7, #12]
 8006592:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006594:	f7ff f8ec 	bl	8005770 <HAL_PWREx_GetVoltageRange>
 8006598:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800659a:	4b1b      	ldr	r3, [pc, #108]	; (8006608 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800659c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800659e:	4a1a      	ldr	r2, [pc, #104]	; (8006608 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80065a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ac:	d10b      	bne.n	80065c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b80      	cmp	r3, #128	; 0x80
 80065b2:	d913      	bls.n	80065dc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2ba0      	cmp	r3, #160	; 0xa0
 80065b8:	d902      	bls.n	80065c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80065ba:	2302      	movs	r3, #2
 80065bc:	613b      	str	r3, [r7, #16]
 80065be:	e00d      	b.n	80065dc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80065c0:	2301      	movs	r3, #1
 80065c2:	613b      	str	r3, [r7, #16]
 80065c4:	e00a      	b.n	80065dc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b7f      	cmp	r3, #127	; 0x7f
 80065ca:	d902      	bls.n	80065d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80065cc:	2302      	movs	r3, #2
 80065ce:	613b      	str	r3, [r7, #16]
 80065d0:	e004      	b.n	80065dc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b70      	cmp	r3, #112	; 0x70
 80065d6:	d101      	bne.n	80065dc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80065d8:	2301      	movs	r3, #1
 80065da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80065dc:	4b0b      	ldr	r3, [pc, #44]	; (800660c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f023 020f 	bic.w	r2, r3, #15
 80065e4:	4909      	ldr	r1, [pc, #36]	; (800660c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80065ec:	4b07      	ldr	r3, [pc, #28]	; (800660c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 030f 	and.w	r3, r3, #15
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d001      	beq.n	80065fe <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e000      	b.n	8006600 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3718      	adds	r7, #24
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	40021000 	.word	0x40021000
 800660c:	40022000 	.word	0x40022000

08006610 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006610:	b480      	push	{r7}
 8006612:	b087      	sub	sp, #28
 8006614:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8006616:	2300      	movs	r3, #0
 8006618:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800661a:	4b2d      	ldr	r3, [pc, #180]	; (80066d0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	f003 0303 	and.w	r3, r3, #3
 8006622:	2b01      	cmp	r3, #1
 8006624:	d118      	bne.n	8006658 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006626:	4b2a      	ldr	r3, [pc, #168]	; (80066d0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0308 	and.w	r3, r3, #8
 800662e:	2b00      	cmp	r3, #0
 8006630:	d107      	bne.n	8006642 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006632:	4b27      	ldr	r3, [pc, #156]	; (80066d0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006638:	0a1b      	lsrs	r3, r3, #8
 800663a:	f003 030f 	and.w	r3, r3, #15
 800663e:	617b      	str	r3, [r7, #20]
 8006640:	e005      	b.n	800664e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006642:	4b23      	ldr	r3, [pc, #140]	; (80066d0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	091b      	lsrs	r3, r3, #4
 8006648:	f003 030f 	and.w	r3, r3, #15
 800664c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800664e:	4a21      	ldr	r2, [pc, #132]	; (80066d4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006656:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006658:	4b1d      	ldr	r3, [pc, #116]	; (80066d0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	f003 0303 	and.w	r3, r3, #3
 8006660:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2b02      	cmp	r3, #2
 8006666:	d002      	beq.n	800666e <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8006668:	2b03      	cmp	r3, #3
 800666a:	d003      	beq.n	8006674 <RCC_GetSysClockFreqFromPLLSource+0x64>
 800666c:	e005      	b.n	800667a <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800666e:	4b1a      	ldr	r3, [pc, #104]	; (80066d8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006670:	613b      	str	r3, [r7, #16]
    break;
 8006672:	e005      	b.n	8006680 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006674:	4b18      	ldr	r3, [pc, #96]	; (80066d8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006676:	613b      	str	r3, [r7, #16]
    break;
 8006678:	e002      	b.n	8006680 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	613b      	str	r3, [r7, #16]
    break;
 800667e:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006680:	4b13      	ldr	r3, [pc, #76]	; (80066d0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	091b      	lsrs	r3, r3, #4
 8006686:	f003 030f 	and.w	r3, r3, #15
 800668a:	3301      	adds	r3, #1
 800668c:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800668e:	4b10      	ldr	r3, [pc, #64]	; (80066d0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	0a1b      	lsrs	r3, r3, #8
 8006694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	fb02 f203 	mul.w	r2, r2, r3
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a4:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80066a6:	4b0a      	ldr	r3, [pc, #40]	; (80066d0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	0e5b      	lsrs	r3, r3, #25
 80066ac:	f003 0303 	and.w	r3, r3, #3
 80066b0:	3301      	adds	r3, #1
 80066b2:	005b      	lsls	r3, r3, #1
 80066b4:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80066be:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80066c0:	683b      	ldr	r3, [r7, #0]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	371c      	adds	r7, #28
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	40021000 	.word	0x40021000
 80066d4:	0800db14 	.word	0x0800db14
 80066d8:	00f42400 	.word	0x00f42400

080066dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b086      	sub	sp, #24
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066e4:	2300      	movs	r3, #0
 80066e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066e8:	2300      	movs	r3, #0
 80066ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d03d      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066fc:	2b40      	cmp	r3, #64	; 0x40
 80066fe:	d00b      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8006700:	2b40      	cmp	r3, #64	; 0x40
 8006702:	d804      	bhi.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00e      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8006708:	2b20      	cmp	r3, #32
 800670a:	d015      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800670c:	e01d      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800670e:	2b60      	cmp	r3, #96	; 0x60
 8006710:	d01e      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006712:	2b80      	cmp	r3, #128	; 0x80
 8006714:	d01c      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006716:	e018      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006718:	4b86      	ldr	r3, [pc, #536]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	4a85      	ldr	r2, [pc, #532]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800671e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006722:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006724:	e015      	b.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	3304      	adds	r3, #4
 800672a:	2100      	movs	r1, #0
 800672c:	4618      	mov	r0, r3
 800672e:	f000 fb5d 	bl	8006dec <RCCEx_PLLSAI1_Config>
 8006732:	4603      	mov	r3, r0
 8006734:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006736:	e00c      	b.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	3320      	adds	r3, #32
 800673c:	2100      	movs	r1, #0
 800673e:	4618      	mov	r0, r3
 8006740:	f000 fc44 	bl	8006fcc <RCCEx_PLLSAI2_Config>
 8006744:	4603      	mov	r3, r0
 8006746:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006748:	e003      	b.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	74fb      	strb	r3, [r7, #19]
      break;
 800674e:	e000      	b.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8006750:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006752:	7cfb      	ldrb	r3, [r7, #19]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10b      	bne.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006758:	4b76      	ldr	r3, [pc, #472]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800675a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800675e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006766:	4973      	ldr	r1, [pc, #460]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006768:	4313      	orrs	r3, r2
 800676a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800676e:	e001      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006770:	7cfb      	ldrb	r3, [r7, #19]
 8006772:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d042      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006788:	d00f      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xce>
 800678a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800678e:	d805      	bhi.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8006790:	2b00      	cmp	r3, #0
 8006792:	d011      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8006794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006798:	d017      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xee>
 800679a:	e01f      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x100>
 800679c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067a0:	d01f      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80067a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067a6:	d01c      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80067a8:	e018      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80067aa:	4b62      	ldr	r3, [pc, #392]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	4a61      	ldr	r2, [pc, #388]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80067b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067b4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80067b6:	e015      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	3304      	adds	r3, #4
 80067bc:	2100      	movs	r1, #0
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fb14 	bl	8006dec <RCCEx_PLLSAI1_Config>
 80067c4:	4603      	mov	r3, r0
 80067c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80067c8:	e00c      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	3320      	adds	r3, #32
 80067ce:	2100      	movs	r1, #0
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 fbfb 	bl	8006fcc <RCCEx_PLLSAI2_Config>
 80067d6:	4603      	mov	r3, r0
 80067d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80067da:	e003      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	74fb      	strb	r3, [r7, #19]
      break;
 80067e0:	e000      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80067e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067e4:	7cfb      	ldrb	r3, [r7, #19]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10b      	bne.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80067ea:	4b52      	ldr	r3, [pc, #328]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80067ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f8:	494e      	ldr	r1, [pc, #312]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006800:	e001      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006802:	7cfb      	ldrb	r3, [r7, #19]
 8006804:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 809f 	beq.w	8006952 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006814:	2300      	movs	r3, #0
 8006816:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006818:	4b46      	ldr	r3, [pc, #280]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800681a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800681c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006824:	2301      	movs	r3, #1
 8006826:	e000      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006828:	2300      	movs	r3, #0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00d      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800682e:	4b41      	ldr	r3, [pc, #260]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006832:	4a40      	ldr	r2, [pc, #256]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006838:	6593      	str	r3, [r2, #88]	; 0x58
 800683a:	4b3e      	ldr	r3, [pc, #248]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800683c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800683e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006842:	60bb      	str	r3, [r7, #8]
 8006844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006846:	2301      	movs	r3, #1
 8006848:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800684a:	4b3b      	ldr	r3, [pc, #236]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a3a      	ldr	r2, [pc, #232]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006854:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006856:	f7fb fe79 	bl	800254c <HAL_GetTick>
 800685a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800685c:	e009      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800685e:	f7fb fe75 	bl	800254c <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	2b02      	cmp	r3, #2
 800686a:	d902      	bls.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	74fb      	strb	r3, [r7, #19]
        break;
 8006870:	e005      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006872:	4b31      	ldr	r3, [pc, #196]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0ef      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 800687e:	7cfb      	ldrb	r3, [r7, #19]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d15b      	bne.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006884:	4b2b      	ldr	r3, [pc, #172]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800688a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800688e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d01f      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d019      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80068a2:	4b24      	ldr	r3, [pc, #144]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80068a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068ae:	4b21      	ldr	r3, [pc, #132]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80068b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068b4:	4a1f      	ldr	r2, [pc, #124]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80068b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068be:	4b1d      	ldr	r3, [pc, #116]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80068c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c4:	4a1b      	ldr	r2, [pc, #108]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80068c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80068ce:	4a19      	ldr	r2, [pc, #100]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d016      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e0:	f7fb fe34 	bl	800254c <HAL_GetTick>
 80068e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068e6:	e00b      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068e8:	f7fb fe30 	bl	800254c <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d902      	bls.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	74fb      	strb	r3, [r7, #19]
            break;
 80068fe:	e006      	b.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006900:	4b0c      	ldr	r3, [pc, #48]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006906:	f003 0302 	and.w	r3, r3, #2
 800690a:	2b00      	cmp	r3, #0
 800690c:	d0ec      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800690e:	7cfb      	ldrb	r3, [r7, #19]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10c      	bne.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006914:	4b07      	ldr	r3, [pc, #28]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800691a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006924:	4903      	ldr	r1, [pc, #12]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006926:	4313      	orrs	r3, r2
 8006928:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800692c:	e008      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800692e:	7cfb      	ldrb	r3, [r7, #19]
 8006930:	74bb      	strb	r3, [r7, #18]
 8006932:	e005      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8006934:	40021000 	.word	0x40021000
 8006938:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800693c:	7cfb      	ldrb	r3, [r7, #19]
 800693e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006940:	7c7b      	ldrb	r3, [r7, #17]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d105      	bne.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006946:	4ba0      	ldr	r3, [pc, #640]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800694a:	4a9f      	ldr	r2, [pc, #636]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800694c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006950:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00a      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800695e:	4b9a      	ldr	r3, [pc, #616]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006964:	f023 0203 	bic.w	r2, r3, #3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800696c:	4996      	ldr	r1, [pc, #600]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800696e:	4313      	orrs	r3, r2
 8006970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00a      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006980:	4b91      	ldr	r3, [pc, #580]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006986:	f023 020c 	bic.w	r2, r3, #12
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698e:	498e      	ldr	r1, [pc, #568]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006990:	4313      	orrs	r3, r2
 8006992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0304 	and.w	r3, r3, #4
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00a      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80069a2:	4b89      	ldr	r3, [pc, #548]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b0:	4985      	ldr	r1, [pc, #532]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069b2:	4313      	orrs	r3, r2
 80069b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0308 	and.w	r3, r3, #8
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00a      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80069c4:	4b80      	ldr	r3, [pc, #512]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069d2:	497d      	ldr	r1, [pc, #500]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0310 	and.w	r3, r3, #16
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00a      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80069e6:	4b78      	ldr	r3, [pc, #480]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069f4:	4974      	ldr	r1, [pc, #464]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0320 	and.w	r3, r3, #32
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00a      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a08:	4b6f      	ldr	r3, [pc, #444]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a16:	496c      	ldr	r1, [pc, #432]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00a      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a2a:	4b67      	ldr	r3, [pc, #412]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a38:	4963      	ldr	r1, [pc, #396]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00a      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a4c:	4b5e      	ldr	r3, [pc, #376]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a5a:	495b      	ldr	r1, [pc, #364]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00a      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a6e:	4b56      	ldr	r3, [pc, #344]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7c:	4952      	ldr	r1, [pc, #328]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00a      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a90:	4b4d      	ldr	r3, [pc, #308]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a9e:	494a      	ldr	r1, [pc, #296]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00a      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ab2:	4b45      	ldr	r3, [pc, #276]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ac0:	4941      	ldr	r1, [pc, #260]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00a      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ad4:	4b3c      	ldr	r3, [pc, #240]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ad6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ada:	f023 0203 	bic.w	r2, r3, #3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ae2:	4939      	ldr	r1, [pc, #228]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d028      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006af6:	4b34      	ldr	r3, [pc, #208]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006afc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b04:	4930      	ldr	r1, [pc, #192]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b14:	d106      	bne.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b16:	4b2c      	ldr	r3, [pc, #176]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	4a2b      	ldr	r2, [pc, #172]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b20:	60d3      	str	r3, [r2, #12]
 8006b22:	e011      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b2c:	d10c      	bne.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	3304      	adds	r3, #4
 8006b32:	2101      	movs	r1, #1
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 f959 	bl	8006dec <RCCEx_PLLSAI1_Config>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006b3e:	7cfb      	ldrb	r3, [r7, #19]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8006b44:	7cfb      	ldrb	r3, [r7, #19]
 8006b46:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d04d      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b5c:	d108      	bne.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006b5e:	4b1a      	ldr	r3, [pc, #104]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b64:	4a18      	ldr	r2, [pc, #96]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b6a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006b6e:	e012      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006b70:	4b15      	ldr	r3, [pc, #84]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b76:	4a14      	ldr	r2, [pc, #80]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b7c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006b80:	4b11      	ldr	r3, [pc, #68]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b8e:	490e      	ldr	r1, [pc, #56]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b9e:	d106      	bne.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ba0:	4b09      	ldr	r3, [pc, #36]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	4a08      	ldr	r2, [pc, #32]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ba6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006baa:	60d3      	str	r3, [r2, #12]
 8006bac:	e020      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bb6:	d109      	bne.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006bb8:	4b03      	ldr	r3, [pc, #12]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	4a02      	ldr	r2, [pc, #8]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bc2:	60d3      	str	r3, [r2, #12]
 8006bc4:	e014      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006bc6:	bf00      	nop
 8006bc8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bd4:	d10c      	bne.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	3304      	adds	r3, #4
 8006bda:	2101      	movs	r1, #1
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f000 f905 	bl	8006dec <RCCEx_PLLSAI1_Config>
 8006be2:	4603      	mov	r3, r0
 8006be4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006be6:	7cfb      	ldrb	r3, [r7, #19]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006bec:	7cfb      	ldrb	r3, [r7, #19]
 8006bee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d028      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006bfc:	4b7a      	ldr	r3, [pc, #488]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c0a:	4977      	ldr	r1, [pc, #476]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c1a:	d106      	bne.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c1c:	4b72      	ldr	r3, [pc, #456]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	4a71      	ldr	r2, [pc, #452]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006c22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c26:	60d3      	str	r3, [r2, #12]
 8006c28:	e011      	b.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c32:	d10c      	bne.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	3304      	adds	r3, #4
 8006c38:	2101      	movs	r1, #1
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 f8d6 	bl	8006dec <RCCEx_PLLSAI1_Config>
 8006c40:	4603      	mov	r3, r0
 8006c42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c44:	7cfb      	ldrb	r3, [r7, #19]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d001      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8006c4a:	7cfb      	ldrb	r3, [r7, #19]
 8006c4c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d01e      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c5a:	4b63      	ldr	r3, [pc, #396]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c60:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c6a:	495f      	ldr	r1, [pc, #380]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c7c:	d10c      	bne.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	3304      	adds	r3, #4
 8006c82:	2102      	movs	r1, #2
 8006c84:	4618      	mov	r0, r3
 8006c86:	f000 f8b1 	bl	8006dec <RCCEx_PLLSAI1_Config>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c8e:	7cfb      	ldrb	r3, [r7, #19]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8006c94:	7cfb      	ldrb	r3, [r7, #19]
 8006c96:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00b      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006ca4:	4b50      	ldr	r3, [pc, #320]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006ca6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006caa:	f023 0204 	bic.w	r2, r3, #4
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cb4:	494c      	ldr	r1, [pc, #304]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00b      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006cc8:	4b47      	ldr	r3, [pc, #284]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006cca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cce:	f023 0218 	bic.w	r2, r3, #24
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd8:	4943      	ldr	r1, [pc, #268]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d035      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006cec:	4b3e      	ldr	r3, [pc, #248]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a3d      	ldr	r2, [pc, #244]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006cf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cf8:	f7fb fc28 	bl	800254c <HAL_GetTick>
 8006cfc:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006cfe:	e009      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006d00:	f7fb fc24 	bl	800254c <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d902      	bls.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x638>
      {
        ret = HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	74fb      	strb	r3, [r7, #19]
        break;
 8006d12:	e005      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x644>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d14:	4b34      	ldr	r3, [pc, #208]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1ef      	bne.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x624>
      }
    }

    if(ret == HAL_OK)
 8006d20:	7cfb      	ldrb	r3, [r7, #19]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d113      	bne.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x672>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8006d26:	4b30      	ldr	r3, [pc, #192]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006d28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d36:	492c      	ldr	r1, [pc, #176]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	3320      	adds	r3, #32
 8006d42:	2102      	movs	r1, #2
 8006d44:	4618      	mov	r0, r3
 8006d46:	f000 f941 	bl	8006fcc <RCCEx_PLLSAI2_Config>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8006d4e:	7cfb      	ldrb	r3, [r7, #19]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d001      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* set overall return value */
      status = ret;
 8006d54:	7cfb      	ldrb	r3, [r7, #19]
 8006d56:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d01e      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8006d64:	4b20      	ldr	r3, [pc, #128]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006d66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d74:	491c      	ldr	r1, [pc, #112]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d86:	d10c      	bne.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	3320      	adds	r3, #32
 8006d8c:	2101      	movs	r1, #1
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f000 f91c 	bl	8006fcc <RCCEx_PLLSAI2_Config>
 8006d94:	4603      	mov	r3, r0
 8006d96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006d98:	7cfb      	ldrb	r3, [r7, #19]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d001      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      {
        /* set overall return value */
        status = ret;
 8006d9e:	7cfb      	ldrb	r3, [r7, #19]
 8006da0:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d017      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006dae:	4b0e      	ldr	r3, [pc, #56]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006db0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006db4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dbe:	490a      	ldr	r1, [pc, #40]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dd0:	d105      	bne.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x702>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006dd2:	4b05      	ldr	r3, [pc, #20]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	4a04      	ldr	r2, [pc, #16]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006dd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ddc:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006dde:	7cbb      	ldrb	r3, [r7, #18]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3718      	adds	r7, #24
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	40021000 	.word	0x40021000

08006dec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006df6:	2300      	movs	r3, #0
 8006df8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006dfa:	4b70      	ldr	r3, [pc, #448]	; (8006fbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	f003 0303 	and.w	r3, r3, #3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00e      	beq.n	8006e24 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006e06:	4b6d      	ldr	r3, [pc, #436]	; (8006fbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	f003 0203 	and.w	r2, r3, #3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d103      	bne.n	8006e1e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
       ||
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d13f      	bne.n	8006e9e <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	73fb      	strb	r3, [r7, #15]
 8006e22:	e03c      	b.n	8006e9e <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d00c      	beq.n	8006e46 <RCCEx_PLLSAI1_Config+0x5a>
 8006e2c:	2b03      	cmp	r3, #3
 8006e2e:	d013      	beq.n	8006e58 <RCCEx_PLLSAI1_Config+0x6c>
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d120      	bne.n	8006e76 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006e34:	4b61      	ldr	r3, [pc, #388]	; (8006fbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d11d      	bne.n	8006e7c <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e44:	e01a      	b.n	8006e7c <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006e46:	4b5d      	ldr	r3, [pc, #372]	; (8006fbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d116      	bne.n	8006e80 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e56:	e013      	b.n	8006e80 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006e58:	4b58      	ldr	r3, [pc, #352]	; (8006fbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10f      	bne.n	8006e84 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006e64:	4b55      	ldr	r3, [pc, #340]	; (8006fbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d109      	bne.n	8006e84 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e74:	e006      	b.n	8006e84 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	73fb      	strb	r3, [r7, #15]
      break;
 8006e7a:	e004      	b.n	8006e86 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8006e7c:	bf00      	nop
 8006e7e:	e002      	b.n	8006e86 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8006e80:	bf00      	nop
 8006e82:	e000      	b.n	8006e86 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8006e84:	bf00      	nop
    }

    if(status == HAL_OK)
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d108      	bne.n	8006e9e <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006e8c:	4b4b      	ldr	r3, [pc, #300]	; (8006fbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f023 0203 	bic.w	r2, r3, #3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4948      	ldr	r1, [pc, #288]	; (8006fbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f040 8086 	bne.w	8006fb2 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006ea6:	4b45      	ldr	r3, [pc, #276]	; (8006fbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a44      	ldr	r2, [pc, #272]	; (8006fbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8006eac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006eb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eb2:	f7fb fb4b 	bl	800254c <HAL_GetTick>
 8006eb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006eb8:	e009      	b.n	8006ece <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006eba:	f7fb fb47 	bl	800254c <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d902      	bls.n	8006ece <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	73fb      	strb	r3, [r7, #15]
        break;
 8006ecc:	e005      	b.n	8006eda <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006ece:	4b3b      	ldr	r3, [pc, #236]	; (8006fbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1ef      	bne.n	8006eba <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8006eda:	7bfb      	ldrb	r3, [r7, #15]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d168      	bne.n	8006fb2 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d113      	bne.n	8006f0e <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ee6:	4b35      	ldr	r3, [pc, #212]	; (8006fbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8006ee8:	691a      	ldr	r2, [r3, #16]
 8006eea:	4b35      	ldr	r3, [pc, #212]	; (8006fc0 <RCCEx_PLLSAI1_Config+0x1d4>)
 8006eec:	4013      	ands	r3, r2
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	6892      	ldr	r2, [r2, #8]
 8006ef2:	0211      	lsls	r1, r2, #8
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	68d2      	ldr	r2, [r2, #12]
 8006ef8:	06d2      	lsls	r2, r2, #27
 8006efa:	4311      	orrs	r1, r2
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	6852      	ldr	r2, [r2, #4]
 8006f00:	3a01      	subs	r2, #1
 8006f02:	0112      	lsls	r2, r2, #4
 8006f04:	430a      	orrs	r2, r1
 8006f06:	492d      	ldr	r1, [pc, #180]	; (8006fbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	610b      	str	r3, [r1, #16]
 8006f0c:	e02d      	b.n	8006f6a <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d115      	bne.n	8006f40 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006f14:	4b29      	ldr	r3, [pc, #164]	; (8006fbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8006f16:	691a      	ldr	r2, [r3, #16]
 8006f18:	4b2a      	ldr	r3, [pc, #168]	; (8006fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	6892      	ldr	r2, [r2, #8]
 8006f20:	0211      	lsls	r1, r2, #8
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	6912      	ldr	r2, [r2, #16]
 8006f26:	0852      	lsrs	r2, r2, #1
 8006f28:	3a01      	subs	r2, #1
 8006f2a:	0552      	lsls	r2, r2, #21
 8006f2c:	4311      	orrs	r1, r2
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	6852      	ldr	r2, [r2, #4]
 8006f32:	3a01      	subs	r2, #1
 8006f34:	0112      	lsls	r2, r2, #4
 8006f36:	430a      	orrs	r2, r1
 8006f38:	4920      	ldr	r1, [pc, #128]	; (8006fbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	610b      	str	r3, [r1, #16]
 8006f3e:	e014      	b.n	8006f6a <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006f40:	4b1e      	ldr	r3, [pc, #120]	; (8006fbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8006f42:	691a      	ldr	r2, [r3, #16]
 8006f44:	4b20      	ldr	r3, [pc, #128]	; (8006fc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006f46:	4013      	ands	r3, r2
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	6892      	ldr	r2, [r2, #8]
 8006f4c:	0211      	lsls	r1, r2, #8
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	6952      	ldr	r2, [r2, #20]
 8006f52:	0852      	lsrs	r2, r2, #1
 8006f54:	3a01      	subs	r2, #1
 8006f56:	0652      	lsls	r2, r2, #25
 8006f58:	4311      	orrs	r1, r2
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	6852      	ldr	r2, [r2, #4]
 8006f5e:	3a01      	subs	r2, #1
 8006f60:	0112      	lsls	r2, r2, #4
 8006f62:	430a      	orrs	r2, r1
 8006f64:	4915      	ldr	r1, [pc, #84]	; (8006fbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006f6a:	4b14      	ldr	r3, [pc, #80]	; (8006fbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a13      	ldr	r2, [pc, #76]	; (8006fbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8006f70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f74:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f76:	f7fb fae9 	bl	800254c <HAL_GetTick>
 8006f7a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006f7c:	e009      	b.n	8006f92 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006f7e:	f7fb fae5 	bl	800254c <HAL_GetTick>
 8006f82:	4602      	mov	r2, r0
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d902      	bls.n	8006f92 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	73fb      	strb	r3, [r7, #15]
          break;
 8006f90:	e005      	b.n	8006f9e <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006f92:	4b0a      	ldr	r3, [pc, #40]	; (8006fbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d0ef      	beq.n	8006f7e <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8006f9e:	7bfb      	ldrb	r3, [r7, #15]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d106      	bne.n	8006fb2 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006fa4:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8006fa6:	691a      	ldr	r2, [r3, #16]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	4903      	ldr	r1, [pc, #12]	; (8006fbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	40021000 	.word	0x40021000
 8006fc0:	07ff800f 	.word	0x07ff800f
 8006fc4:	ff9f800f 	.word	0xff9f800f
 8006fc8:	f9ff800f 	.word	0xf9ff800f

08006fcc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006fda:	4b70      	ldr	r3, [pc, #448]	; (800719c <RCCEx_PLLSAI2_Config+0x1d0>)
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	f003 0303 	and.w	r3, r3, #3
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00e      	beq.n	8007004 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006fe6:	4b6d      	ldr	r3, [pc, #436]	; (800719c <RCCEx_PLLSAI2_Config+0x1d0>)
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	f003 0203 	and.w	r2, r3, #3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d103      	bne.n	8006ffe <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
       ||
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d13f      	bne.n	800707e <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	73fb      	strb	r3, [r7, #15]
 8007002:	e03c      	b.n	800707e <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b02      	cmp	r3, #2
 800700a:	d00c      	beq.n	8007026 <RCCEx_PLLSAI2_Config+0x5a>
 800700c:	2b03      	cmp	r3, #3
 800700e:	d013      	beq.n	8007038 <RCCEx_PLLSAI2_Config+0x6c>
 8007010:	2b01      	cmp	r3, #1
 8007012:	d120      	bne.n	8007056 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007014:	4b61      	ldr	r3, [pc, #388]	; (800719c <RCCEx_PLLSAI2_Config+0x1d0>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d11d      	bne.n	800705c <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007024:	e01a      	b.n	800705c <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007026:	4b5d      	ldr	r3, [pc, #372]	; (800719c <RCCEx_PLLSAI2_Config+0x1d0>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800702e:	2b00      	cmp	r3, #0
 8007030:	d116      	bne.n	8007060 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007036:	e013      	b.n	8007060 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007038:	4b58      	ldr	r3, [pc, #352]	; (800719c <RCCEx_PLLSAI2_Config+0x1d0>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10f      	bne.n	8007064 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007044:	4b55      	ldr	r3, [pc, #340]	; (800719c <RCCEx_PLLSAI2_Config+0x1d0>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d109      	bne.n	8007064 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007054:	e006      	b.n	8007064 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	73fb      	strb	r3, [r7, #15]
      break;
 800705a:	e004      	b.n	8007066 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 800705c:	bf00      	nop
 800705e:	e002      	b.n	8007066 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8007060:	bf00      	nop
 8007062:	e000      	b.n	8007066 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8007064:	bf00      	nop
    }

    if(status == HAL_OK)
 8007066:	7bfb      	ldrb	r3, [r7, #15]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d108      	bne.n	800707e <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800706c:	4b4b      	ldr	r3, [pc, #300]	; (800719c <RCCEx_PLLSAI2_Config+0x1d0>)
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	f023 0203 	bic.w	r2, r3, #3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4948      	ldr	r1, [pc, #288]	; (800719c <RCCEx_PLLSAI2_Config+0x1d0>)
 800707a:	4313      	orrs	r3, r2
 800707c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800707e:	7bfb      	ldrb	r3, [r7, #15]
 8007080:	2b00      	cmp	r3, #0
 8007082:	f040 8086 	bne.w	8007192 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007086:	4b45      	ldr	r3, [pc, #276]	; (800719c <RCCEx_PLLSAI2_Config+0x1d0>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a44      	ldr	r2, [pc, #272]	; (800719c <RCCEx_PLLSAI2_Config+0x1d0>)
 800708c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007090:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007092:	f7fb fa5b 	bl	800254c <HAL_GetTick>
 8007096:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007098:	e009      	b.n	80070ae <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800709a:	f7fb fa57 	bl	800254c <HAL_GetTick>
 800709e:	4602      	mov	r2, r0
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d902      	bls.n	80070ae <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	73fb      	strb	r3, [r7, #15]
        break;
 80070ac:	e005      	b.n	80070ba <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80070ae:	4b3b      	ldr	r3, [pc, #236]	; (800719c <RCCEx_PLLSAI2_Config+0x1d0>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1ef      	bne.n	800709a <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80070ba:	7bfb      	ldrb	r3, [r7, #15]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d168      	bne.n	8007192 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d113      	bne.n	80070ee <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80070c6:	4b35      	ldr	r3, [pc, #212]	; (800719c <RCCEx_PLLSAI2_Config+0x1d0>)
 80070c8:	695a      	ldr	r2, [r3, #20]
 80070ca:	4b35      	ldr	r3, [pc, #212]	; (80071a0 <RCCEx_PLLSAI2_Config+0x1d4>)
 80070cc:	4013      	ands	r3, r2
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	6892      	ldr	r2, [r2, #8]
 80070d2:	0211      	lsls	r1, r2, #8
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	68d2      	ldr	r2, [r2, #12]
 80070d8:	06d2      	lsls	r2, r2, #27
 80070da:	4311      	orrs	r1, r2
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	6852      	ldr	r2, [r2, #4]
 80070e0:	3a01      	subs	r2, #1
 80070e2:	0112      	lsls	r2, r2, #4
 80070e4:	430a      	orrs	r2, r1
 80070e6:	492d      	ldr	r1, [pc, #180]	; (800719c <RCCEx_PLLSAI2_Config+0x1d0>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	614b      	str	r3, [r1, #20]
 80070ec:	e02d      	b.n	800714a <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d115      	bne.n	8007120 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80070f4:	4b29      	ldr	r3, [pc, #164]	; (800719c <RCCEx_PLLSAI2_Config+0x1d0>)
 80070f6:	695a      	ldr	r2, [r3, #20]
 80070f8:	4b2a      	ldr	r3, [pc, #168]	; (80071a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80070fa:	4013      	ands	r3, r2
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	6892      	ldr	r2, [r2, #8]
 8007100:	0211      	lsls	r1, r2, #8
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	6912      	ldr	r2, [r2, #16]
 8007106:	0852      	lsrs	r2, r2, #1
 8007108:	3a01      	subs	r2, #1
 800710a:	0552      	lsls	r2, r2, #21
 800710c:	4311      	orrs	r1, r2
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	6852      	ldr	r2, [r2, #4]
 8007112:	3a01      	subs	r2, #1
 8007114:	0112      	lsls	r2, r2, #4
 8007116:	430a      	orrs	r2, r1
 8007118:	4920      	ldr	r1, [pc, #128]	; (800719c <RCCEx_PLLSAI2_Config+0x1d0>)
 800711a:	4313      	orrs	r3, r2
 800711c:	614b      	str	r3, [r1, #20]
 800711e:	e014      	b.n	800714a <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007120:	4b1e      	ldr	r3, [pc, #120]	; (800719c <RCCEx_PLLSAI2_Config+0x1d0>)
 8007122:	695a      	ldr	r2, [r3, #20]
 8007124:	4b20      	ldr	r3, [pc, #128]	; (80071a8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8007126:	4013      	ands	r3, r2
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	6892      	ldr	r2, [r2, #8]
 800712c:	0211      	lsls	r1, r2, #8
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	6952      	ldr	r2, [r2, #20]
 8007132:	0852      	lsrs	r2, r2, #1
 8007134:	3a01      	subs	r2, #1
 8007136:	0652      	lsls	r2, r2, #25
 8007138:	4311      	orrs	r1, r2
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	6852      	ldr	r2, [r2, #4]
 800713e:	3a01      	subs	r2, #1
 8007140:	0112      	lsls	r2, r2, #4
 8007142:	430a      	orrs	r2, r1
 8007144:	4915      	ldr	r1, [pc, #84]	; (800719c <RCCEx_PLLSAI2_Config+0x1d0>)
 8007146:	4313      	orrs	r3, r2
 8007148:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800714a:	4b14      	ldr	r3, [pc, #80]	; (800719c <RCCEx_PLLSAI2_Config+0x1d0>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a13      	ldr	r2, [pc, #76]	; (800719c <RCCEx_PLLSAI2_Config+0x1d0>)
 8007150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007154:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007156:	f7fb f9f9 	bl	800254c <HAL_GetTick>
 800715a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800715c:	e009      	b.n	8007172 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800715e:	f7fb f9f5 	bl	800254c <HAL_GetTick>
 8007162:	4602      	mov	r2, r0
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	2b02      	cmp	r3, #2
 800716a:	d902      	bls.n	8007172 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	73fb      	strb	r3, [r7, #15]
          break;
 8007170:	e005      	b.n	800717e <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007172:	4b0a      	ldr	r3, [pc, #40]	; (800719c <RCCEx_PLLSAI2_Config+0x1d0>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d0ef      	beq.n	800715e <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800717e:	7bfb      	ldrb	r3, [r7, #15]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d106      	bne.n	8007192 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007184:	4b05      	ldr	r3, [pc, #20]	; (800719c <RCCEx_PLLSAI2_Config+0x1d0>)
 8007186:	695a      	ldr	r2, [r3, #20]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	4903      	ldr	r1, [pc, #12]	; (800719c <RCCEx_PLLSAI2_Config+0x1d0>)
 800718e:	4313      	orrs	r3, r2
 8007190:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007192:	7bfb      	ldrb	r3, [r7, #15]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	40021000 	.word	0x40021000
 80071a0:	07ff800f 	.word	0x07ff800f
 80071a4:	ff9f800f 	.word	0xff9f800f
 80071a8:	f9ff800f 	.word	0xf9ff800f

080071ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e042      	b.n	8007244 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d106      	bne.n	80071d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f7fb f805 	bl	80021e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2224      	movs	r2, #36	; 0x24
 80071da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 0201 	bic.w	r2, r2, #1
 80071ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f8c4 	bl	800737c <UART_SetConfig>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d101      	bne.n	80071fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e022      	b.n	8007244 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007202:	2b00      	cmp	r3, #0
 8007204:	d002      	beq.n	800720c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fb8a 	bl	8007920 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800721a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689a      	ldr	r2, [r3, #8]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800722a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f042 0201 	orr.w	r2, r2, #1
 800723a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fc11 	bl	8007a64 <UART_CheckIdleState>
 8007242:	4603      	mov	r3, r0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b08a      	sub	sp, #40	; 0x28
 8007250:	af02      	add	r7, sp, #8
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	603b      	str	r3, [r7, #0]
 8007258:	4613      	mov	r3, r2
 800725a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007262:	2b20      	cmp	r3, #32
 8007264:	f040 8084 	bne.w	8007370 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d002      	beq.n	8007274 <HAL_UART_Transmit+0x28>
 800726e:	88fb      	ldrh	r3, [r7, #6]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d101      	bne.n	8007278 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e07c      	b.n	8007372 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800727e:	2b01      	cmp	r3, #1
 8007280:	d101      	bne.n	8007286 <HAL_UART_Transmit+0x3a>
 8007282:	2302      	movs	r3, #2
 8007284:	e075      	b.n	8007372 <HAL_UART_Transmit+0x126>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2221      	movs	r2, #33	; 0x21
 800729a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800729e:	f7fb f955 	bl	800254c <HAL_GetTick>
 80072a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	88fa      	ldrh	r2, [r7, #6]
 80072a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	88fa      	ldrh	r2, [r7, #6]
 80072b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072bc:	d108      	bne.n	80072d0 <HAL_UART_Transmit+0x84>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d104      	bne.n	80072d0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	61bb      	str	r3, [r7, #24]
 80072ce:	e003      	b.n	80072d8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072d4:	2300      	movs	r3, #0
 80072d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80072e0:	e02d      	b.n	800733e <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	2200      	movs	r2, #0
 80072ea:	2180      	movs	r1, #128	; 0x80
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f000 fc01 	bl	8007af4 <UART_WaitOnFlagUntilTimeout>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d001      	beq.n	80072fc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80072f8:	2303      	movs	r3, #3
 80072fa:	e03a      	b.n	8007372 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10b      	bne.n	800731a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	881a      	ldrh	r2, [r3, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800730e:	b292      	uxth	r2, r2
 8007310:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	3302      	adds	r3, #2
 8007316:	61bb      	str	r3, [r7, #24]
 8007318:	e008      	b.n	800732c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	781a      	ldrb	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	b292      	uxth	r2, r2
 8007324:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	3301      	adds	r3, #1
 800732a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007332:	b29b      	uxth	r3, r3
 8007334:	3b01      	subs	r3, #1
 8007336:	b29a      	uxth	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007344:	b29b      	uxth	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1cb      	bne.n	80072e2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	2200      	movs	r2, #0
 8007352:	2140      	movs	r1, #64	; 0x40
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f000 fbcd 	bl	8007af4 <UART_WaitOnFlagUntilTimeout>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e006      	b.n	8007372 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2220      	movs	r2, #32
 8007368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800736c:	2300      	movs	r3, #0
 800736e:	e000      	b.n	8007372 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007370:	2302      	movs	r3, #2
  }
}
 8007372:	4618      	mov	r0, r3
 8007374:	3720      	adds	r7, #32
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
	...

0800737c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800737c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007380:	b088      	sub	sp, #32
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007386:	2300      	movs	r3, #0
 8007388:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	689a      	ldr	r2, [r3, #8]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	431a      	orrs	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	431a      	orrs	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	4313      	orrs	r3, r2
 80073a0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073a6:	69fa      	ldr	r2, [r7, #28]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	4bb1      	ldr	r3, [pc, #708]	; (8007678 <UART_SetConfig+0x2fc>)
 80073b4:	4013      	ands	r3, r2
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	6812      	ldr	r2, [r2, #0]
 80073ba:	69f9      	ldr	r1, [r7, #28]
 80073bc:	430b      	orrs	r3, r1
 80073be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	68da      	ldr	r2, [r3, #12]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	430a      	orrs	r2, r1
 80073d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4aa6      	ldr	r2, [pc, #664]	; (800767c <UART_SetConfig+0x300>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d004      	beq.n	80073f0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	69fa      	ldr	r2, [r7, #28]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80073fa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	6812      	ldr	r2, [r2, #0]
 8007402:	69f9      	ldr	r1, [r7, #28]
 8007404:	430b      	orrs	r3, r1
 8007406:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740e:	f023 010f 	bic.w	r1, r3, #15
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	430a      	orrs	r2, r1
 800741c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a97      	ldr	r2, [pc, #604]	; (8007680 <UART_SetConfig+0x304>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d121      	bne.n	800746c <UART_SetConfig+0xf0>
 8007428:	4b96      	ldr	r3, [pc, #600]	; (8007684 <UART_SetConfig+0x308>)
 800742a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800742e:	f003 0303 	and.w	r3, r3, #3
 8007432:	2b03      	cmp	r3, #3
 8007434:	d816      	bhi.n	8007464 <UART_SetConfig+0xe8>
 8007436:	a201      	add	r2, pc, #4	; (adr r2, 800743c <UART_SetConfig+0xc0>)
 8007438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743c:	0800744d 	.word	0x0800744d
 8007440:	08007459 	.word	0x08007459
 8007444:	08007453 	.word	0x08007453
 8007448:	0800745f 	.word	0x0800745f
 800744c:	2301      	movs	r3, #1
 800744e:	76fb      	strb	r3, [r7, #27]
 8007450:	e0e8      	b.n	8007624 <UART_SetConfig+0x2a8>
 8007452:	2302      	movs	r3, #2
 8007454:	76fb      	strb	r3, [r7, #27]
 8007456:	e0e5      	b.n	8007624 <UART_SetConfig+0x2a8>
 8007458:	2304      	movs	r3, #4
 800745a:	76fb      	strb	r3, [r7, #27]
 800745c:	e0e2      	b.n	8007624 <UART_SetConfig+0x2a8>
 800745e:	2308      	movs	r3, #8
 8007460:	76fb      	strb	r3, [r7, #27]
 8007462:	e0df      	b.n	8007624 <UART_SetConfig+0x2a8>
 8007464:	2310      	movs	r3, #16
 8007466:	76fb      	strb	r3, [r7, #27]
 8007468:	bf00      	nop
 800746a:	e0db      	b.n	8007624 <UART_SetConfig+0x2a8>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a85      	ldr	r2, [pc, #532]	; (8007688 <UART_SetConfig+0x30c>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d134      	bne.n	80074e0 <UART_SetConfig+0x164>
 8007476:	4b83      	ldr	r3, [pc, #524]	; (8007684 <UART_SetConfig+0x308>)
 8007478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800747c:	f003 030c 	and.w	r3, r3, #12
 8007480:	2b0c      	cmp	r3, #12
 8007482:	d829      	bhi.n	80074d8 <UART_SetConfig+0x15c>
 8007484:	a201      	add	r2, pc, #4	; (adr r2, 800748c <UART_SetConfig+0x110>)
 8007486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748a:	bf00      	nop
 800748c:	080074c1 	.word	0x080074c1
 8007490:	080074d9 	.word	0x080074d9
 8007494:	080074d9 	.word	0x080074d9
 8007498:	080074d9 	.word	0x080074d9
 800749c:	080074cd 	.word	0x080074cd
 80074a0:	080074d9 	.word	0x080074d9
 80074a4:	080074d9 	.word	0x080074d9
 80074a8:	080074d9 	.word	0x080074d9
 80074ac:	080074c7 	.word	0x080074c7
 80074b0:	080074d9 	.word	0x080074d9
 80074b4:	080074d9 	.word	0x080074d9
 80074b8:	080074d9 	.word	0x080074d9
 80074bc:	080074d3 	.word	0x080074d3
 80074c0:	2300      	movs	r3, #0
 80074c2:	76fb      	strb	r3, [r7, #27]
 80074c4:	e0ae      	b.n	8007624 <UART_SetConfig+0x2a8>
 80074c6:	2302      	movs	r3, #2
 80074c8:	76fb      	strb	r3, [r7, #27]
 80074ca:	e0ab      	b.n	8007624 <UART_SetConfig+0x2a8>
 80074cc:	2304      	movs	r3, #4
 80074ce:	76fb      	strb	r3, [r7, #27]
 80074d0:	e0a8      	b.n	8007624 <UART_SetConfig+0x2a8>
 80074d2:	2308      	movs	r3, #8
 80074d4:	76fb      	strb	r3, [r7, #27]
 80074d6:	e0a5      	b.n	8007624 <UART_SetConfig+0x2a8>
 80074d8:	2310      	movs	r3, #16
 80074da:	76fb      	strb	r3, [r7, #27]
 80074dc:	bf00      	nop
 80074de:	e0a1      	b.n	8007624 <UART_SetConfig+0x2a8>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a69      	ldr	r2, [pc, #420]	; (800768c <UART_SetConfig+0x310>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d120      	bne.n	800752c <UART_SetConfig+0x1b0>
 80074ea:	4b66      	ldr	r3, [pc, #408]	; (8007684 <UART_SetConfig+0x308>)
 80074ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80074f4:	2b10      	cmp	r3, #16
 80074f6:	d00f      	beq.n	8007518 <UART_SetConfig+0x19c>
 80074f8:	2b10      	cmp	r3, #16
 80074fa:	d802      	bhi.n	8007502 <UART_SetConfig+0x186>
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d005      	beq.n	800750c <UART_SetConfig+0x190>
 8007500:	e010      	b.n	8007524 <UART_SetConfig+0x1a8>
 8007502:	2b20      	cmp	r3, #32
 8007504:	d005      	beq.n	8007512 <UART_SetConfig+0x196>
 8007506:	2b30      	cmp	r3, #48	; 0x30
 8007508:	d009      	beq.n	800751e <UART_SetConfig+0x1a2>
 800750a:	e00b      	b.n	8007524 <UART_SetConfig+0x1a8>
 800750c:	2300      	movs	r3, #0
 800750e:	76fb      	strb	r3, [r7, #27]
 8007510:	e088      	b.n	8007624 <UART_SetConfig+0x2a8>
 8007512:	2302      	movs	r3, #2
 8007514:	76fb      	strb	r3, [r7, #27]
 8007516:	e085      	b.n	8007624 <UART_SetConfig+0x2a8>
 8007518:	2304      	movs	r3, #4
 800751a:	76fb      	strb	r3, [r7, #27]
 800751c:	e082      	b.n	8007624 <UART_SetConfig+0x2a8>
 800751e:	2308      	movs	r3, #8
 8007520:	76fb      	strb	r3, [r7, #27]
 8007522:	e07f      	b.n	8007624 <UART_SetConfig+0x2a8>
 8007524:	2310      	movs	r3, #16
 8007526:	76fb      	strb	r3, [r7, #27]
 8007528:	bf00      	nop
 800752a:	e07b      	b.n	8007624 <UART_SetConfig+0x2a8>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a57      	ldr	r2, [pc, #348]	; (8007690 <UART_SetConfig+0x314>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d120      	bne.n	8007578 <UART_SetConfig+0x1fc>
 8007536:	4b53      	ldr	r3, [pc, #332]	; (8007684 <UART_SetConfig+0x308>)
 8007538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800753c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007540:	2b40      	cmp	r3, #64	; 0x40
 8007542:	d00f      	beq.n	8007564 <UART_SetConfig+0x1e8>
 8007544:	2b40      	cmp	r3, #64	; 0x40
 8007546:	d802      	bhi.n	800754e <UART_SetConfig+0x1d2>
 8007548:	2b00      	cmp	r3, #0
 800754a:	d005      	beq.n	8007558 <UART_SetConfig+0x1dc>
 800754c:	e010      	b.n	8007570 <UART_SetConfig+0x1f4>
 800754e:	2b80      	cmp	r3, #128	; 0x80
 8007550:	d005      	beq.n	800755e <UART_SetConfig+0x1e2>
 8007552:	2bc0      	cmp	r3, #192	; 0xc0
 8007554:	d009      	beq.n	800756a <UART_SetConfig+0x1ee>
 8007556:	e00b      	b.n	8007570 <UART_SetConfig+0x1f4>
 8007558:	2300      	movs	r3, #0
 800755a:	76fb      	strb	r3, [r7, #27]
 800755c:	e062      	b.n	8007624 <UART_SetConfig+0x2a8>
 800755e:	2302      	movs	r3, #2
 8007560:	76fb      	strb	r3, [r7, #27]
 8007562:	e05f      	b.n	8007624 <UART_SetConfig+0x2a8>
 8007564:	2304      	movs	r3, #4
 8007566:	76fb      	strb	r3, [r7, #27]
 8007568:	e05c      	b.n	8007624 <UART_SetConfig+0x2a8>
 800756a:	2308      	movs	r3, #8
 800756c:	76fb      	strb	r3, [r7, #27]
 800756e:	e059      	b.n	8007624 <UART_SetConfig+0x2a8>
 8007570:	2310      	movs	r3, #16
 8007572:	76fb      	strb	r3, [r7, #27]
 8007574:	bf00      	nop
 8007576:	e055      	b.n	8007624 <UART_SetConfig+0x2a8>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a45      	ldr	r2, [pc, #276]	; (8007694 <UART_SetConfig+0x318>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d124      	bne.n	80075cc <UART_SetConfig+0x250>
 8007582:	4b40      	ldr	r3, [pc, #256]	; (8007684 <UART_SetConfig+0x308>)
 8007584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800758c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007590:	d012      	beq.n	80075b8 <UART_SetConfig+0x23c>
 8007592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007596:	d802      	bhi.n	800759e <UART_SetConfig+0x222>
 8007598:	2b00      	cmp	r3, #0
 800759a:	d007      	beq.n	80075ac <UART_SetConfig+0x230>
 800759c:	e012      	b.n	80075c4 <UART_SetConfig+0x248>
 800759e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075a2:	d006      	beq.n	80075b2 <UART_SetConfig+0x236>
 80075a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075a8:	d009      	beq.n	80075be <UART_SetConfig+0x242>
 80075aa:	e00b      	b.n	80075c4 <UART_SetConfig+0x248>
 80075ac:	2300      	movs	r3, #0
 80075ae:	76fb      	strb	r3, [r7, #27]
 80075b0:	e038      	b.n	8007624 <UART_SetConfig+0x2a8>
 80075b2:	2302      	movs	r3, #2
 80075b4:	76fb      	strb	r3, [r7, #27]
 80075b6:	e035      	b.n	8007624 <UART_SetConfig+0x2a8>
 80075b8:	2304      	movs	r3, #4
 80075ba:	76fb      	strb	r3, [r7, #27]
 80075bc:	e032      	b.n	8007624 <UART_SetConfig+0x2a8>
 80075be:	2308      	movs	r3, #8
 80075c0:	76fb      	strb	r3, [r7, #27]
 80075c2:	e02f      	b.n	8007624 <UART_SetConfig+0x2a8>
 80075c4:	2310      	movs	r3, #16
 80075c6:	76fb      	strb	r3, [r7, #27]
 80075c8:	bf00      	nop
 80075ca:	e02b      	b.n	8007624 <UART_SetConfig+0x2a8>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a2a      	ldr	r2, [pc, #168]	; (800767c <UART_SetConfig+0x300>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d124      	bne.n	8007620 <UART_SetConfig+0x2a4>
 80075d6:	4b2b      	ldr	r3, [pc, #172]	; (8007684 <UART_SetConfig+0x308>)
 80075d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80075e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075e4:	d012      	beq.n	800760c <UART_SetConfig+0x290>
 80075e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075ea:	d802      	bhi.n	80075f2 <UART_SetConfig+0x276>
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d007      	beq.n	8007600 <UART_SetConfig+0x284>
 80075f0:	e012      	b.n	8007618 <UART_SetConfig+0x29c>
 80075f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075f6:	d006      	beq.n	8007606 <UART_SetConfig+0x28a>
 80075f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075fc:	d009      	beq.n	8007612 <UART_SetConfig+0x296>
 80075fe:	e00b      	b.n	8007618 <UART_SetConfig+0x29c>
 8007600:	2300      	movs	r3, #0
 8007602:	76fb      	strb	r3, [r7, #27]
 8007604:	e00e      	b.n	8007624 <UART_SetConfig+0x2a8>
 8007606:	2302      	movs	r3, #2
 8007608:	76fb      	strb	r3, [r7, #27]
 800760a:	e00b      	b.n	8007624 <UART_SetConfig+0x2a8>
 800760c:	2304      	movs	r3, #4
 800760e:	76fb      	strb	r3, [r7, #27]
 8007610:	e008      	b.n	8007624 <UART_SetConfig+0x2a8>
 8007612:	2308      	movs	r3, #8
 8007614:	76fb      	strb	r3, [r7, #27]
 8007616:	e005      	b.n	8007624 <UART_SetConfig+0x2a8>
 8007618:	2310      	movs	r3, #16
 800761a:	76fb      	strb	r3, [r7, #27]
 800761c:	bf00      	nop
 800761e:	e001      	b.n	8007624 <UART_SetConfig+0x2a8>
 8007620:	2310      	movs	r3, #16
 8007622:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a14      	ldr	r2, [pc, #80]	; (800767c <UART_SetConfig+0x300>)
 800762a:	4293      	cmp	r3, r2
 800762c:	f040 80a1 	bne.w	8007772 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007630:	7efb      	ldrb	r3, [r7, #27]
 8007632:	2b08      	cmp	r3, #8
 8007634:	d836      	bhi.n	80076a4 <UART_SetConfig+0x328>
 8007636:	a201      	add	r2, pc, #4	; (adr r2, 800763c <UART_SetConfig+0x2c0>)
 8007638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763c:	08007661 	.word	0x08007661
 8007640:	080076a5 	.word	0x080076a5
 8007644:	08007669 	.word	0x08007669
 8007648:	080076a5 	.word	0x080076a5
 800764c:	0800766f 	.word	0x0800766f
 8007650:	080076a5 	.word	0x080076a5
 8007654:	080076a5 	.word	0x080076a5
 8007658:	080076a5 	.word	0x080076a5
 800765c:	0800769d 	.word	0x0800769d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007660:	f7fe ff50 	bl	8006504 <HAL_RCC_GetPCLK1Freq>
 8007664:	6178      	str	r0, [r7, #20]
        break;
 8007666:	e022      	b.n	80076ae <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007668:	4b0b      	ldr	r3, [pc, #44]	; (8007698 <UART_SetConfig+0x31c>)
 800766a:	617b      	str	r3, [r7, #20]
        break;
 800766c:	e01f      	b.n	80076ae <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800766e:	f7fe feb5 	bl	80063dc <HAL_RCC_GetSysClockFreq>
 8007672:	6178      	str	r0, [r7, #20]
        break;
 8007674:	e01b      	b.n	80076ae <UART_SetConfig+0x332>
 8007676:	bf00      	nop
 8007678:	cfff69f3 	.word	0xcfff69f3
 800767c:	40008000 	.word	0x40008000
 8007680:	40013800 	.word	0x40013800
 8007684:	40021000 	.word	0x40021000
 8007688:	40004400 	.word	0x40004400
 800768c:	40004800 	.word	0x40004800
 8007690:	40004c00 	.word	0x40004c00
 8007694:	40005000 	.word	0x40005000
 8007698:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800769c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076a0:	617b      	str	r3, [r7, #20]
        break;
 80076a2:	e004      	b.n	80076ae <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	76bb      	strb	r3, [r7, #26]
        break;
 80076ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f000 811d 	beq.w	80078f0 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ba:	4a97      	ldr	r2, [pc, #604]	; (8007918 <UART_SetConfig+0x59c>)
 80076bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076c0:	461a      	mov	r2, r3
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80076c8:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	4613      	mov	r3, r2
 80076d0:	005b      	lsls	r3, r3, #1
 80076d2:	4413      	add	r3, r2
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d305      	bcc.n	80076e6 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d902      	bls.n	80076ec <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	76bb      	strb	r3, [r7, #26]
 80076ea:	e101      	b.n	80078f0 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f04f 0100 	mov.w	r1, #0
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f8:	4a87      	ldr	r2, [pc, #540]	; (8007918 <UART_SetConfig+0x59c>)
 80076fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076fe:	b29b      	uxth	r3, r3
 8007700:	f04f 0400 	mov.w	r4, #0
 8007704:	461a      	mov	r2, r3
 8007706:	4623      	mov	r3, r4
 8007708:	f7f9 fa96 	bl	8000c38 <__aeabi_uldivmod>
 800770c:	4603      	mov	r3, r0
 800770e:	460c      	mov	r4, r1
 8007710:	4619      	mov	r1, r3
 8007712:	4622      	mov	r2, r4
 8007714:	f04f 0300 	mov.w	r3, #0
 8007718:	f04f 0400 	mov.w	r4, #0
 800771c:	0214      	lsls	r4, r2, #8
 800771e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007722:	020b      	lsls	r3, r1, #8
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	6852      	ldr	r2, [r2, #4]
 8007728:	0852      	lsrs	r2, r2, #1
 800772a:	4611      	mov	r1, r2
 800772c:	f04f 0200 	mov.w	r2, #0
 8007730:	eb13 0b01 	adds.w	fp, r3, r1
 8007734:	eb44 0c02 	adc.w	ip, r4, r2
 8007738:	4658      	mov	r0, fp
 800773a:	4661      	mov	r1, ip
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f04f 0400 	mov.w	r4, #0
 8007744:	461a      	mov	r2, r3
 8007746:	4623      	mov	r3, r4
 8007748:	f7f9 fa76 	bl	8000c38 <__aeabi_uldivmod>
 800774c:	4603      	mov	r3, r0
 800774e:	460c      	mov	r4, r1
 8007750:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007758:	d308      	bcc.n	800776c <UART_SetConfig+0x3f0>
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007760:	d204      	bcs.n	800776c <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	60da      	str	r2, [r3, #12]
 800776a:	e0c1      	b.n	80078f0 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	76bb      	strb	r3, [r7, #26]
 8007770:	e0be      	b.n	80078f0 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	69db      	ldr	r3, [r3, #28]
 8007776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800777a:	d164      	bne.n	8007846 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 800777c:	7efb      	ldrb	r3, [r7, #27]
 800777e:	2b08      	cmp	r3, #8
 8007780:	d827      	bhi.n	80077d2 <UART_SetConfig+0x456>
 8007782:	a201      	add	r2, pc, #4	; (adr r2, 8007788 <UART_SetConfig+0x40c>)
 8007784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007788:	080077ad 	.word	0x080077ad
 800778c:	080077b5 	.word	0x080077b5
 8007790:	080077bd 	.word	0x080077bd
 8007794:	080077d3 	.word	0x080077d3
 8007798:	080077c3 	.word	0x080077c3
 800779c:	080077d3 	.word	0x080077d3
 80077a0:	080077d3 	.word	0x080077d3
 80077a4:	080077d3 	.word	0x080077d3
 80077a8:	080077cb 	.word	0x080077cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077ac:	f7fe feaa 	bl	8006504 <HAL_RCC_GetPCLK1Freq>
 80077b0:	6178      	str	r0, [r7, #20]
        break;
 80077b2:	e013      	b.n	80077dc <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077b4:	f7fe febc 	bl	8006530 <HAL_RCC_GetPCLK2Freq>
 80077b8:	6178      	str	r0, [r7, #20]
        break;
 80077ba:	e00f      	b.n	80077dc <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077bc:	4b57      	ldr	r3, [pc, #348]	; (800791c <UART_SetConfig+0x5a0>)
 80077be:	617b      	str	r3, [r7, #20]
        break;
 80077c0:	e00c      	b.n	80077dc <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077c2:	f7fe fe0b 	bl	80063dc <HAL_RCC_GetSysClockFreq>
 80077c6:	6178      	str	r0, [r7, #20]
        break;
 80077c8:	e008      	b.n	80077dc <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ce:	617b      	str	r3, [r7, #20]
        break;
 80077d0:	e004      	b.n	80077dc <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	76bb      	strb	r3, [r7, #26]
        break;
 80077da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f000 8086 	beq.w	80078f0 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e8:	4a4b      	ldr	r2, [pc, #300]	; (8007918 <UART_SetConfig+0x59c>)
 80077ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077ee:	461a      	mov	r2, r3
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80077f6:	005a      	lsls	r2, r3, #1
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	085b      	lsrs	r3, r3, #1
 80077fe:	441a      	add	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	fbb2 f3f3 	udiv	r3, r2, r3
 8007808:	b29b      	uxth	r3, r3
 800780a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	2b0f      	cmp	r3, #15
 8007810:	d916      	bls.n	8007840 <UART_SetConfig+0x4c4>
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007818:	d212      	bcs.n	8007840 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	b29b      	uxth	r3, r3
 800781e:	f023 030f 	bic.w	r3, r3, #15
 8007822:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	085b      	lsrs	r3, r3, #1
 8007828:	b29b      	uxth	r3, r3
 800782a:	f003 0307 	and.w	r3, r3, #7
 800782e:	b29a      	uxth	r2, r3
 8007830:	89fb      	ldrh	r3, [r7, #14]
 8007832:	4313      	orrs	r3, r2
 8007834:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	89fa      	ldrh	r2, [r7, #14]
 800783c:	60da      	str	r2, [r3, #12]
 800783e:	e057      	b.n	80078f0 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	76bb      	strb	r3, [r7, #26]
 8007844:	e054      	b.n	80078f0 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007846:	7efb      	ldrb	r3, [r7, #27]
 8007848:	2b08      	cmp	r3, #8
 800784a:	d828      	bhi.n	800789e <UART_SetConfig+0x522>
 800784c:	a201      	add	r2, pc, #4	; (adr r2, 8007854 <UART_SetConfig+0x4d8>)
 800784e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007852:	bf00      	nop
 8007854:	08007879 	.word	0x08007879
 8007858:	08007881 	.word	0x08007881
 800785c:	08007889 	.word	0x08007889
 8007860:	0800789f 	.word	0x0800789f
 8007864:	0800788f 	.word	0x0800788f
 8007868:	0800789f 	.word	0x0800789f
 800786c:	0800789f 	.word	0x0800789f
 8007870:	0800789f 	.word	0x0800789f
 8007874:	08007897 	.word	0x08007897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007878:	f7fe fe44 	bl	8006504 <HAL_RCC_GetPCLK1Freq>
 800787c:	6178      	str	r0, [r7, #20]
        break;
 800787e:	e013      	b.n	80078a8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007880:	f7fe fe56 	bl	8006530 <HAL_RCC_GetPCLK2Freq>
 8007884:	6178      	str	r0, [r7, #20]
        break;
 8007886:	e00f      	b.n	80078a8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007888:	4b24      	ldr	r3, [pc, #144]	; (800791c <UART_SetConfig+0x5a0>)
 800788a:	617b      	str	r3, [r7, #20]
        break;
 800788c:	e00c      	b.n	80078a8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800788e:	f7fe fda5 	bl	80063dc <HAL_RCC_GetSysClockFreq>
 8007892:	6178      	str	r0, [r7, #20]
        break;
 8007894:	e008      	b.n	80078a8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800789a:	617b      	str	r3, [r7, #20]
        break;
 800789c:	e004      	b.n	80078a8 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 800789e:	2300      	movs	r3, #0
 80078a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	76bb      	strb	r3, [r7, #26]
        break;
 80078a6:	bf00      	nop
    }

    if (pclk != 0U)
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d020      	beq.n	80078f0 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b2:	4a19      	ldr	r2, [pc, #100]	; (8007918 <UART_SetConfig+0x59c>)
 80078b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078b8:	461a      	mov	r2, r3
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	085b      	lsrs	r3, r3, #1
 80078c6:	441a      	add	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	2b0f      	cmp	r3, #15
 80078d8:	d908      	bls.n	80078ec <UART_SetConfig+0x570>
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078e0:	d204      	bcs.n	80078ec <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	60da      	str	r2, [r3, #12]
 80078ea:	e001      	b.n	80078f0 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800790c:	7ebb      	ldrb	r3, [r7, #26]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3720      	adds	r7, #32
 8007912:	46bd      	mov	sp, r7
 8007914:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007918:	0800db44 	.word	0x0800db44
 800791c:	00f42400 	.word	0x00f42400

08007920 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792c:	f003 0301 	and.w	r3, r3, #1
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00a      	beq.n	800794a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	430a      	orrs	r2, r1
 8007948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794e:	f003 0302 	and.w	r3, r3, #2
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00a      	beq.n	800796c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	430a      	orrs	r2, r1
 800796a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007970:	f003 0304 	and.w	r3, r3, #4
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00a      	beq.n	800798e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	430a      	orrs	r2, r1
 800798c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007992:	f003 0308 	and.w	r3, r3, #8
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00a      	beq.n	80079b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	430a      	orrs	r2, r1
 80079ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b4:	f003 0310 	and.w	r3, r3, #16
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00a      	beq.n	80079d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	430a      	orrs	r2, r1
 80079d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d6:	f003 0320 	and.w	r3, r3, #32
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00a      	beq.n	80079f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	430a      	orrs	r2, r1
 80079f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d01a      	beq.n	8007a36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	430a      	orrs	r2, r1
 8007a14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a1e:	d10a      	bne.n	8007a36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	430a      	orrs	r2, r1
 8007a34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00a      	beq.n	8007a58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	430a      	orrs	r2, r1
 8007a56:	605a      	str	r2, [r3, #4]
  }
}
 8007a58:	bf00      	nop
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b086      	sub	sp, #24
 8007a68:	af02      	add	r7, sp, #8
 8007a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007a74:	f7fa fd6a 	bl	800254c <HAL_GetTick>
 8007a78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 0308 	and.w	r3, r3, #8
 8007a84:	2b08      	cmp	r3, #8
 8007a86:	d10e      	bne.n	8007aa6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 f82c 	bl	8007af4 <UART_WaitOnFlagUntilTimeout>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e022      	b.n	8007aec <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0304 	and.w	r3, r3, #4
 8007ab0:	2b04      	cmp	r3, #4
 8007ab2:	d10e      	bne.n	8007ad2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f816 	bl	8007af4 <UART_WaitOnFlagUntilTimeout>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e00c      	b.n	8007aec <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2220      	movs	r2, #32
 8007ad6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2220      	movs	r2, #32
 8007ade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	603b      	str	r3, [r7, #0]
 8007b00:	4613      	mov	r3, r2
 8007b02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b04:	e062      	b.n	8007bcc <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b0c:	d05e      	beq.n	8007bcc <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b0e:	f7fa fd1d 	bl	800254c <HAL_GetTick>
 8007b12:	4602      	mov	r2, r0
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	1ad3      	subs	r3, r2, r3
 8007b18:	69ba      	ldr	r2, [r7, #24]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d302      	bcc.n	8007b24 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d11d      	bne.n	8007b60 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007b32:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689a      	ldr	r2, [r3, #8]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f022 0201 	bic.w	r2, r2, #1
 8007b42:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2220      	movs	r2, #32
 8007b48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e045      	b.n	8007bec <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 0304 	and.w	r3, r3, #4
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d02e      	beq.n	8007bcc <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	69db      	ldr	r3, [r3, #28]
 8007b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b7c:	d126      	bne.n	8007bcc <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b86:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007b96:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	689a      	ldr	r2, [r3, #8]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f022 0201 	bic.w	r2, r2, #1
 8007ba6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2220      	movs	r2, #32
 8007bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2220      	movs	r2, #32
 8007bb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2220      	movs	r2, #32
 8007bbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e00f      	b.n	8007bec <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	69da      	ldr	r2, [r3, #28]
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	68ba      	ldr	r2, [r7, #8]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	bf0c      	ite	eq
 8007bdc:	2301      	moveq	r3, #1
 8007bde:	2300      	movne	r3, #0
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	461a      	mov	r2, r3
 8007be4:	79fb      	ldrb	r3, [r7, #7]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d08d      	beq.n	8007b06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d101      	bne.n	8007c0a <HAL_UARTEx_DisableFifoMode+0x16>
 8007c06:	2302      	movs	r3, #2
 8007c08:	e027      	b.n	8007c5a <HAL_UARTEx_DisableFifoMode+0x66>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2224      	movs	r2, #36	; 0x24
 8007c16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f022 0201 	bic.w	r2, r2, #1
 8007c30:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007c38:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b084      	sub	sp, #16
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d101      	bne.n	8007c7e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	e02d      	b.n	8007cda <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2224      	movs	r2, #36	; 0x24
 8007c8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f022 0201 	bic.w	r2, r2, #1
 8007ca4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	683a      	ldr	r2, [r7, #0]
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f850 	bl	8007d60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2220      	movs	r2, #32
 8007ccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b084      	sub	sp, #16
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d101      	bne.n	8007cfa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007cf6:	2302      	movs	r3, #2
 8007cf8:	e02d      	b.n	8007d56 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2224      	movs	r2, #36	; 0x24
 8007d06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f022 0201 	bic.w	r2, r2, #1
 8007d20:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	683a      	ldr	r2, [r7, #0]
 8007d32:	430a      	orrs	r2, r1
 8007d34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f812 	bl	8007d60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2220      	movs	r2, #32
 8007d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
	...

08007d60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b089      	sub	sp, #36	; 0x24
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007d68:	4a2f      	ldr	r2, [pc, #188]	; (8007e28 <UARTEx_SetNbDataToProcess+0xc8>)
 8007d6a:	f107 0314 	add.w	r3, r7, #20
 8007d6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007d72:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007d76:	4a2d      	ldr	r2, [pc, #180]	; (8007e2c <UARTEx_SetNbDataToProcess+0xcc>)
 8007d78:	f107 030c 	add.w	r3, r7, #12
 8007d7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007d80:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d108      	bne.n	8007d9e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d9c:	e03d      	b.n	8007e1a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d9e:	2308      	movs	r3, #8
 8007da0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007da2:	2308      	movs	r3, #8
 8007da4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	0e5b      	lsrs	r3, r3, #25
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	f003 0307 	and.w	r3, r3, #7
 8007db4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	0f5b      	lsrs	r3, r3, #29
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	f003 0307 	and.w	r3, r3, #7
 8007dc4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007dc6:	7fbb      	ldrb	r3, [r7, #30]
 8007dc8:	7f3a      	ldrb	r2, [r7, #28]
 8007dca:	f107 0120 	add.w	r1, r7, #32
 8007dce:	440a      	add	r2, r1
 8007dd0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007dd4:	fb02 f303 	mul.w	r3, r2, r3
 8007dd8:	7f3a      	ldrb	r2, [r7, #28]
 8007dda:	f107 0120 	add.w	r1, r7, #32
 8007dde:	440a      	add	r2, r1
 8007de0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007de4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007df0:	7ffb      	ldrb	r3, [r7, #31]
 8007df2:	7f7a      	ldrb	r2, [r7, #29]
 8007df4:	f107 0120 	add.w	r1, r7, #32
 8007df8:	440a      	add	r2, r1
 8007dfa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007dfe:	fb02 f303 	mul.w	r3, r2, r3
 8007e02:	7f7a      	ldrb	r2, [r7, #29]
 8007e04:	f107 0120 	add.w	r1, r7, #32
 8007e08:	440a      	add	r2, r1
 8007e0a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007e0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007e1a:	bf00      	nop
 8007e1c:	3724      	adds	r7, #36	; 0x24
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	0800daa4 	.word	0x0800daa4
 8007e2c:	0800daac 	.word	0x0800daac

08007e30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e30:	b084      	sub	sp, #16
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b084      	sub	sp, #16
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
 8007e3a:	f107 001c 	add.w	r0, r7, #28
 8007e3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d122      	bne.n	8007e8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d105      	bne.n	8007e82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f001 f9da 	bl	800923c <USB_CoreReset>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	73fb      	strb	r3, [r7, #15]
 8007e8c:	e01a      	b.n	8007ec4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f001 f9ce 	bl	800923c <USB_CoreReset>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d106      	bne.n	8007eb8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	639a      	str	r2, [r3, #56]	; 0x38
 8007eb6:	e005      	b.n	8007ec4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ebc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ed0:	b004      	add	sp, #16
 8007ed2:	4770      	bx	lr

08007ed4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b087      	sub	sp, #28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007ee2:	79fb      	ldrb	r3, [r7, #7]
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d165      	bne.n	8007fb4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	4a3e      	ldr	r2, [pc, #248]	; (8007fe4 <USB_SetTurnaroundTime+0x110>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d906      	bls.n	8007efe <USB_SetTurnaroundTime+0x2a>
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	4a3d      	ldr	r2, [pc, #244]	; (8007fe8 <USB_SetTurnaroundTime+0x114>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d802      	bhi.n	8007efe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007ef8:	230f      	movs	r3, #15
 8007efa:	617b      	str	r3, [r7, #20]
 8007efc:	e05c      	b.n	8007fb8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	4a39      	ldr	r2, [pc, #228]	; (8007fe8 <USB_SetTurnaroundTime+0x114>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d906      	bls.n	8007f14 <USB_SetTurnaroundTime+0x40>
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	4a38      	ldr	r2, [pc, #224]	; (8007fec <USB_SetTurnaroundTime+0x118>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d802      	bhi.n	8007f14 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007f0e:	230e      	movs	r3, #14
 8007f10:	617b      	str	r3, [r7, #20]
 8007f12:	e051      	b.n	8007fb8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	4a35      	ldr	r2, [pc, #212]	; (8007fec <USB_SetTurnaroundTime+0x118>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d906      	bls.n	8007f2a <USB_SetTurnaroundTime+0x56>
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	4a34      	ldr	r2, [pc, #208]	; (8007ff0 <USB_SetTurnaroundTime+0x11c>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d802      	bhi.n	8007f2a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007f24:	230d      	movs	r3, #13
 8007f26:	617b      	str	r3, [r7, #20]
 8007f28:	e046      	b.n	8007fb8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	4a30      	ldr	r2, [pc, #192]	; (8007ff0 <USB_SetTurnaroundTime+0x11c>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d906      	bls.n	8007f40 <USB_SetTurnaroundTime+0x6c>
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	4a2f      	ldr	r2, [pc, #188]	; (8007ff4 <USB_SetTurnaroundTime+0x120>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d802      	bhi.n	8007f40 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007f3a:	230c      	movs	r3, #12
 8007f3c:	617b      	str	r3, [r7, #20]
 8007f3e:	e03b      	b.n	8007fb8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	4a2c      	ldr	r2, [pc, #176]	; (8007ff4 <USB_SetTurnaroundTime+0x120>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d906      	bls.n	8007f56 <USB_SetTurnaroundTime+0x82>
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	4a2b      	ldr	r2, [pc, #172]	; (8007ff8 <USB_SetTurnaroundTime+0x124>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d802      	bhi.n	8007f56 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007f50:	230b      	movs	r3, #11
 8007f52:	617b      	str	r3, [r7, #20]
 8007f54:	e030      	b.n	8007fb8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	4a27      	ldr	r2, [pc, #156]	; (8007ff8 <USB_SetTurnaroundTime+0x124>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d906      	bls.n	8007f6c <USB_SetTurnaroundTime+0x98>
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	4a26      	ldr	r2, [pc, #152]	; (8007ffc <USB_SetTurnaroundTime+0x128>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d802      	bhi.n	8007f6c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007f66:	230a      	movs	r3, #10
 8007f68:	617b      	str	r3, [r7, #20]
 8007f6a:	e025      	b.n	8007fb8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	4a23      	ldr	r2, [pc, #140]	; (8007ffc <USB_SetTurnaroundTime+0x128>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d906      	bls.n	8007f82 <USB_SetTurnaroundTime+0xae>
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	4a22      	ldr	r2, [pc, #136]	; (8008000 <USB_SetTurnaroundTime+0x12c>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d802      	bhi.n	8007f82 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007f7c:	2309      	movs	r3, #9
 8007f7e:	617b      	str	r3, [r7, #20]
 8007f80:	e01a      	b.n	8007fb8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	4a1e      	ldr	r2, [pc, #120]	; (8008000 <USB_SetTurnaroundTime+0x12c>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d906      	bls.n	8007f98 <USB_SetTurnaroundTime+0xc4>
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	4a1d      	ldr	r2, [pc, #116]	; (8008004 <USB_SetTurnaroundTime+0x130>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d802      	bhi.n	8007f98 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007f92:	2308      	movs	r3, #8
 8007f94:	617b      	str	r3, [r7, #20]
 8007f96:	e00f      	b.n	8007fb8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	4a1a      	ldr	r2, [pc, #104]	; (8008004 <USB_SetTurnaroundTime+0x130>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d906      	bls.n	8007fae <USB_SetTurnaroundTime+0xda>
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	4a19      	ldr	r2, [pc, #100]	; (8008008 <USB_SetTurnaroundTime+0x134>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d802      	bhi.n	8007fae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007fa8:	2307      	movs	r3, #7
 8007faa:	617b      	str	r3, [r7, #20]
 8007fac:	e004      	b.n	8007fb8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007fae:	2306      	movs	r3, #6
 8007fb0:	617b      	str	r3, [r7, #20]
 8007fb2:	e001      	b.n	8007fb8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007fb4:	2309      	movs	r3, #9
 8007fb6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	68da      	ldr	r2, [r3, #12]
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	029b      	lsls	r3, r3, #10
 8007fcc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007fd0:	431a      	orrs	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	371c      	adds	r7, #28
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr
 8007fe4:	00d8acbf 	.word	0x00d8acbf
 8007fe8:	00e4e1bf 	.word	0x00e4e1bf
 8007fec:	00f423ff 	.word	0x00f423ff
 8007ff0:	0106737f 	.word	0x0106737f
 8007ff4:	011a499f 	.word	0x011a499f
 8007ff8:	01312cff 	.word	0x01312cff
 8007ffc:	014ca43f 	.word	0x014ca43f
 8008000:	016e35ff 	.word	0x016e35ff
 8008004:	01a6ab1f 	.word	0x01a6ab1f
 8008008:	01e847ff 	.word	0x01e847ff

0800800c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	f043 0201 	orr.w	r2, r3, #1
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	370c      	adds	r7, #12
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800802e:	b480      	push	{r7}
 8008030:	b083      	sub	sp, #12
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f023 0201 	bic.w	r2, r3, #1
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	460b      	mov	r3, r1
 800805a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008068:	78fb      	ldrb	r3, [r7, #3]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d106      	bne.n	800807c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	60da      	str	r2, [r3, #12]
 800807a:	e00b      	b.n	8008094 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800807c:	78fb      	ldrb	r3, [r7, #3]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d106      	bne.n	8008090 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	60da      	str	r2, [r3, #12]
 800808e:	e001      	b.n	8008094 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e003      	b.n	800809c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008094:	2032      	movs	r0, #50	; 0x32
 8008096:	f7fa fa65 	bl	8002564 <HAL_Delay>

  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080a4:	b084      	sub	sp, #16
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b086      	sub	sp, #24
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80080b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80080b6:	2300      	movs	r3, #0
 80080b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80080be:	2300      	movs	r3, #0
 80080c0:	613b      	str	r3, [r7, #16]
 80080c2:	e009      	b.n	80080d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	3340      	adds	r3, #64	; 0x40
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4413      	add	r3, r2
 80080ce:	2200      	movs	r2, #0
 80080d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	3301      	adds	r3, #1
 80080d6:	613b      	str	r3, [r7, #16]
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	2b0e      	cmp	r3, #14
 80080dc:	d9f2      	bls.n	80080c4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80080de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d11c      	bne.n	800811e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080f2:	f043 0302 	orr.w	r3, r3, #2
 80080f6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	601a      	str	r2, [r3, #0]
 800811c:	e005      	b.n	800812a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008122:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008130:	461a      	mov	r2, r3
 8008132:	2300      	movs	r3, #0
 8008134:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800813c:	4619      	mov	r1, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008144:	461a      	mov	r2, r3
 8008146:	680b      	ldr	r3, [r1, #0]
 8008148:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800814a:	2103      	movs	r1, #3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f93d 	bl	80083cc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008152:	2110      	movs	r1, #16
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 f8f1 	bl	800833c <USB_FlushTxFifo>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d001      	beq.n	8008164 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 f90f 	bl	8008388 <USB_FlushRxFifo>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d001      	beq.n	8008174 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800817a:	461a      	mov	r2, r3
 800817c:	2300      	movs	r3, #0
 800817e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008186:	461a      	mov	r2, r3
 8008188:	2300      	movs	r3, #0
 800818a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008192:	461a      	mov	r2, r3
 8008194:	2300      	movs	r3, #0
 8008196:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008198:	2300      	movs	r3, #0
 800819a:	613b      	str	r3, [r7, #16]
 800819c:	e043      	b.n	8008226 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	015a      	lsls	r2, r3, #5
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	4413      	add	r3, r2
 80081a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081b4:	d118      	bne.n	80081e8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d10a      	bne.n	80081d2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	015a      	lsls	r2, r3, #5
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	4413      	add	r3, r2
 80081c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c8:	461a      	mov	r2, r3
 80081ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80081ce:	6013      	str	r3, [r2, #0]
 80081d0:	e013      	b.n	80081fa <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	015a      	lsls	r2, r3, #5
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	4413      	add	r3, r2
 80081da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081de:	461a      	mov	r2, r3
 80081e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80081e4:	6013      	str	r3, [r2, #0]
 80081e6:	e008      	b.n	80081fa <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	015a      	lsls	r2, r3, #5
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4413      	add	r3, r2
 80081f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f4:	461a      	mov	r2, r3
 80081f6:	2300      	movs	r3, #0
 80081f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	015a      	lsls	r2, r3, #5
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	4413      	add	r3, r2
 8008202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008206:	461a      	mov	r2, r3
 8008208:	2300      	movs	r3, #0
 800820a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	015a      	lsls	r2, r3, #5
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	4413      	add	r3, r2
 8008214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008218:	461a      	mov	r2, r3
 800821a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800821e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	3301      	adds	r3, #1
 8008224:	613b      	str	r3, [r7, #16]
 8008226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008228:	693a      	ldr	r2, [r7, #16]
 800822a:	429a      	cmp	r2, r3
 800822c:	d3b7      	bcc.n	800819e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800822e:	2300      	movs	r3, #0
 8008230:	613b      	str	r3, [r7, #16]
 8008232:	e043      	b.n	80082bc <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	015a      	lsls	r2, r3, #5
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	4413      	add	r3, r2
 800823c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008246:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800824a:	d118      	bne.n	800827e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d10a      	bne.n	8008268 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	015a      	lsls	r2, r3, #5
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	4413      	add	r3, r2
 800825a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800825e:	461a      	mov	r2, r3
 8008260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008264:	6013      	str	r3, [r2, #0]
 8008266:	e013      	b.n	8008290 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	015a      	lsls	r2, r3, #5
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	4413      	add	r3, r2
 8008270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008274:	461a      	mov	r2, r3
 8008276:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800827a:	6013      	str	r3, [r2, #0]
 800827c:	e008      	b.n	8008290 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	015a      	lsls	r2, r3, #5
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	4413      	add	r3, r2
 8008286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800828a:	461a      	mov	r2, r3
 800828c:	2300      	movs	r3, #0
 800828e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	015a      	lsls	r2, r3, #5
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	4413      	add	r3, r2
 8008298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800829c:	461a      	mov	r2, r3
 800829e:	2300      	movs	r3, #0
 80082a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	015a      	lsls	r2, r3, #5
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	4413      	add	r3, r2
 80082aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ae:	461a      	mov	r2, r3
 80082b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80082b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	3301      	adds	r3, #1
 80082ba:	613b      	str	r3, [r7, #16]
 80082bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082be:	693a      	ldr	r2, [r7, #16]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d3b7      	bcc.n	8008234 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80082e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	f043 0210 	orr.w	r2, r3, #16
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	699a      	ldr	r2, [r3, #24]
 80082f6:	4b10      	ldr	r3, [pc, #64]	; (8008338 <USB_DevInit+0x294>)
 80082f8:	4313      	orrs	r3, r2
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80082fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008300:	2b00      	cmp	r3, #0
 8008302:	d005      	beq.n	8008310 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	f043 0208 	orr.w	r2, r3, #8
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008312:	2b01      	cmp	r3, #1
 8008314:	d107      	bne.n	8008326 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	699b      	ldr	r3, [r3, #24]
 800831a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800831e:	f043 0304 	orr.w	r3, r3, #4
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008326:	7dfb      	ldrb	r3, [r7, #23]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3718      	adds	r7, #24
 800832c:	46bd      	mov	sp, r7
 800832e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008332:	b004      	add	sp, #16
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	803c3800 	.word	0x803c3800

0800833c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008346:	2300      	movs	r3, #0
 8008348:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	019b      	lsls	r3, r3, #6
 800834e:	f043 0220 	orr.w	r2, r3, #32
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	3301      	adds	r3, #1
 800835a:	60fb      	str	r3, [r7, #12]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	4a09      	ldr	r2, [pc, #36]	; (8008384 <USB_FlushTxFifo+0x48>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d901      	bls.n	8008368 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008364:	2303      	movs	r3, #3
 8008366:	e006      	b.n	8008376 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	f003 0320 	and.w	r3, r3, #32
 8008370:	2b20      	cmp	r3, #32
 8008372:	d0f0      	beq.n	8008356 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	00030d40 	.word	0x00030d40

08008388 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008390:	2300      	movs	r3, #0
 8008392:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2210      	movs	r2, #16
 8008398:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	3301      	adds	r3, #1
 800839e:	60fb      	str	r3, [r7, #12]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	4a09      	ldr	r2, [pc, #36]	; (80083c8 <USB_FlushRxFifo+0x40>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d901      	bls.n	80083ac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80083a8:	2303      	movs	r3, #3
 80083aa:	e006      	b.n	80083ba <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	f003 0310 	and.w	r3, r3, #16
 80083b4:	2b10      	cmp	r3, #16
 80083b6:	d0f0      	beq.n	800839a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	00030d40 	.word	0x00030d40

080083cc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	460b      	mov	r3, r1
 80083d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	78fb      	ldrb	r3, [r7, #3]
 80083e6:	68f9      	ldr	r1, [r7, #12]
 80083e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083ec:	4313      	orrs	r3, r2
 80083ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3714      	adds	r7, #20
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr

080083fe <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80083fe:	b480      	push	{r7}
 8008400:	b087      	sub	sp, #28
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	f003 0306 	and.w	r3, r3, #6
 8008416:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2b02      	cmp	r3, #2
 800841c:	d002      	beq.n	8008424 <USB_GetDevSpeed+0x26>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2b06      	cmp	r3, #6
 8008422:	d102      	bne.n	800842a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008424:	2302      	movs	r3, #2
 8008426:	75fb      	strb	r3, [r7, #23]
 8008428:	e001      	b.n	800842e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800842a:	230f      	movs	r3, #15
 800842c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800842e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008430:	4618      	mov	r0, r3
 8008432:	371c      	adds	r7, #28
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	785b      	ldrb	r3, [r3, #1]
 8008454:	2b01      	cmp	r3, #1
 8008456:	d13a      	bne.n	80084ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800845e:	69da      	ldr	r2, [r3, #28]
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	f003 030f 	and.w	r3, r3, #15
 8008468:	2101      	movs	r1, #1
 800846a:	fa01 f303 	lsl.w	r3, r1, r3
 800846e:	b29b      	uxth	r3, r3
 8008470:	68f9      	ldr	r1, [r7, #12]
 8008472:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008476:	4313      	orrs	r3, r2
 8008478:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	015a      	lsls	r2, r3, #5
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	4413      	add	r3, r2
 8008482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800848c:	2b00      	cmp	r3, #0
 800848e:	d155      	bne.n	800853c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	015a      	lsls	r2, r3, #5
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	4413      	add	r3, r2
 8008498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	78db      	ldrb	r3, [r3, #3]
 80084aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	059b      	lsls	r3, r3, #22
 80084b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084b4:	4313      	orrs	r3, r2
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	0151      	lsls	r1, r2, #5
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	440a      	add	r2, r1
 80084be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084ca:	6013      	str	r3, [r2, #0]
 80084cc:	e036      	b.n	800853c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084d4:	69da      	ldr	r2, [r3, #28]
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	f003 030f 	and.w	r3, r3, #15
 80084de:	2101      	movs	r1, #1
 80084e0:	fa01 f303 	lsl.w	r3, r1, r3
 80084e4:	041b      	lsls	r3, r3, #16
 80084e6:	68f9      	ldr	r1, [r7, #12]
 80084e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084ec:	4313      	orrs	r3, r2
 80084ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	015a      	lsls	r2, r3, #5
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	4413      	add	r3, r2
 80084f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d11a      	bne.n	800853c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	4413      	add	r3, r2
 800850e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	78db      	ldrb	r3, [r3, #3]
 8008520:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008522:	430b      	orrs	r3, r1
 8008524:	4313      	orrs	r3, r2
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	0151      	lsls	r1, r2, #5
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	440a      	add	r2, r1
 800852e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800853a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3714      	adds	r7, #20
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr
	...

0800854c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	785b      	ldrb	r3, [r3, #1]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d161      	bne.n	800862c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	015a      	lsls	r2, r3, #5
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	4413      	add	r3, r2
 8008570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800857a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800857e:	d11f      	bne.n	80085c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	4413      	add	r3, r2
 8008588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68ba      	ldr	r2, [r7, #8]
 8008590:	0151      	lsls	r1, r2, #5
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	440a      	add	r2, r1
 8008596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800859a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800859e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	015a      	lsls	r2, r3, #5
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	4413      	add	r3, r2
 80085a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	0151      	lsls	r1, r2, #5
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	440a      	add	r2, r1
 80085b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	f003 030f 	and.w	r3, r3, #15
 80085d0:	2101      	movs	r1, #1
 80085d2:	fa01 f303 	lsl.w	r3, r1, r3
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	43db      	mvns	r3, r3
 80085da:	68f9      	ldr	r1, [r7, #12]
 80085dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085e0:	4013      	ands	r3, r2
 80085e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ea:	69da      	ldr	r2, [r3, #28]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	f003 030f 	and.w	r3, r3, #15
 80085f4:	2101      	movs	r1, #1
 80085f6:	fa01 f303 	lsl.w	r3, r1, r3
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	43db      	mvns	r3, r3
 80085fe:	68f9      	ldr	r1, [r7, #12]
 8008600:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008604:	4013      	ands	r3, r2
 8008606:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	015a      	lsls	r2, r3, #5
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	4413      	add	r3, r2
 8008610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	0159      	lsls	r1, r3, #5
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	440b      	add	r3, r1
 800861e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008622:	4619      	mov	r1, r3
 8008624:	4b35      	ldr	r3, [pc, #212]	; (80086fc <USB_DeactivateEndpoint+0x1b0>)
 8008626:	4013      	ands	r3, r2
 8008628:	600b      	str	r3, [r1, #0]
 800862a:	e060      	b.n	80086ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	015a      	lsls	r2, r3, #5
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	4413      	add	r3, r2
 8008634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800863e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008642:	d11f      	bne.n	8008684 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	015a      	lsls	r2, r3, #5
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	4413      	add	r3, r2
 800864c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	0151      	lsls	r1, r2, #5
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	440a      	add	r2, r1
 800865a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800865e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008662:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	015a      	lsls	r2, r3, #5
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	4413      	add	r3, r2
 800866c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	0151      	lsls	r1, r2, #5
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	440a      	add	r2, r1
 800867a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800867e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008682:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800868a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	f003 030f 	and.w	r3, r3, #15
 8008694:	2101      	movs	r1, #1
 8008696:	fa01 f303 	lsl.w	r3, r1, r3
 800869a:	041b      	lsls	r3, r3, #16
 800869c:	43db      	mvns	r3, r3
 800869e:	68f9      	ldr	r1, [r7, #12]
 80086a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086a4:	4013      	ands	r3, r2
 80086a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ae:	69da      	ldr	r2, [r3, #28]
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	f003 030f 	and.w	r3, r3, #15
 80086b8:	2101      	movs	r1, #1
 80086ba:	fa01 f303 	lsl.w	r3, r1, r3
 80086be:	041b      	lsls	r3, r3, #16
 80086c0:	43db      	mvns	r3, r3
 80086c2:	68f9      	ldr	r1, [r7, #12]
 80086c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086c8:	4013      	ands	r3, r2
 80086ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	015a      	lsls	r2, r3, #5
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	4413      	add	r3, r2
 80086d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	0159      	lsls	r1, r3, #5
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	440b      	add	r3, r1
 80086e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086e6:	4619      	mov	r1, r3
 80086e8:	4b05      	ldr	r3, [pc, #20]	; (8008700 <USB_DeactivateEndpoint+0x1b4>)
 80086ea:	4013      	ands	r3, r2
 80086ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3714      	adds	r7, #20
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr
 80086fc:	ec337800 	.word	0xec337800
 8008700:	eff37800 	.word	0xeff37800

08008704 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b086      	sub	sp, #24
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	785b      	ldrb	r3, [r3, #1]
 800871c:	2b01      	cmp	r3, #1
 800871e:	f040 810a 	bne.w	8008936 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d132      	bne.n	8008790 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	015a      	lsls	r2, r3, #5
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	4413      	add	r3, r2
 8008732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	0151      	lsls	r1, r2, #5
 800873c:	697a      	ldr	r2, [r7, #20]
 800873e:	440a      	add	r2, r1
 8008740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008744:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008748:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800874c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	015a      	lsls	r2, r3, #5
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	4413      	add	r3, r2
 8008756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	0151      	lsls	r1, r2, #5
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	440a      	add	r2, r1
 8008764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008768:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800876c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	015a      	lsls	r2, r3, #5
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	4413      	add	r3, r2
 8008776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	693a      	ldr	r2, [r7, #16]
 800877e:	0151      	lsls	r1, r2, #5
 8008780:	697a      	ldr	r2, [r7, #20]
 8008782:	440a      	add	r2, r1
 8008784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008788:	0cdb      	lsrs	r3, r3, #19
 800878a:	04db      	lsls	r3, r3, #19
 800878c:	6113      	str	r3, [r2, #16]
 800878e:	e074      	b.n	800887a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	015a      	lsls	r2, r3, #5
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	4413      	add	r3, r2
 8008798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	693a      	ldr	r2, [r7, #16]
 80087a0:	0151      	lsls	r1, r2, #5
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	440a      	add	r2, r1
 80087a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087aa:	0cdb      	lsrs	r3, r3, #19
 80087ac:	04db      	lsls	r3, r3, #19
 80087ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	015a      	lsls	r2, r3, #5
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	4413      	add	r3, r2
 80087b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	0151      	lsls	r1, r2, #5
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	440a      	add	r2, r1
 80087c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80087ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80087d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	015a      	lsls	r2, r3, #5
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	4413      	add	r3, r2
 80087dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087e0:	691a      	ldr	r2, [r3, #16]
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	6959      	ldr	r1, [r3, #20]
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	440b      	add	r3, r1
 80087ec:	1e59      	subs	r1, r3, #1
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80087f6:	04d9      	lsls	r1, r3, #19
 80087f8:	4baf      	ldr	r3, [pc, #700]	; (8008ab8 <USB_EPStartXfer+0x3b4>)
 80087fa:	400b      	ands	r3, r1
 80087fc:	6939      	ldr	r1, [r7, #16]
 80087fe:	0148      	lsls	r0, r1, #5
 8008800:	6979      	ldr	r1, [r7, #20]
 8008802:	4401      	add	r1, r0
 8008804:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008808:	4313      	orrs	r3, r2
 800880a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	015a      	lsls	r2, r3, #5
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	4413      	add	r3, r2
 8008814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008818:	691a      	ldr	r2, [r3, #16]
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	695b      	ldr	r3, [r3, #20]
 800881e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008822:	6939      	ldr	r1, [r7, #16]
 8008824:	0148      	lsls	r0, r1, #5
 8008826:	6979      	ldr	r1, [r7, #20]
 8008828:	4401      	add	r1, r0
 800882a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800882e:	4313      	orrs	r3, r2
 8008830:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	78db      	ldrb	r3, [r3, #3]
 8008836:	2b01      	cmp	r3, #1
 8008838:	d11f      	bne.n	800887a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	015a      	lsls	r2, r3, #5
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	4413      	add	r3, r2
 8008842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	0151      	lsls	r1, r2, #5
 800884c:	697a      	ldr	r2, [r7, #20]
 800884e:	440a      	add	r2, r1
 8008850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008854:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008858:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	015a      	lsls	r2, r3, #5
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	4413      	add	r3, r2
 8008862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	693a      	ldr	r2, [r7, #16]
 800886a:	0151      	lsls	r1, r2, #5
 800886c:	697a      	ldr	r2, [r7, #20]
 800886e:	440a      	add	r2, r1
 8008870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008874:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008878:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	015a      	lsls	r2, r3, #5
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	4413      	add	r3, r2
 8008882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	0151      	lsls	r1, r2, #5
 800888c:	697a      	ldr	r2, [r7, #20]
 800888e:	440a      	add	r2, r1
 8008890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008894:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008898:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	78db      	ldrb	r3, [r3, #3]
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d015      	beq.n	80088ce <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	695b      	ldr	r3, [r3, #20]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	f000 8100 	beq.w	8008aac <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	f003 030f 	and.w	r3, r3, #15
 80088bc:	2101      	movs	r1, #1
 80088be:	fa01 f303 	lsl.w	r3, r1, r3
 80088c2:	6979      	ldr	r1, [r7, #20]
 80088c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088c8:	4313      	orrs	r3, r2
 80088ca:	634b      	str	r3, [r1, #52]	; 0x34
 80088cc:	e0ee      	b.n	8008aac <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d110      	bne.n	8008900 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	015a      	lsls	r2, r3, #5
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	4413      	add	r3, r2
 80088e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	693a      	ldr	r2, [r7, #16]
 80088ee:	0151      	lsls	r1, r2, #5
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	440a      	add	r2, r1
 80088f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80088fc:	6013      	str	r3, [r2, #0]
 80088fe:	e00f      	b.n	8008920 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	015a      	lsls	r2, r3, #5
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	4413      	add	r3, r2
 8008908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	693a      	ldr	r2, [r7, #16]
 8008910:	0151      	lsls	r1, r2, #5
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	440a      	add	r2, r1
 8008916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800891a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800891e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	68d9      	ldr	r1, [r3, #12]
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	781a      	ldrb	r2, [r3, #0]
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	695b      	ldr	r3, [r3, #20]
 800892c:	b29b      	uxth	r3, r3
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f9e2 	bl	8008cf8 <USB_WritePacket>
 8008934:	e0ba      	b.n	8008aac <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	015a      	lsls	r2, r3, #5
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	4413      	add	r3, r2
 800893e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	0151      	lsls	r1, r2, #5
 8008948:	697a      	ldr	r2, [r7, #20]
 800894a:	440a      	add	r2, r1
 800894c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008950:	0cdb      	lsrs	r3, r3, #19
 8008952:	04db      	lsls	r3, r3, #19
 8008954:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	015a      	lsls	r2, r3, #5
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	4413      	add	r3, r2
 800895e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	0151      	lsls	r1, r2, #5
 8008968:	697a      	ldr	r2, [r7, #20]
 800896a:	440a      	add	r2, r1
 800896c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008970:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008974:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008978:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	695b      	ldr	r3, [r3, #20]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d123      	bne.n	80089ca <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	015a      	lsls	r2, r3, #5
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	4413      	add	r3, r2
 800898a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800898e:	691a      	ldr	r2, [r3, #16]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008998:	6939      	ldr	r1, [r7, #16]
 800899a:	0148      	lsls	r0, r1, #5
 800899c:	6979      	ldr	r1, [r7, #20]
 800899e:	4401      	add	r1, r0
 80089a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80089a4:	4313      	orrs	r3, r2
 80089a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	015a      	lsls	r2, r3, #5
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	4413      	add	r3, r2
 80089b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	693a      	ldr	r2, [r7, #16]
 80089b8:	0151      	lsls	r1, r2, #5
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	440a      	add	r2, r1
 80089be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089c6:	6113      	str	r3, [r2, #16]
 80089c8:	e033      	b.n	8008a32 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	695a      	ldr	r2, [r3, #20]
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	4413      	add	r3, r2
 80089d4:	1e5a      	subs	r2, r3, #1
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	fbb2 f3f3 	udiv	r3, r2, r3
 80089de:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	015a      	lsls	r2, r3, #5
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	4413      	add	r3, r2
 80089e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ec:	691a      	ldr	r2, [r3, #16]
 80089ee:	89fb      	ldrh	r3, [r7, #14]
 80089f0:	04d9      	lsls	r1, r3, #19
 80089f2:	4b31      	ldr	r3, [pc, #196]	; (8008ab8 <USB_EPStartXfer+0x3b4>)
 80089f4:	400b      	ands	r3, r1
 80089f6:	6939      	ldr	r1, [r7, #16]
 80089f8:	0148      	lsls	r0, r1, #5
 80089fa:	6979      	ldr	r1, [r7, #20]
 80089fc:	4401      	add	r1, r0
 80089fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008a02:	4313      	orrs	r3, r2
 8008a04:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	015a      	lsls	r2, r3, #5
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a12:	691a      	ldr	r2, [r3, #16]
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	89f9      	ldrh	r1, [r7, #14]
 8008a1a:	fb01 f303 	mul.w	r3, r1, r3
 8008a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a22:	6939      	ldr	r1, [r7, #16]
 8008a24:	0148      	lsls	r0, r1, #5
 8008a26:	6979      	ldr	r1, [r7, #20]
 8008a28:	4401      	add	r1, r0
 8008a2a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	78db      	ldrb	r3, [r3, #3]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d128      	bne.n	8008a8c <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d110      	bne.n	8008a6c <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	015a      	lsls	r2, r3, #5
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	4413      	add	r3, r2
 8008a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	0151      	lsls	r1, r2, #5
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	440a      	add	r2, r1
 8008a60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a68:	6013      	str	r3, [r2, #0]
 8008a6a:	e00f      	b.n	8008a8c <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	015a      	lsls	r2, r3, #5
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	4413      	add	r3, r2
 8008a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	0151      	lsls	r1, r2, #5
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	440a      	add	r2, r1
 8008a82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a8a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	015a      	lsls	r2, r3, #5
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	4413      	add	r3, r2
 8008a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	693a      	ldr	r2, [r7, #16]
 8008a9c:	0151      	lsls	r1, r2, #5
 8008a9e:	697a      	ldr	r2, [r7, #20]
 8008aa0:	440a      	add	r2, r1
 8008aa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008aa6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008aaa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3718      	adds	r7, #24
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	1ff80000 	.word	0x1ff80000

08008abc <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	785b      	ldrb	r3, [r3, #1]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	f040 80ab 	bne.w	8008c30 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	695b      	ldr	r3, [r3, #20]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d132      	bne.n	8008b48 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	015a      	lsls	r2, r3, #5
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	4413      	add	r3, r2
 8008aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	68ba      	ldr	r2, [r7, #8]
 8008af2:	0151      	lsls	r1, r2, #5
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	440a      	add	r2, r1
 8008af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008afc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	015a      	lsls	r2, r3, #5
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b12:	691b      	ldr	r3, [r3, #16]
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	0151      	lsls	r1, r2, #5
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	440a      	add	r2, r1
 8008b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	015a      	lsls	r2, r3, #5
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b32:	691b      	ldr	r3, [r3, #16]
 8008b34:	68ba      	ldr	r2, [r7, #8]
 8008b36:	0151      	lsls	r1, r2, #5
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	440a      	add	r2, r1
 8008b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b40:	0cdb      	lsrs	r3, r3, #19
 8008b42:	04db      	lsls	r3, r3, #19
 8008b44:	6113      	str	r3, [r2, #16]
 8008b46:	e04e      	b.n	8008be6 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	015a      	lsls	r2, r3, #5
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	4413      	add	r3, r2
 8008b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	68ba      	ldr	r2, [r7, #8]
 8008b58:	0151      	lsls	r1, r2, #5
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	440a      	add	r2, r1
 8008b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b62:	0cdb      	lsrs	r3, r3, #19
 8008b64:	04db      	lsls	r3, r3, #19
 8008b66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	015a      	lsls	r2, r3, #5
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	4413      	add	r3, r2
 8008b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	0151      	lsls	r1, r2, #5
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	440a      	add	r2, r1
 8008b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b82:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b86:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b8a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	695a      	ldr	r2, [r3, #20]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d903      	bls.n	8008ba0 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	689a      	ldr	r2, [r3, #8]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	015a      	lsls	r2, r3, #5
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	0151      	lsls	r1, r2, #5
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	440a      	add	r2, r1
 8008bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008bbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	015a      	lsls	r2, r3, #5
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bcc:	691a      	ldr	r2, [r3, #16]
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	695b      	ldr	r3, [r3, #20]
 8008bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bd6:	68b9      	ldr	r1, [r7, #8]
 8008bd8:	0148      	lsls	r0, r1, #5
 8008bda:	68f9      	ldr	r1, [r7, #12]
 8008bdc:	4401      	add	r1, r0
 8008bde:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008be2:	4313      	orrs	r3, r2
 8008be4:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	015a      	lsls	r2, r3, #5
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	4413      	add	r3, r2
 8008bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68ba      	ldr	r2, [r7, #8]
 8008bf6:	0151      	lsls	r1, r2, #5
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	440a      	add	r2, r1
 8008bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c04:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	695b      	ldr	r3, [r3, #20]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d06d      	beq.n	8008cea <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	f003 030f 	and.w	r3, r3, #15
 8008c1e:	2101      	movs	r1, #1
 8008c20:	fa01 f303 	lsl.w	r3, r1, r3
 8008c24:	68f9      	ldr	r1, [r7, #12]
 8008c26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	634b      	str	r3, [r1, #52]	; 0x34
 8008c2e:	e05c      	b.n	8008cea <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	015a      	lsls	r2, r3, #5
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	4413      	add	r3, r2
 8008c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	68ba      	ldr	r2, [r7, #8]
 8008c40:	0151      	lsls	r1, r2, #5
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	440a      	add	r2, r1
 8008c46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c4a:	0cdb      	lsrs	r3, r3, #19
 8008c4c:	04db      	lsls	r3, r3, #19
 8008c4e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	015a      	lsls	r2, r3, #5
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	4413      	add	r3, r2
 8008c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	68ba      	ldr	r2, [r7, #8]
 8008c60:	0151      	lsls	r1, r2, #5
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	440a      	add	r2, r1
 8008c66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c72:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	695b      	ldr	r3, [r3, #20]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d003      	beq.n	8008c84 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	689a      	ldr	r2, [r3, #8]
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	015a      	lsls	r2, r3, #5
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	68ba      	ldr	r2, [r7, #8]
 8008c94:	0151      	lsls	r1, r2, #5
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	440a      	add	r2, r1
 8008c9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ca2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	015a      	lsls	r2, r3, #5
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	4413      	add	r3, r2
 8008cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cb0:	691a      	ldr	r2, [r3, #16]
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cba:	68b9      	ldr	r1, [r7, #8]
 8008cbc:	0148      	lsls	r0, r1, #5
 8008cbe:	68f9      	ldr	r1, [r7, #12]
 8008cc0:	4401      	add	r1, r0
 8008cc2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	015a      	lsls	r2, r3, #5
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	0151      	lsls	r1, r2, #5
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	440a      	add	r2, r1
 8008ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ce4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ce8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3714      	adds	r7, #20
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b089      	sub	sp, #36	; 0x24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	4611      	mov	r1, r2
 8008d04:	461a      	mov	r2, r3
 8008d06:	460b      	mov	r3, r1
 8008d08:	71fb      	strb	r3, [r7, #7]
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8008d16:	88bb      	ldrh	r3, [r7, #4]
 8008d18:	3303      	adds	r3, #3
 8008d1a:	089b      	lsrs	r3, r3, #2
 8008d1c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8008d1e:	2300      	movs	r3, #0
 8008d20:	61bb      	str	r3, [r7, #24]
 8008d22:	e00f      	b.n	8008d44 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008d24:	79fb      	ldrb	r3, [r7, #7]
 8008d26:	031a      	lsls	r2, r3, #12
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d30:	461a      	mov	r2, r3
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	6013      	str	r3, [r2, #0]
    pSrc++;
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	3304      	adds	r3, #4
 8008d3c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	3301      	adds	r3, #1
 8008d42:	61bb      	str	r3, [r7, #24]
 8008d44:	69ba      	ldr	r2, [r7, #24]
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d3eb      	bcc.n	8008d24 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3724      	adds	r7, #36	; 0x24
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b089      	sub	sp, #36	; 0x24
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	60f8      	str	r0, [r7, #12]
 8008d62:	60b9      	str	r1, [r7, #8]
 8008d64:	4613      	mov	r3, r2
 8008d66:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008d70:	88fb      	ldrh	r3, [r7, #6]
 8008d72:	3303      	adds	r3, #3
 8008d74:	089b      	lsrs	r3, r3, #2
 8008d76:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008d78:	2300      	movs	r3, #0
 8008d7a:	61bb      	str	r3, [r7, #24]
 8008d7c:	e00b      	b.n	8008d96 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	601a      	str	r2, [r3, #0]
    pDest++;
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	3301      	adds	r3, #1
 8008d94:	61bb      	str	r3, [r7, #24]
 8008d96:	69ba      	ldr	r2, [r7, #24]
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d3ef      	bcc.n	8008d7e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008d9e:	69fb      	ldr	r3, [r7, #28]
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3724      	adds	r7, #36	; 0x24
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b085      	sub	sp, #20
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	785b      	ldrb	r3, [r3, #1]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d12c      	bne.n	8008e22 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	015a      	lsls	r2, r3, #5
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	4413      	add	r3, r2
 8008dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	db12      	blt.n	8008e00 <USB_EPSetStall+0x54>
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00f      	beq.n	8008e00 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	015a      	lsls	r2, r3, #5
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	4413      	add	r3, r2
 8008de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	68ba      	ldr	r2, [r7, #8]
 8008df0:	0151      	lsls	r1, r2, #5
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	440a      	add	r2, r1
 8008df6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dfa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008dfe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	015a      	lsls	r2, r3, #5
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	4413      	add	r3, r2
 8008e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	68ba      	ldr	r2, [r7, #8]
 8008e10:	0151      	lsls	r1, r2, #5
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	440a      	add	r2, r1
 8008e16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e1e:	6013      	str	r3, [r2, #0]
 8008e20:	e02b      	b.n	8008e7a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	015a      	lsls	r2, r3, #5
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	4413      	add	r3, r2
 8008e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	db12      	blt.n	8008e5a <USB_EPSetStall+0xae>
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00f      	beq.n	8008e5a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	015a      	lsls	r2, r3, #5
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	4413      	add	r3, r2
 8008e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68ba      	ldr	r2, [r7, #8]
 8008e4a:	0151      	lsls	r1, r2, #5
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	440a      	add	r2, r1
 8008e50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e58:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	015a      	lsls	r2, r3, #5
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	4413      	add	r3, r2
 8008e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	0151      	lsls	r1, r2, #5
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	440a      	add	r2, r1
 8008e70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e78:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3714      	adds	r7, #20
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	785b      	ldrb	r3, [r3, #1]
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d128      	bne.n	8008ef6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	015a      	lsls	r2, r3, #5
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	4413      	add	r3, r2
 8008eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68ba      	ldr	r2, [r7, #8]
 8008eb4:	0151      	lsls	r1, r2, #5
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	440a      	add	r2, r1
 8008eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ebe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ec2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	78db      	ldrb	r3, [r3, #3]
 8008ec8:	2b03      	cmp	r3, #3
 8008eca:	d003      	beq.n	8008ed4 <USB_EPClearStall+0x4c>
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	78db      	ldrb	r3, [r3, #3]
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d138      	bne.n	8008f46 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	015a      	lsls	r2, r3, #5
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	4413      	add	r3, r2
 8008edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	0151      	lsls	r1, r2, #5
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	440a      	add	r2, r1
 8008eea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ef2:	6013      	str	r3, [r2, #0]
 8008ef4:	e027      	b.n	8008f46 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	015a      	lsls	r2, r3, #5
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	4413      	add	r3, r2
 8008efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68ba      	ldr	r2, [r7, #8]
 8008f06:	0151      	lsls	r1, r2, #5
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	440a      	add	r2, r1
 8008f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f14:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	78db      	ldrb	r3, [r3, #3]
 8008f1a:	2b03      	cmp	r3, #3
 8008f1c:	d003      	beq.n	8008f26 <USB_EPClearStall+0x9e>
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	78db      	ldrb	r3, [r3, #3]
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d10f      	bne.n	8008f46 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	015a      	lsls	r2, r3, #5
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68ba      	ldr	r2, [r7, #8]
 8008f36:	0151      	lsls	r1, r2, #5
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	440a      	add	r2, r1
 8008f3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f44:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3714      	adds	r7, #20
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f72:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008f76:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	78fb      	ldrb	r3, [r7, #3]
 8008f82:	011b      	lsls	r3, r3, #4
 8008f84:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008f88:	68f9      	ldr	r1, [r7, #12]
 8008f8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3714      	adds	r7, #20
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008fba:	f023 0303 	bic.w	r3, r3, #3
 8008fbe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fce:	f023 0302 	bic.w	r3, r3, #2
 8008fd2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3714      	adds	r7, #20
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr

08008fe2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008fe2:	b480      	push	{r7}
 8008fe4:	b085      	sub	sp, #20
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ffc:	f023 0303 	bic.w	r3, r3, #3
 8009000:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	68fa      	ldr	r2, [r7, #12]
 800900c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009010:	f043 0302 	orr.w	r3, r3, #2
 8009014:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3714      	adds	r7, #20
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009024:	b480      	push	{r7}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	695b      	ldr	r3, [r3, #20]
 8009030:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	699b      	ldr	r3, [r3, #24]
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	4013      	ands	r3, r2
 800903a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800903c:	68fb      	ldr	r3, [r7, #12]
}
 800903e:	4618      	mov	r0, r3
 8009040:	3714      	adds	r7, #20
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr

0800904a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800904a:	b480      	push	{r7}
 800904c:	b085      	sub	sp, #20
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800905c:	699b      	ldr	r3, [r3, #24]
 800905e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009066:	69db      	ldr	r3, [r3, #28]
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	4013      	ands	r3, r2
 800906c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	0c1b      	lsrs	r3, r3, #16
}
 8009072:	4618      	mov	r0, r3
 8009074:	3714      	adds	r7, #20
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr

0800907e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800907e:	b480      	push	{r7}
 8009080:	b085      	sub	sp, #20
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009090:	699b      	ldr	r3, [r3, #24]
 8009092:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800909a:	69db      	ldr	r3, [r3, #28]
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	4013      	ands	r3, r2
 80090a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	b29b      	uxth	r3, r3
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3714      	adds	r7, #20
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr

080090b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b085      	sub	sp, #20
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
 80090ba:	460b      	mov	r3, r1
 80090bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80090c2:	78fb      	ldrb	r3, [r7, #3]
 80090c4:	015a      	lsls	r2, r3, #5
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	4413      	add	r3, r2
 80090ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090d8:	695b      	ldr	r3, [r3, #20]
 80090da:	68ba      	ldr	r2, [r7, #8]
 80090dc:	4013      	ands	r3, r2
 80090de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80090e0:	68bb      	ldr	r3, [r7, #8]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3714      	adds	r7, #20
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr

080090ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80090ee:	b480      	push	{r7}
 80090f0:	b087      	sub	sp, #28
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
 80090f6:	460b      	mov	r3, r1
 80090f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800910e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009110:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009112:	78fb      	ldrb	r3, [r7, #3]
 8009114:	f003 030f 	and.w	r3, r3, #15
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	fa22 f303 	lsr.w	r3, r2, r3
 800911e:	01db      	lsls	r3, r3, #7
 8009120:	b2db      	uxtb	r3, r3
 8009122:	693a      	ldr	r2, [r7, #16]
 8009124:	4313      	orrs	r3, r2
 8009126:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009128:	78fb      	ldrb	r3, [r7, #3]
 800912a:	015a      	lsls	r2, r3, #5
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	4413      	add	r3, r2
 8009130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	693a      	ldr	r2, [r7, #16]
 8009138:	4013      	ands	r3, r2
 800913a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800913c:	68bb      	ldr	r3, [r7, #8]
}
 800913e:	4618      	mov	r0, r3
 8009140:	371c      	adds	r7, #28
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr

0800914a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800914a:	b480      	push	{r7}
 800914c:	b083      	sub	sp, #12
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	695b      	ldr	r3, [r3, #20]
 8009156:	f003 0301 	and.w	r3, r3, #1
}
 800915a:	4618      	mov	r0, r3
 800915c:	370c      	adds	r7, #12
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr

08009166 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009166:	b480      	push	{r7}
 8009168:	b085      	sub	sp, #20
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009180:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009184:	f023 0307 	bic.w	r3, r3, #7
 8009188:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800919c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3714      	adds	r7, #20
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	333c      	adds	r3, #60	; 0x3c
 80091be:	3304      	adds	r3, #4
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	4a1c      	ldr	r2, [pc, #112]	; (8009238 <USB_EP0_OutStart+0x8c>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d90a      	bls.n	80091e2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091dc:	d101      	bne.n	80091e2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80091de:	2300      	movs	r3, #0
 80091e0:	e024      	b.n	800922c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091e8:	461a      	mov	r2, r3
 80091ea:	2300      	movs	r3, #0
 80091ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009200:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009210:	f043 0318 	orr.w	r3, r3, #24
 8009214:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009224:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009228:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800922a:	2300      	movs	r3, #0
}
 800922c:	4618      	mov	r0, r3
 800922e:	3714      	adds	r7, #20
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr
 8009238:	4f54300a 	.word	0x4f54300a

0800923c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009244:	2300      	movs	r3, #0
 8009246:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	3301      	adds	r3, #1
 800924c:	60fb      	str	r3, [r7, #12]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	4a13      	ldr	r2, [pc, #76]	; (80092a0 <USB_CoreReset+0x64>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d901      	bls.n	800925a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009256:	2303      	movs	r3, #3
 8009258:	e01b      	b.n	8009292 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	2b00      	cmp	r3, #0
 8009260:	daf2      	bge.n	8009248 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009262:	2300      	movs	r3, #0
 8009264:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	691b      	ldr	r3, [r3, #16]
 800926a:	f043 0201 	orr.w	r2, r3, #1
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	3301      	adds	r3, #1
 8009276:	60fb      	str	r3, [r7, #12]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	4a09      	ldr	r2, [pc, #36]	; (80092a0 <USB_CoreReset+0x64>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d901      	bls.n	8009284 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009280:	2303      	movs	r3, #3
 8009282:	e006      	b.n	8009292 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	f003 0301 	and.w	r3, r3, #1
 800928c:	2b01      	cmp	r3, #1
 800928e:	d0f0      	beq.n	8009272 <USB_CoreReset+0x36>

  return HAL_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3714      	adds	r7, #20
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop
 80092a0:	00030d40 	.word	0x00030d40

080092a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	460b      	mov	r3, r1
 80092ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80092b0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80092b4:	f003 fb24 	bl	800c900 <malloc>
 80092b8:	4603      	mov	r3, r0
 80092ba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d105      	bne.n	80092ce <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80092ca:	2302      	movs	r3, #2
 80092cc:	e066      	b.n	800939c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	7c1b      	ldrb	r3, [r3, #16]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d119      	bne.n	8009312 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80092de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092e2:	2202      	movs	r2, #2
 80092e4:	2181      	movs	r1, #129	; 0x81
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f001 ffbc 	bl	800b264 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80092f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092f6:	2202      	movs	r2, #2
 80092f8:	2101      	movs	r1, #1
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f001 ffb2 	bl	800b264 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2210      	movs	r2, #16
 800930c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009310:	e016      	b.n	8009340 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009312:	2340      	movs	r3, #64	; 0x40
 8009314:	2202      	movs	r2, #2
 8009316:	2181      	movs	r1, #129	; 0x81
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f001 ffa3 	bl	800b264 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2201      	movs	r2, #1
 8009322:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009324:	2340      	movs	r3, #64	; 0x40
 8009326:	2202      	movs	r2, #2
 8009328:	2101      	movs	r1, #1
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f001 ff9a 	bl	800b264 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2210      	movs	r2, #16
 800933c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009340:	2308      	movs	r3, #8
 8009342:	2203      	movs	r2, #3
 8009344:	2182      	movs	r1, #130	; 0x82
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f001 ff8c 	bl	800b264 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2200      	movs	r2, #0
 8009362:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	7c1b      	ldrb	r3, [r3, #16]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d109      	bne.n	800938a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800937c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009380:	2101      	movs	r1, #1
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f002 f8e8 	bl	800b558 <USBD_LL_PrepareReceive>
 8009388:	e007      	b.n	800939a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009390:	2340      	movs	r3, #64	; 0x40
 8009392:	2101      	movs	r1, #1
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f002 f8df 	bl	800b558 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	460b      	mov	r3, r1
 80093ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80093b0:	2181      	movs	r1, #129	; 0x81
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f001 ff94 	bl	800b2e0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80093be:	2101      	movs	r1, #1
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f001 ff8d 	bl	800b2e0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80093ce:	2182      	movs	r1, #130	; 0x82
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f001 ff85 	bl	800b2e0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00e      	beq.n	800940e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009400:	4618      	mov	r0, r3
 8009402:	f003 fa85 	bl	800c910 <free>
    pdev->pClassData = NULL;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	3708      	adds	r7, #8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b086      	sub	sp, #24
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009428:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800942a:	2300      	movs	r3, #0
 800942c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800942e:	2300      	movs	r3, #0
 8009430:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8009432:	2300      	movs	r3, #0
 8009434:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800943e:	2b00      	cmp	r3, #0
 8009440:	d03a      	beq.n	80094b8 <USBD_CDC_Setup+0xa0>
 8009442:	2b20      	cmp	r3, #32
 8009444:	f040 8097 	bne.w	8009576 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	88db      	ldrh	r3, [r3, #6]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d029      	beq.n	80094a4 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	b25b      	sxtb	r3, r3
 8009456:	2b00      	cmp	r3, #0
 8009458:	da11      	bge.n	800947e <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009466:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009468:	683a      	ldr	r2, [r7, #0]
 800946a:	88d2      	ldrh	r2, [r2, #6]
 800946c:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800946e:	6939      	ldr	r1, [r7, #16]
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	88db      	ldrh	r3, [r3, #6]
 8009474:	461a      	mov	r2, r3
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f001 fa9f 	bl	800a9ba <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800947c:	e082      	b.n	8009584 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	785a      	ldrb	r2, [r3, #1]
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	88db      	ldrh	r3, [r3, #6]
 800948c:	b2da      	uxtb	r2, r3
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009494:	6939      	ldr	r1, [r7, #16]
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	88db      	ldrh	r3, [r3, #6]
 800949a:	461a      	mov	r2, r3
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f001 fab8 	bl	800aa12 <USBD_CtlPrepareRx>
      break;
 80094a2:	e06f      	b.n	8009584 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	683a      	ldr	r2, [r7, #0]
 80094ae:	7850      	ldrb	r0, [r2, #1]
 80094b0:	2200      	movs	r2, #0
 80094b2:	6839      	ldr	r1, [r7, #0]
 80094b4:	4798      	blx	r3
      break;
 80094b6:	e065      	b.n	8009584 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	785b      	ldrb	r3, [r3, #1]
 80094bc:	2b0b      	cmp	r3, #11
 80094be:	d84f      	bhi.n	8009560 <USBD_CDC_Setup+0x148>
 80094c0:	a201      	add	r2, pc, #4	; (adr r2, 80094c8 <USBD_CDC_Setup+0xb0>)
 80094c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c6:	bf00      	nop
 80094c8:	080094f9 	.word	0x080094f9
 80094cc:	0800956f 	.word	0x0800956f
 80094d0:	08009561 	.word	0x08009561
 80094d4:	08009561 	.word	0x08009561
 80094d8:	08009561 	.word	0x08009561
 80094dc:	08009561 	.word	0x08009561
 80094e0:	08009561 	.word	0x08009561
 80094e4:	08009561 	.word	0x08009561
 80094e8:	08009561 	.word	0x08009561
 80094ec:	08009561 	.word	0x08009561
 80094f0:	08009521 	.word	0x08009521
 80094f4:	08009549 	.word	0x08009549
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094fe:	2b03      	cmp	r3, #3
 8009500:	d107      	bne.n	8009512 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009502:	f107 030c 	add.w	r3, r7, #12
 8009506:	2202      	movs	r2, #2
 8009508:	4619      	mov	r1, r3
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f001 fa55 	bl	800a9ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009510:	e030      	b.n	8009574 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8009512:	6839      	ldr	r1, [r7, #0]
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f001 f9df 	bl	800a8d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800951a:	2303      	movs	r3, #3
 800951c:	75fb      	strb	r3, [r7, #23]
          break;
 800951e:	e029      	b.n	8009574 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009526:	2b03      	cmp	r3, #3
 8009528:	d107      	bne.n	800953a <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800952a:	f107 030f 	add.w	r3, r7, #15
 800952e:	2201      	movs	r2, #1
 8009530:	4619      	mov	r1, r3
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f001 fa41 	bl	800a9ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009538:	e01c      	b.n	8009574 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800953a:	6839      	ldr	r1, [r7, #0]
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f001 f9cb 	bl	800a8d8 <USBD_CtlError>
            ret = USBD_FAIL;
 8009542:	2303      	movs	r3, #3
 8009544:	75fb      	strb	r3, [r7, #23]
          break;
 8009546:	e015      	b.n	8009574 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800954e:	2b03      	cmp	r3, #3
 8009550:	d00f      	beq.n	8009572 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8009552:	6839      	ldr	r1, [r7, #0]
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f001 f9bf 	bl	800a8d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800955a:	2303      	movs	r3, #3
 800955c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800955e:	e008      	b.n	8009572 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009560:	6839      	ldr	r1, [r7, #0]
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f001 f9b8 	bl	800a8d8 <USBD_CtlError>
          ret = USBD_FAIL;
 8009568:	2303      	movs	r3, #3
 800956a:	75fb      	strb	r3, [r7, #23]
          break;
 800956c:	e002      	b.n	8009574 <USBD_CDC_Setup+0x15c>
          break;
 800956e:	bf00      	nop
 8009570:	e008      	b.n	8009584 <USBD_CDC_Setup+0x16c>
          break;
 8009572:	bf00      	nop
      }
      break;
 8009574:	e006      	b.n	8009584 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8009576:	6839      	ldr	r1, [r7, #0]
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f001 f9ad 	bl	800a8d8 <USBD_CtlError>
      ret = USBD_FAIL;
 800957e:	2303      	movs	r3, #3
 8009580:	75fb      	strb	r3, [r7, #23]
      break;
 8009582:	bf00      	nop
  }

  return (uint8_t)ret;
 8009584:	7dfb      	ldrb	r3, [r7, #23]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3718      	adds	r7, #24
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop

08009590 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	460b      	mov	r3, r1
 800959a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d101      	bne.n	80095b2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80095ae:	2303      	movs	r3, #3
 80095b0:	e04f      	b.n	8009652 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80095ba:	78fa      	ldrb	r2, [r7, #3]
 80095bc:	6879      	ldr	r1, [r7, #4]
 80095be:	4613      	mov	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4413      	add	r3, r2
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	440b      	add	r3, r1
 80095c8:	3318      	adds	r3, #24
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d029      	beq.n	8009624 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80095d0:	78fa      	ldrb	r2, [r7, #3]
 80095d2:	6879      	ldr	r1, [r7, #4]
 80095d4:	4613      	mov	r3, r2
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	4413      	add	r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	440b      	add	r3, r1
 80095de:	3318      	adds	r3, #24
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	78f9      	ldrb	r1, [r7, #3]
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	460b      	mov	r3, r1
 80095e8:	00db      	lsls	r3, r3, #3
 80095ea:	1a5b      	subs	r3, r3, r1
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	4403      	add	r3, r0
 80095f0:	3344      	adds	r3, #68	; 0x44
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80095f8:	fb03 f301 	mul.w	r3, r3, r1
 80095fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d110      	bne.n	8009624 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009602:	78fa      	ldrb	r2, [r7, #3]
 8009604:	6879      	ldr	r1, [r7, #4]
 8009606:	4613      	mov	r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	4413      	add	r3, r2
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	440b      	add	r3, r1
 8009610:	3318      	adds	r3, #24
 8009612:	2200      	movs	r2, #0
 8009614:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009616:	78f9      	ldrb	r1, [r7, #3]
 8009618:	2300      	movs	r3, #0
 800961a:	2200      	movs	r2, #0
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f001 ff63 	bl	800b4e8 <USBD_LL_Transmit>
 8009622:	e015      	b.n	8009650 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	2200      	movs	r2, #0
 8009628:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00b      	beq.n	8009650 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	68ba      	ldr	r2, [r7, #8]
 8009642:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009646:	68ba      	ldr	r2, [r7, #8]
 8009648:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800964c:	78fa      	ldrb	r2, [r7, #3]
 800964e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009650:	2300      	movs	r3, #0
}
 8009652:	4618      	mov	r0, r3
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b084      	sub	sp, #16
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
 8009662:	460b      	mov	r3, r1
 8009664:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800966c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009674:	2b00      	cmp	r3, #0
 8009676:	d101      	bne.n	800967c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009678:	2303      	movs	r3, #3
 800967a:	e015      	b.n	80096a8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800967c:	78fb      	ldrb	r3, [r7, #3]
 800967e:	4619      	mov	r1, r3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f001 ffa1 	bl	800b5c8 <USBD_LL_GetRxDataSize>
 8009686:	4602      	mov	r2, r0
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80096a2:	4611      	mov	r1, r2
 80096a4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096be:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d015      	beq.n	80096f6 <USBD_CDC_EP0_RxReady+0x46>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80096d0:	2bff      	cmp	r3, #255	; 0xff
 80096d2:	d010      	beq.n	80096f6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80096e2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80096ea:	b292      	uxth	r2, r2
 80096ec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	22ff      	movs	r2, #255	; 0xff
 80096f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80096f6:	2300      	movs	r3, #0
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2243      	movs	r2, #67	; 0x43
 800970c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800970e:	4b03      	ldr	r3, [pc, #12]	; (800971c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009710:	4618      	mov	r0, r3
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr
 800971c:	20000094 	.word	0x20000094

08009720 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2243      	movs	r2, #67	; 0x43
 800972c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800972e:	4b03      	ldr	r3, [pc, #12]	; (800973c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009730:	4618      	mov	r0, r3
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	20000050 	.word	0x20000050

08009740 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2243      	movs	r2, #67	; 0x43
 800974c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800974e:	4b03      	ldr	r3, [pc, #12]	; (800975c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009750:	4618      	mov	r0, r3
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr
 800975c:	200000d8 	.word	0x200000d8

08009760 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	220a      	movs	r2, #10
 800976c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800976e:	4b03      	ldr	r3, [pc, #12]	; (800977c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009770:	4618      	mov	r0, r3
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	2000000c 	.word	0x2000000c

08009780 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d101      	bne.n	8009794 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009790:	2303      	movs	r3, #3
 8009792:	e004      	b.n	800979e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	683a      	ldr	r2, [r7, #0]
 8009798:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	370c      	adds	r7, #12
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr

080097aa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80097aa:	b480      	push	{r7}
 80097ac:	b087      	sub	sp, #28
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	60f8      	str	r0, [r7, #12]
 80097b2:	60b9      	str	r1, [r7, #8]
 80097b4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097bc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	371c      	adds	r7, #28
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80097dc:	b480      	push	{r7}
 80097de:	b085      	sub	sp, #20
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097ec:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	683a      	ldr	r2, [r7, #0]
 80097f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3714      	adds	r7, #20
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009812:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800981a:	2b00      	cmp	r3, #0
 800981c:	d101      	bne.n	8009822 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800981e:	2303      	movs	r3, #3
 8009820:	e016      	b.n	8009850 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	7c1b      	ldrb	r3, [r3, #16]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d109      	bne.n	800983e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009830:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009834:	2101      	movs	r1, #1
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f001 fe8e 	bl	800b558 <USBD_LL_PrepareReceive>
 800983c:	e007      	b.n	800984e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009844:	2340      	movs	r3, #64	; 0x40
 8009846:	2101      	movs	r1, #1
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f001 fe85 	bl	800b558 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800984e:	2300      	movs	r3, #0
}
 8009850:	4618      	mov	r0, r3
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b086      	sub	sp, #24
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	4613      	mov	r3, r2
 8009864:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d101      	bne.n	8009870 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800986c:	2303      	movs	r3, #3
 800986e:	e01f      	b.n	80098b0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2200      	movs	r2, #0
 8009874:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2200      	movs	r2, #0
 800987c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2200      	movs	r2, #0
 8009884:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d003      	beq.n	8009896 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2201      	movs	r2, #1
 800989a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	79fa      	ldrb	r2, [r7, #7]
 80098a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	f001 fc61 	bl	800b16c <USBD_LL_Init>
 80098aa:	4603      	mov	r3, r0
 80098ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80098ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3718      	adds	r7, #24
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80098c2:	2300      	movs	r3, #0
 80098c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d101      	bne.n	80098d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80098cc:	2303      	movs	r3, #3
 80098ce:	e016      	b.n	80098fe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	683a      	ldr	r2, [r7, #0]
 80098d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d00b      	beq.n	80098fc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ec:	f107 020e 	add.w	r2, r7, #14
 80098f0:	4610      	mov	r0, r2
 80098f2:	4798      	blx	r3
 80098f4:	4602      	mov	r2, r0
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3710      	adds	r7, #16
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b082      	sub	sp, #8
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f001 fc76 	bl	800b200 <USBD_LL_Start>
 8009914:	4603      	mov	r3, r0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3708      	adds	r7, #8
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800991e:	b480      	push	{r7}
 8009920:	b083      	sub	sp, #12
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	460b      	mov	r3, r1
 800993e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009940:	2303      	movs	r3, #3
 8009942:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800994a:	2b00      	cmp	r3, #0
 800994c:	d009      	beq.n	8009962 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	78fa      	ldrb	r2, [r7, #3]
 8009958:	4611      	mov	r1, r2
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	4798      	blx	r3
 800995e:	4603      	mov	r3, r0
 8009960:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009962:	7bfb      	ldrb	r3, [r7, #15]
}
 8009964:	4618      	mov	r0, r3
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	460b      	mov	r3, r1
 8009976:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800997e:	2b00      	cmp	r3, #0
 8009980:	d007      	beq.n	8009992 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	78fa      	ldrb	r2, [r7, #3]
 800998c:	4611      	mov	r1, r2
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	4798      	blx	r3
  }

  return USBD_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3708      	adds	r7, #8
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80099ac:	6839      	ldr	r1, [r7, #0]
 80099ae:	4618      	mov	r0, r3
 80099b0:	f000 ff58 	bl	800a864 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80099c2:	461a      	mov	r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80099d0:	f003 031f 	and.w	r3, r3, #31
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d00e      	beq.n	80099f6 <USBD_LL_SetupStage+0x5a>
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d302      	bcc.n	80099e2 <USBD_LL_SetupStage+0x46>
 80099dc:	2b02      	cmp	r3, #2
 80099de:	d014      	beq.n	8009a0a <USBD_LL_SetupStage+0x6e>
 80099e0:	e01d      	b.n	8009a1e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80099e8:	4619      	mov	r1, r3
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 fa18 	bl	8009e20 <USBD_StdDevReq>
 80099f0:	4603      	mov	r3, r0
 80099f2:	73fb      	strb	r3, [r7, #15]
      break;
 80099f4:	e020      	b.n	8009a38 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80099fc:	4619      	mov	r1, r3
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 fa7c 	bl	8009efc <USBD_StdItfReq>
 8009a04:	4603      	mov	r3, r0
 8009a06:	73fb      	strb	r3, [r7, #15]
      break;
 8009a08:	e016      	b.n	8009a38 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009a10:	4619      	mov	r1, r3
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 fab8 	bl	8009f88 <USBD_StdEPReq>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8009a1c:	e00c      	b.n	8009a38 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009a24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f001 fc8d 	bl	800b34c <USBD_LL_StallEP>
 8009a32:	4603      	mov	r3, r0
 8009a34:	73fb      	strb	r3, [r7, #15]
      break;
 8009a36:	bf00      	nop
  }

  return ret;
 8009a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b086      	sub	sp, #24
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	60f8      	str	r0, [r7, #12]
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	607a      	str	r2, [r7, #4]
 8009a4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009a50:	7afb      	ldrb	r3, [r7, #11]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d137      	bne.n	8009ac6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009a5c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a64:	2b03      	cmp	r3, #3
 8009a66:	d14a      	bne.n	8009afe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	689a      	ldr	r2, [r3, #8]
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d913      	bls.n	8009a9c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	689a      	ldr	r2, [r3, #8]
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	1ad2      	subs	r2, r2, r3
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	68da      	ldr	r2, [r3, #12]
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	bf28      	it	cs
 8009a8e:	4613      	movcs	r3, r2
 8009a90:	461a      	mov	r2, r3
 8009a92:	6879      	ldr	r1, [r7, #4]
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	f000 ffd9 	bl	800aa4c <USBD_CtlContinueRx>
 8009a9a:	e030      	b.n	8009afe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d00a      	beq.n	8009abe <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009aae:	2b03      	cmp	r3, #3
 8009ab0:	d105      	bne.n	8009abe <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	68f8      	ldr	r0, [r7, #12]
 8009abc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f000 ffd5 	bl	800aa6e <USBD_CtlSendStatus>
 8009ac4:	e01b      	b.n	8009afe <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009acc:	699b      	ldr	r3, [r3, #24]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d013      	beq.n	8009afa <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009ad8:	2b03      	cmp	r3, #3
 8009ada:	d10e      	bne.n	8009afa <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ae2:	699b      	ldr	r3, [r3, #24]
 8009ae4:	7afa      	ldrb	r2, [r7, #11]
 8009ae6:	4611      	mov	r1, r2
 8009ae8:	68f8      	ldr	r0, [r7, #12]
 8009aea:	4798      	blx	r3
 8009aec:	4603      	mov	r3, r0
 8009aee:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8009af0:	7dfb      	ldrb	r3, [r7, #23]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d003      	beq.n	8009afe <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8009af6:	7dfb      	ldrb	r3, [r7, #23]
 8009af8:	e002      	b.n	8009b00 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009afa:	2303      	movs	r3, #3
 8009afc:	e000      	b.n	8009b00 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3718      	adds	r7, #24
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b086      	sub	sp, #24
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	460b      	mov	r3, r1
 8009b12:	607a      	str	r2, [r7, #4]
 8009b14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009b16:	7afb      	ldrb	r3, [r7, #11]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d16a      	bne.n	8009bf2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	3314      	adds	r3, #20
 8009b20:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	d155      	bne.n	8009bd8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	689a      	ldr	r2, [r3, #8]
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d914      	bls.n	8009b62 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	689a      	ldr	r2, [r3, #8]
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	1ad2      	subs	r2, r2, r3
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	6879      	ldr	r1, [r7, #4]
 8009b4e:	68f8      	ldr	r0, [r7, #12]
 8009b50:	f000 ff4e 	bl	800a9f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b54:	2300      	movs	r3, #0
 8009b56:	2200      	movs	r2, #0
 8009b58:	2100      	movs	r1, #0
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	f001 fcfc 	bl	800b558 <USBD_LL_PrepareReceive>
 8009b60:	e03a      	b.n	8009bd8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	68da      	ldr	r2, [r3, #12]
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d11c      	bne.n	8009ba8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	685a      	ldr	r2, [r3, #4]
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d316      	bcc.n	8009ba8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	685a      	ldr	r2, [r3, #4]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d20f      	bcs.n	8009ba8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009b88:	2200      	movs	r2, #0
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	68f8      	ldr	r0, [r7, #12]
 8009b8e:	f000 ff2f 	bl	800a9f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2200      	movs	r2, #0
 8009b96:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	2100      	movs	r1, #0
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	f001 fcd9 	bl	800b558 <USBD_LL_PrepareReceive>
 8009ba6:	e017      	b.n	8009bd8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d00a      	beq.n	8009bca <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009bba:	2b03      	cmp	r3, #3
 8009bbc:	d105      	bne.n	8009bca <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009bca:	2180      	movs	r1, #128	; 0x80
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f001 fbbd 	bl	800b34c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009bd2:	68f8      	ldr	r0, [r7, #12]
 8009bd4:	f000 ff5e 	bl	800aa94 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d123      	bne.n	8009c2a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009be2:	68f8      	ldr	r0, [r7, #12]
 8009be4:	f7ff fe9b 	bl	800991e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009bf0:	e01b      	b.n	8009c2a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bf8:	695b      	ldr	r3, [r3, #20]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d013      	beq.n	8009c26 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009c04:	2b03      	cmp	r3, #3
 8009c06:	d10e      	bne.n	8009c26 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c0e:	695b      	ldr	r3, [r3, #20]
 8009c10:	7afa      	ldrb	r2, [r7, #11]
 8009c12:	4611      	mov	r1, r2
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	4798      	blx	r3
 8009c18:	4603      	mov	r3, r0
 8009c1a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8009c1c:	7dfb      	ldrb	r3, [r7, #23]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d003      	beq.n	8009c2a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8009c22:	7dfb      	ldrb	r3, [r7, #23]
 8009c24:	e002      	b.n	8009c2c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009c26:	2303      	movs	r3, #3
 8009c28:	e000      	b.n	8009c2c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3718      	adds	r7, #24
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2200      	movs	r2, #0
 8009c56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d009      	beq.n	8009c78 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	6852      	ldr	r2, [r2, #4]
 8009c70:	b2d2      	uxtb	r2, r2
 8009c72:	4611      	mov	r1, r2
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c78:	2340      	movs	r3, #64	; 0x40
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	2100      	movs	r1, #0
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f001 faf0 	bl	800b264 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2240      	movs	r2, #64	; 0x40
 8009c90:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c94:	2340      	movs	r3, #64	; 0x40
 8009c96:	2200      	movs	r2, #0
 8009c98:	2180      	movs	r1, #128	; 0x80
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f001 fae2 	bl	800b264 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2240      	movs	r2, #64	; 0x40
 8009caa:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009cac:	2300      	movs	r3, #0
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3708      	adds	r7, #8
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009cb6:	b480      	push	{r7}
 8009cb8:	b083      	sub	sp, #12
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	78fa      	ldrb	r2, [r7, #3]
 8009cc6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	370c      	adds	r7, #12
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr

08009cd6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009cd6:	b480      	push	{r7}
 8009cd8:	b083      	sub	sp, #12
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2204      	movs	r2, #4
 8009cee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009cf2:	2300      	movs	r3, #0
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d0e:	2b04      	cmp	r3, #4
 8009d10:	d105      	bne.n	8009d1e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009d1e:	2300      	movs	r3, #0
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d3a:	2b03      	cmp	r3, #3
 8009d3c:	d10b      	bne.n	8009d56 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d44:	69db      	ldr	r3, [r3, #28]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d005      	beq.n	8009d56 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d50:	69db      	ldr	r3, [r3, #28]
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009d56:	2300      	movs	r3, #0
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3708      	adds	r7, #8
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	460b      	mov	r3, r1
 8009d6a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	370c      	adds	r7, #12
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr

08009d7a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009d7a:	b480      	push	{r7}
 8009d7c:	b083      	sub	sp, #12
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
 8009d82:	460b      	mov	r3, r1
 8009d84:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	370c      	adds	r7, #12
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	370c      	adds	r7, #12
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr

08009daa <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b082      	sub	sp, #8
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2201      	movs	r2, #1
 8009db6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d009      	beq.n	8009dd8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	6852      	ldr	r2, [r2, #4]
 8009dd0:	b2d2      	uxtb	r2, r2
 8009dd2:	4611      	mov	r1, r2
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	4798      	blx	r3
  }

  return USBD_OK;
 8009dd8:	2300      	movs	r3, #0
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3708      	adds	r7, #8
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009de2:	b480      	push	{r7}
 8009de4:	b087      	sub	sp, #28
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	3301      	adds	r3, #1
 8009df8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009e00:	8a3b      	ldrh	r3, [r7, #16]
 8009e02:	021b      	lsls	r3, r3, #8
 8009e04:	b21a      	sxth	r2, r3
 8009e06:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	b21b      	sxth	r3, r3
 8009e0e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009e10:	89fb      	ldrh	r3, [r7, #14]
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	371c      	adds	r7, #28
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr
	...

08009e20 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e36:	2b20      	cmp	r3, #32
 8009e38:	d004      	beq.n	8009e44 <USBD_StdDevReq+0x24>
 8009e3a:	2b40      	cmp	r3, #64	; 0x40
 8009e3c:	d002      	beq.n	8009e44 <USBD_StdDevReq+0x24>
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00a      	beq.n	8009e58 <USBD_StdDevReq+0x38>
 8009e42:	e050      	b.n	8009ee6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	6839      	ldr	r1, [r7, #0]
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	4798      	blx	r3
 8009e52:	4603      	mov	r3, r0
 8009e54:	73fb      	strb	r3, [r7, #15]
    break;
 8009e56:	e04b      	b.n	8009ef0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	785b      	ldrb	r3, [r3, #1]
 8009e5c:	2b09      	cmp	r3, #9
 8009e5e:	d83c      	bhi.n	8009eda <USBD_StdDevReq+0xba>
 8009e60:	a201      	add	r2, pc, #4	; (adr r2, 8009e68 <USBD_StdDevReq+0x48>)
 8009e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e66:	bf00      	nop
 8009e68:	08009ebd 	.word	0x08009ebd
 8009e6c:	08009ed1 	.word	0x08009ed1
 8009e70:	08009edb 	.word	0x08009edb
 8009e74:	08009ec7 	.word	0x08009ec7
 8009e78:	08009edb 	.word	0x08009edb
 8009e7c:	08009e9b 	.word	0x08009e9b
 8009e80:	08009e91 	.word	0x08009e91
 8009e84:	08009edb 	.word	0x08009edb
 8009e88:	08009eb3 	.word	0x08009eb3
 8009e8c:	08009ea5 	.word	0x08009ea5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8009e90:	6839      	ldr	r1, [r7, #0]
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 f9d0 	bl	800a238 <USBD_GetDescriptor>
      break;
 8009e98:	e024      	b.n	8009ee4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8009e9a:	6839      	ldr	r1, [r7, #0]
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f000 fb5f 	bl	800a560 <USBD_SetAddress>
      break;
 8009ea2:	e01f      	b.n	8009ee4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8009ea4:	6839      	ldr	r1, [r7, #0]
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 fb9c 	bl	800a5e4 <USBD_SetConfig>
 8009eac:	4603      	mov	r3, r0
 8009eae:	73fb      	strb	r3, [r7, #15]
      break;
 8009eb0:	e018      	b.n	8009ee4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8009eb2:	6839      	ldr	r1, [r7, #0]
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fc39 	bl	800a72c <USBD_GetConfig>
      break;
 8009eba:	e013      	b.n	8009ee4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8009ebc:	6839      	ldr	r1, [r7, #0]
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 fc68 	bl	800a794 <USBD_GetStatus>
      break;
 8009ec4:	e00e      	b.n	8009ee4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8009ec6:	6839      	ldr	r1, [r7, #0]
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 fc96 	bl	800a7fa <USBD_SetFeature>
      break;
 8009ece:	e009      	b.n	8009ee4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8009ed0:	6839      	ldr	r1, [r7, #0]
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 fca5 	bl	800a822 <USBD_ClrFeature>
      break;
 8009ed8:	e004      	b.n	8009ee4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8009eda:	6839      	ldr	r1, [r7, #0]
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 fcfb 	bl	800a8d8 <USBD_CtlError>
      break;
 8009ee2:	bf00      	nop
    }
    break;
 8009ee4:	e004      	b.n	8009ef0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8009ee6:	6839      	ldr	r1, [r7, #0]
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 fcf5 	bl	800a8d8 <USBD_CtlError>
    break;
 8009eee:	bf00      	nop
  }

  return ret;
 8009ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop

08009efc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f06:	2300      	movs	r3, #0
 8009f08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f12:	2b20      	cmp	r3, #32
 8009f14:	d003      	beq.n	8009f1e <USBD_StdItfReq+0x22>
 8009f16:	2b40      	cmp	r3, #64	; 0x40
 8009f18:	d001      	beq.n	8009f1e <USBD_StdItfReq+0x22>
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d12a      	bne.n	8009f74 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f24:	3b01      	subs	r3, #1
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	d81d      	bhi.n	8009f66 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	889b      	ldrh	r3, [r3, #4]
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d813      	bhi.n	8009f5c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	6839      	ldr	r1, [r7, #0]
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	4798      	blx	r3
 8009f42:	4603      	mov	r3, r0
 8009f44:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	88db      	ldrh	r3, [r3, #6]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d110      	bne.n	8009f70 <USBD_StdItfReq+0x74>
 8009f4e:	7bfb      	ldrb	r3, [r7, #15]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10d      	bne.n	8009f70 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 fd8a 	bl	800aa6e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8009f5a:	e009      	b.n	8009f70 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8009f5c:	6839      	ldr	r1, [r7, #0]
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 fcba 	bl	800a8d8 <USBD_CtlError>
      break;
 8009f64:	e004      	b.n	8009f70 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8009f66:	6839      	ldr	r1, [r7, #0]
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 fcb5 	bl	800a8d8 <USBD_CtlError>
      break;
 8009f6e:	e000      	b.n	8009f72 <USBD_StdItfReq+0x76>
      break;
 8009f70:	bf00      	nop
    }
    break;
 8009f72:	e004      	b.n	8009f7e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8009f74:	6839      	ldr	r1, [r7, #0]
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 fcae 	bl	800a8d8 <USBD_CtlError>
    break;
 8009f7c:	bf00      	nop
  }

  return ret;
 8009f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3710      	adds	r7, #16
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f92:	2300      	movs	r3, #0
 8009f94:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	889b      	ldrh	r3, [r3, #4]
 8009f9a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009fa4:	2b20      	cmp	r3, #32
 8009fa6:	d004      	beq.n	8009fb2 <USBD_StdEPReq+0x2a>
 8009fa8:	2b40      	cmp	r3, #64	; 0x40
 8009faa:	d002      	beq.n	8009fb2 <USBD_StdEPReq+0x2a>
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d00a      	beq.n	8009fc6 <USBD_StdEPReq+0x3e>
 8009fb0:	e137      	b.n	800a222 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	6839      	ldr	r1, [r7, #0]
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	4798      	blx	r3
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	73fb      	strb	r3, [r7, #15]
    break;
 8009fc4:	e132      	b.n	800a22c <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	785b      	ldrb	r3, [r3, #1]
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d03e      	beq.n	800a04c <USBD_StdEPReq+0xc4>
 8009fce:	2b03      	cmp	r3, #3
 8009fd0:	d002      	beq.n	8009fd8 <USBD_StdEPReq+0x50>
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d079      	beq.n	800a0ca <USBD_StdEPReq+0x142>
 8009fd6:	e11e      	b.n	800a216 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fde:	2b02      	cmp	r3, #2
 8009fe0:	d002      	beq.n	8009fe8 <USBD_StdEPReq+0x60>
 8009fe2:	2b03      	cmp	r3, #3
 8009fe4:	d015      	beq.n	800a012 <USBD_StdEPReq+0x8a>
 8009fe6:	e02b      	b.n	800a040 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009fe8:	7bbb      	ldrb	r3, [r7, #14]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d00c      	beq.n	800a008 <USBD_StdEPReq+0x80>
 8009fee:	7bbb      	ldrb	r3, [r7, #14]
 8009ff0:	2b80      	cmp	r3, #128	; 0x80
 8009ff2:	d009      	beq.n	800a008 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ff4:	7bbb      	ldrb	r3, [r7, #14]
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f001 f9a7 	bl	800b34c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ffe:	2180      	movs	r1, #128	; 0x80
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f001 f9a3 	bl	800b34c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a006:	e020      	b.n	800a04a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800a008:	6839      	ldr	r1, [r7, #0]
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 fc64 	bl	800a8d8 <USBD_CtlError>
        break;
 800a010:	e01b      	b.n	800a04a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	885b      	ldrh	r3, [r3, #2]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d10e      	bne.n	800a038 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a01a:	7bbb      	ldrb	r3, [r7, #14]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d00b      	beq.n	800a038 <USBD_StdEPReq+0xb0>
 800a020:	7bbb      	ldrb	r3, [r7, #14]
 800a022:	2b80      	cmp	r3, #128	; 0x80
 800a024:	d008      	beq.n	800a038 <USBD_StdEPReq+0xb0>
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	88db      	ldrh	r3, [r3, #6]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d104      	bne.n	800a038 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800a02e:	7bbb      	ldrb	r3, [r7, #14]
 800a030:	4619      	mov	r1, r3
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f001 f98a 	bl	800b34c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 fd18 	bl	800aa6e <USBD_CtlSendStatus>

        break;
 800a03e:	e004      	b.n	800a04a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800a040:	6839      	ldr	r1, [r7, #0]
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 fc48 	bl	800a8d8 <USBD_CtlError>
        break;
 800a048:	bf00      	nop
      }
      break;
 800a04a:	e0e9      	b.n	800a220 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a052:	2b02      	cmp	r3, #2
 800a054:	d002      	beq.n	800a05c <USBD_StdEPReq+0xd4>
 800a056:	2b03      	cmp	r3, #3
 800a058:	d015      	beq.n	800a086 <USBD_StdEPReq+0xfe>
 800a05a:	e02f      	b.n	800a0bc <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a05c:	7bbb      	ldrb	r3, [r7, #14]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00c      	beq.n	800a07c <USBD_StdEPReq+0xf4>
 800a062:	7bbb      	ldrb	r3, [r7, #14]
 800a064:	2b80      	cmp	r3, #128	; 0x80
 800a066:	d009      	beq.n	800a07c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800a068:	7bbb      	ldrb	r3, [r7, #14]
 800a06a:	4619      	mov	r1, r3
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f001 f96d 	bl	800b34c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a072:	2180      	movs	r1, #128	; 0x80
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f001 f969 	bl	800b34c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a07a:	e025      	b.n	800a0c8 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 800a07c:	6839      	ldr	r1, [r7, #0]
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 fc2a 	bl	800a8d8 <USBD_CtlError>
        break;
 800a084:	e020      	b.n	800a0c8 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	885b      	ldrh	r3, [r3, #2]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d11b      	bne.n	800a0c6 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800a08e:	7bbb      	ldrb	r3, [r7, #14]
 800a090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a094:	2b00      	cmp	r3, #0
 800a096:	d004      	beq.n	800a0a2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a098:	7bbb      	ldrb	r3, [r7, #14]
 800a09a:	4619      	mov	r1, r3
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f001 f98b 	bl	800b3b8 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fce3 	bl	800aa6e <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	6839      	ldr	r1, [r7, #0]
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	4798      	blx	r3
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a0ba:	e004      	b.n	800a0c6 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 800a0bc:	6839      	ldr	r1, [r7, #0]
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 fc0a 	bl	800a8d8 <USBD_CtlError>
        break;
 800a0c4:	e000      	b.n	800a0c8 <USBD_StdEPReq+0x140>
        break;
 800a0c6:	bf00      	nop
      }
      break;
 800a0c8:	e0aa      	b.n	800a220 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0d0:	2b02      	cmp	r3, #2
 800a0d2:	d002      	beq.n	800a0da <USBD_StdEPReq+0x152>
 800a0d4:	2b03      	cmp	r3, #3
 800a0d6:	d032      	beq.n	800a13e <USBD_StdEPReq+0x1b6>
 800a0d8:	e097      	b.n	800a20a <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a0da:	7bbb      	ldrb	r3, [r7, #14]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d007      	beq.n	800a0f0 <USBD_StdEPReq+0x168>
 800a0e0:	7bbb      	ldrb	r3, [r7, #14]
 800a0e2:	2b80      	cmp	r3, #128	; 0x80
 800a0e4:	d004      	beq.n	800a0f0 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 800a0e6:	6839      	ldr	r1, [r7, #0]
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 fbf5 	bl	800a8d8 <USBD_CtlError>
          break;
 800a0ee:	e091      	b.n	800a214 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	da0b      	bge.n	800a110 <USBD_StdEPReq+0x188>
 800a0f8:	7bbb      	ldrb	r3, [r7, #14]
 800a0fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0fe:	4613      	mov	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	3310      	adds	r3, #16
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	4413      	add	r3, r2
 800a10c:	3304      	adds	r3, #4
 800a10e:	e00b      	b.n	800a128 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800a110:	7bbb      	ldrb	r3, [r7, #14]
 800a112:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a116:	4613      	mov	r3, r2
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	4413      	add	r3, r2
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	4413      	add	r3, r2
 800a126:	3304      	adds	r3, #4
 800a128:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	2200      	movs	r2, #0
 800a12e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	2202      	movs	r2, #2
 800a134:	4619      	mov	r1, r3
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 fc3f 	bl	800a9ba <USBD_CtlSendData>
        break;
 800a13c:	e06a      	b.n	800a214 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800a13e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a142:	2b00      	cmp	r3, #0
 800a144:	da11      	bge.n	800a16a <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a146:	7bbb      	ldrb	r3, [r7, #14]
 800a148:	f003 020f 	and.w	r2, r3, #15
 800a14c:	6879      	ldr	r1, [r7, #4]
 800a14e:	4613      	mov	r3, r2
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	4413      	add	r3, r2
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	440b      	add	r3, r1
 800a158:	3324      	adds	r3, #36	; 0x24
 800a15a:	881b      	ldrh	r3, [r3, #0]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d117      	bne.n	800a190 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800a160:	6839      	ldr	r1, [r7, #0]
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fbb8 	bl	800a8d8 <USBD_CtlError>
            break;
 800a168:	e054      	b.n	800a214 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a16a:	7bbb      	ldrb	r3, [r7, #14]
 800a16c:	f003 020f 	and.w	r2, r3, #15
 800a170:	6879      	ldr	r1, [r7, #4]
 800a172:	4613      	mov	r3, r2
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	4413      	add	r3, r2
 800a178:	009b      	lsls	r3, r3, #2
 800a17a:	440b      	add	r3, r1
 800a17c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a180:	881b      	ldrh	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d104      	bne.n	800a190 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800a186:	6839      	ldr	r1, [r7, #0]
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 fba5 	bl	800a8d8 <USBD_CtlError>
            break;
 800a18e:	e041      	b.n	800a214 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a190:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a194:	2b00      	cmp	r3, #0
 800a196:	da0b      	bge.n	800a1b0 <USBD_StdEPReq+0x228>
 800a198:	7bbb      	ldrb	r3, [r7, #14]
 800a19a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a19e:	4613      	mov	r3, r2
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	4413      	add	r3, r2
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	3310      	adds	r3, #16
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	4413      	add	r3, r2
 800a1ac:	3304      	adds	r3, #4
 800a1ae:	e00b      	b.n	800a1c8 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 800a1b0:	7bbb      	ldrb	r3, [r7, #14]
 800a1b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	4413      	add	r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	4413      	add	r3, r2
 800a1c6:	3304      	adds	r3, #4
 800a1c8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a1ca:	7bbb      	ldrb	r3, [r7, #14]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d002      	beq.n	800a1d6 <USBD_StdEPReq+0x24e>
 800a1d0:	7bbb      	ldrb	r3, [r7, #14]
 800a1d2:	2b80      	cmp	r3, #128	; 0x80
 800a1d4:	d103      	bne.n	800a1de <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	601a      	str	r2, [r3, #0]
 800a1dc:	e00e      	b.n	800a1fc <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a1de:	7bbb      	ldrb	r3, [r7, #14]
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f001 f91e 	bl	800b424 <USBD_LL_IsStallEP>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d003      	beq.n	800a1f6 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	601a      	str	r2, [r3, #0]
 800a1f4:	e002      	b.n	800a1fc <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	2202      	movs	r2, #2
 800a200:	4619      	mov	r1, r3
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 fbd9 	bl	800a9ba <USBD_CtlSendData>
          break;
 800a208:	e004      	b.n	800a214 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 800a20a:	6839      	ldr	r1, [r7, #0]
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 fb63 	bl	800a8d8 <USBD_CtlError>
        break;
 800a212:	bf00      	nop
      }
      break;
 800a214:	e004      	b.n	800a220 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 800a216:	6839      	ldr	r1, [r7, #0]
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 fb5d 	bl	800a8d8 <USBD_CtlError>
      break;
 800a21e:	bf00      	nop
    }
    break;
 800a220:	e004      	b.n	800a22c <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 800a222:	6839      	ldr	r1, [r7, #0]
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 fb57 	bl	800a8d8 <USBD_CtlError>
    break;
 800a22a:	bf00      	nop
  }

  return ret;
 800a22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
	...

0800a238 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a242:	2300      	movs	r3, #0
 800a244:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a246:	2300      	movs	r3, #0
 800a248:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a24a:	2300      	movs	r3, #0
 800a24c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	885b      	ldrh	r3, [r3, #2]
 800a252:	0a1b      	lsrs	r3, r3, #8
 800a254:	b29b      	uxth	r3, r3
 800a256:	3b01      	subs	r3, #1
 800a258:	2b0e      	cmp	r3, #14
 800a25a:	f200 8152 	bhi.w	800a502 <USBD_GetDescriptor+0x2ca>
 800a25e:	a201      	add	r2, pc, #4	; (adr r2, 800a264 <USBD_GetDescriptor+0x2c>)
 800a260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a264:	0800a2d5 	.word	0x0800a2d5
 800a268:	0800a2ed 	.word	0x0800a2ed
 800a26c:	0800a32d 	.word	0x0800a32d
 800a270:	0800a503 	.word	0x0800a503
 800a274:	0800a503 	.word	0x0800a503
 800a278:	0800a4a3 	.word	0x0800a4a3
 800a27c:	0800a4cf 	.word	0x0800a4cf
 800a280:	0800a503 	.word	0x0800a503
 800a284:	0800a503 	.word	0x0800a503
 800a288:	0800a503 	.word	0x0800a503
 800a28c:	0800a503 	.word	0x0800a503
 800a290:	0800a503 	.word	0x0800a503
 800a294:	0800a503 	.word	0x0800a503
 800a298:	0800a503 	.word	0x0800a503
 800a29c:	0800a2a1 	.word	0x0800a2a1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2a6:	69db      	ldr	r3, [r3, #28]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d00b      	beq.n	800a2c4 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2b2:	69db      	ldr	r3, [r3, #28]
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	7c12      	ldrb	r2, [r2, #16]
 800a2b8:	f107 0108 	add.w	r1, r7, #8
 800a2bc:	4610      	mov	r0, r2
 800a2be:	4798      	blx	r3
 800a2c0:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800a2c2:	e126      	b.n	800a512 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800a2c4:	6839      	ldr	r1, [r7, #0]
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 fb06 	bl	800a8d8 <USBD_CtlError>
      err++;
 800a2cc:	7afb      	ldrb	r3, [r7, #11]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	72fb      	strb	r3, [r7, #11]
    break;
 800a2d2:	e11e      	b.n	800a512 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	7c12      	ldrb	r2, [r2, #16]
 800a2e0:	f107 0108 	add.w	r1, r7, #8
 800a2e4:	4610      	mov	r0, r2
 800a2e6:	4798      	blx	r3
 800a2e8:	60f8      	str	r0, [r7, #12]
    break;
 800a2ea:	e112      	b.n	800a512 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	7c1b      	ldrb	r3, [r3, #16]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d10d      	bne.n	800a310 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2fc:	f107 0208 	add.w	r2, r7, #8
 800a300:	4610      	mov	r0, r2
 800a302:	4798      	blx	r3
 800a304:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	3301      	adds	r3, #1
 800a30a:	2202      	movs	r2, #2
 800a30c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800a30e:	e100      	b.n	800a512 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a318:	f107 0208 	add.w	r2, r7, #8
 800a31c:	4610      	mov	r0, r2
 800a31e:	4798      	blx	r3
 800a320:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	3301      	adds	r3, #1
 800a326:	2202      	movs	r2, #2
 800a328:	701a      	strb	r2, [r3, #0]
    break;
 800a32a:	e0f2      	b.n	800a512 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	885b      	ldrh	r3, [r3, #2]
 800a330:	b2db      	uxtb	r3, r3
 800a332:	2b05      	cmp	r3, #5
 800a334:	f200 80ac 	bhi.w	800a490 <USBD_GetDescriptor+0x258>
 800a338:	a201      	add	r2, pc, #4	; (adr r2, 800a340 <USBD_GetDescriptor+0x108>)
 800a33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a33e:	bf00      	nop
 800a340:	0800a359 	.word	0x0800a359
 800a344:	0800a38d 	.word	0x0800a38d
 800a348:	0800a3c1 	.word	0x0800a3c1
 800a34c:	0800a3f5 	.word	0x0800a3f5
 800a350:	0800a429 	.word	0x0800a429
 800a354:	0800a45d 	.word	0x0800a45d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d00b      	beq.n	800a37c <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	7c12      	ldrb	r2, [r2, #16]
 800a370:	f107 0108 	add.w	r1, r7, #8
 800a374:	4610      	mov	r0, r2
 800a376:	4798      	blx	r3
 800a378:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a37a:	e091      	b.n	800a4a0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a37c:	6839      	ldr	r1, [r7, #0]
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 faaa 	bl	800a8d8 <USBD_CtlError>
        err++;
 800a384:	7afb      	ldrb	r3, [r7, #11]
 800a386:	3301      	adds	r3, #1
 800a388:	72fb      	strb	r3, [r7, #11]
      break;
 800a38a:	e089      	b.n	800a4a0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d00b      	beq.n	800a3b0 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	7c12      	ldrb	r2, [r2, #16]
 800a3a4:	f107 0108 	add.w	r1, r7, #8
 800a3a8:	4610      	mov	r0, r2
 800a3aa:	4798      	blx	r3
 800a3ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3ae:	e077      	b.n	800a4a0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a3b0:	6839      	ldr	r1, [r7, #0]
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f000 fa90 	bl	800a8d8 <USBD_CtlError>
        err++;
 800a3b8:	7afb      	ldrb	r3, [r7, #11]
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	72fb      	strb	r3, [r7, #11]
      break;
 800a3be:	e06f      	b.n	800a4a0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00b      	beq.n	800a3e4 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	7c12      	ldrb	r2, [r2, #16]
 800a3d8:	f107 0108 	add.w	r1, r7, #8
 800a3dc:	4610      	mov	r0, r2
 800a3de:	4798      	blx	r3
 800a3e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3e2:	e05d      	b.n	800a4a0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a3e4:	6839      	ldr	r1, [r7, #0]
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 fa76 	bl	800a8d8 <USBD_CtlError>
        err++;
 800a3ec:	7afb      	ldrb	r3, [r7, #11]
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	72fb      	strb	r3, [r7, #11]
      break;
 800a3f2:	e055      	b.n	800a4a0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3fa:	691b      	ldr	r3, [r3, #16]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d00b      	beq.n	800a418 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a406:	691b      	ldr	r3, [r3, #16]
 800a408:	687a      	ldr	r2, [r7, #4]
 800a40a:	7c12      	ldrb	r2, [r2, #16]
 800a40c:	f107 0108 	add.w	r1, r7, #8
 800a410:	4610      	mov	r0, r2
 800a412:	4798      	blx	r3
 800a414:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a416:	e043      	b.n	800a4a0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a418:	6839      	ldr	r1, [r7, #0]
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 fa5c 	bl	800a8d8 <USBD_CtlError>
        err++;
 800a420:	7afb      	ldrb	r3, [r7, #11]
 800a422:	3301      	adds	r3, #1
 800a424:	72fb      	strb	r3, [r7, #11]
      break;
 800a426:	e03b      	b.n	800a4a0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a42e:	695b      	ldr	r3, [r3, #20]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00b      	beq.n	800a44c <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a43a:	695b      	ldr	r3, [r3, #20]
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	7c12      	ldrb	r2, [r2, #16]
 800a440:	f107 0108 	add.w	r1, r7, #8
 800a444:	4610      	mov	r0, r2
 800a446:	4798      	blx	r3
 800a448:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a44a:	e029      	b.n	800a4a0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a44c:	6839      	ldr	r1, [r7, #0]
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 fa42 	bl	800a8d8 <USBD_CtlError>
        err++;
 800a454:	7afb      	ldrb	r3, [r7, #11]
 800a456:	3301      	adds	r3, #1
 800a458:	72fb      	strb	r3, [r7, #11]
      break;
 800a45a:	e021      	b.n	800a4a0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a462:	699b      	ldr	r3, [r3, #24]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d00b      	beq.n	800a480 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a46e:	699b      	ldr	r3, [r3, #24]
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	7c12      	ldrb	r2, [r2, #16]
 800a474:	f107 0108 	add.w	r1, r7, #8
 800a478:	4610      	mov	r0, r2
 800a47a:	4798      	blx	r3
 800a47c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a47e:	e00f      	b.n	800a4a0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a480:	6839      	ldr	r1, [r7, #0]
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 fa28 	bl	800a8d8 <USBD_CtlError>
        err++;
 800a488:	7afb      	ldrb	r3, [r7, #11]
 800a48a:	3301      	adds	r3, #1
 800a48c:	72fb      	strb	r3, [r7, #11]
      break;
 800a48e:	e007      	b.n	800a4a0 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800a490:	6839      	ldr	r1, [r7, #0]
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 fa20 	bl	800a8d8 <USBD_CtlError>
      err++;
 800a498:	7afb      	ldrb	r3, [r7, #11]
 800a49a:	3301      	adds	r3, #1
 800a49c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800a49e:	bf00      	nop
    }
    break;
 800a4a0:	e037      	b.n	800a512 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	7c1b      	ldrb	r3, [r3, #16]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d109      	bne.n	800a4be <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4b2:	f107 0208 	add.w	r2, r7, #8
 800a4b6:	4610      	mov	r0, r2
 800a4b8:	4798      	blx	r3
 800a4ba:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800a4bc:	e029      	b.n	800a512 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800a4be:	6839      	ldr	r1, [r7, #0]
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 fa09 	bl	800a8d8 <USBD_CtlError>
      err++;
 800a4c6:	7afb      	ldrb	r3, [r7, #11]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	72fb      	strb	r3, [r7, #11]
    break;
 800a4cc:	e021      	b.n	800a512 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	7c1b      	ldrb	r3, [r3, #16]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d10d      	bne.n	800a4f2 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4de:	f107 0208 	add.w	r2, r7, #8
 800a4e2:	4610      	mov	r0, r2
 800a4e4:	4798      	blx	r3
 800a4e6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	2207      	movs	r2, #7
 800a4ee:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800a4f0:	e00f      	b.n	800a512 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800a4f2:	6839      	ldr	r1, [r7, #0]
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 f9ef 	bl	800a8d8 <USBD_CtlError>
      err++;
 800a4fa:	7afb      	ldrb	r3, [r7, #11]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	72fb      	strb	r3, [r7, #11]
    break;
 800a500:	e007      	b.n	800a512 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800a502:	6839      	ldr	r1, [r7, #0]
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 f9e7 	bl	800a8d8 <USBD_CtlError>
    err++;
 800a50a:	7afb      	ldrb	r3, [r7, #11]
 800a50c:	3301      	adds	r3, #1
 800a50e:	72fb      	strb	r3, [r7, #11]
    break;
 800a510:	bf00      	nop
  }

  if (err != 0U)
 800a512:	7afb      	ldrb	r3, [r7, #11]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d11e      	bne.n	800a556 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	88db      	ldrh	r3, [r3, #6]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d016      	beq.n	800a54e <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800a520:	893b      	ldrh	r3, [r7, #8]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d00e      	beq.n	800a544 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	88da      	ldrh	r2, [r3, #6]
 800a52a:	893b      	ldrh	r3, [r7, #8]
 800a52c:	4293      	cmp	r3, r2
 800a52e:	bf28      	it	cs
 800a530:	4613      	movcs	r3, r2
 800a532:	b29b      	uxth	r3, r3
 800a534:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800a536:	893b      	ldrh	r3, [r7, #8]
 800a538:	461a      	mov	r2, r3
 800a53a:	68f9      	ldr	r1, [r7, #12]
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 fa3c 	bl	800a9ba <USBD_CtlSendData>
 800a542:	e009      	b.n	800a558 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800a544:	6839      	ldr	r1, [r7, #0]
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 f9c6 	bl	800a8d8 <USBD_CtlError>
 800a54c:	e004      	b.n	800a558 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 fa8d 	bl	800aa6e <USBD_CtlSendStatus>
 800a554:	e000      	b.n	800a558 <USBD_GetDescriptor+0x320>
    return;
 800a556:	bf00      	nop
    }
  }
}
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop

0800a560 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	889b      	ldrh	r3, [r3, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d130      	bne.n	800a5d4 <USBD_SetAddress+0x74>
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	88db      	ldrh	r3, [r3, #6]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d12c      	bne.n	800a5d4 <USBD_SetAddress+0x74>
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	885b      	ldrh	r3, [r3, #2]
 800a57e:	2b7f      	cmp	r3, #127	; 0x7f
 800a580:	d828      	bhi.n	800a5d4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	885b      	ldrh	r3, [r3, #2]
 800a586:	b2db      	uxtb	r3, r3
 800a588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a58c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a594:	2b03      	cmp	r3, #3
 800a596:	d104      	bne.n	800a5a2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a598:	6839      	ldr	r1, [r7, #0]
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 f99c 	bl	800a8d8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5a0:	e01c      	b.n	800a5dc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	7bfa      	ldrb	r2, [r7, #15]
 800a5a6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a5aa:	7bfb      	ldrb	r3, [r7, #15]
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 ff64 	bl	800b47c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 fa5a 	bl	800aa6e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a5ba:	7bfb      	ldrb	r3, [r7, #15]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d004      	beq.n	800a5ca <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2202      	movs	r2, #2
 800a5c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5c8:	e008      	b.n	800a5dc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5d2:	e003      	b.n	800a5dc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a5d4:	6839      	ldr	r1, [r7, #0]
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 f97e 	bl	800a8d8 <USBD_CtlError>
  }
}
 800a5dc:	bf00      	nop
 800a5de:	3710      	adds	r7, #16
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	885b      	ldrh	r3, [r3, #2]
 800a5f6:	b2da      	uxtb	r2, r3
 800a5f8:	4b4b      	ldr	r3, [pc, #300]	; (800a728 <USBD_SetConfig+0x144>)
 800a5fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a5fc:	4b4a      	ldr	r3, [pc, #296]	; (800a728 <USBD_SetConfig+0x144>)
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	2b01      	cmp	r3, #1
 800a602:	d905      	bls.n	800a610 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a604:	6839      	ldr	r1, [r7, #0]
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 f966 	bl	800a8d8 <USBD_CtlError>
    return USBD_FAIL;
 800a60c:	2303      	movs	r3, #3
 800a60e:	e087      	b.n	800a720 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a616:	2b02      	cmp	r3, #2
 800a618:	d002      	beq.n	800a620 <USBD_SetConfig+0x3c>
 800a61a:	2b03      	cmp	r3, #3
 800a61c:	d025      	beq.n	800a66a <USBD_SetConfig+0x86>
 800a61e:	e071      	b.n	800a704 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800a620:	4b41      	ldr	r3, [pc, #260]	; (800a728 <USBD_SetConfig+0x144>)
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d01c      	beq.n	800a662 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800a628:	4b3f      	ldr	r3, [pc, #252]	; (800a728 <USBD_SetConfig+0x144>)
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	461a      	mov	r2, r3
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800a632:	4b3d      	ldr	r3, [pc, #244]	; (800a728 <USBD_SetConfig+0x144>)
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	4619      	mov	r1, r3
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f7ff f97b 	bl	8009934 <USBD_SetClassConfig>
 800a63e:	4603      	mov	r3, r0
 800a640:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800a642:	7bfb      	ldrb	r3, [r7, #15]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d004      	beq.n	800a652 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800a648:	6839      	ldr	r1, [r7, #0]
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f000 f944 	bl	800a8d8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800a650:	e065      	b.n	800a71e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 fa0b 	bl	800aa6e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2203      	movs	r2, #3
 800a65c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800a660:	e05d      	b.n	800a71e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 fa03 	bl	800aa6e <USBD_CtlSendStatus>
    break;
 800a668:	e059      	b.n	800a71e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800a66a:	4b2f      	ldr	r3, [pc, #188]	; (800a728 <USBD_SetConfig+0x144>)
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d112      	bne.n	800a698 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2202      	movs	r2, #2
 800a676:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800a67a:	4b2b      	ldr	r3, [pc, #172]	; (800a728 <USBD_SetConfig+0x144>)
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	461a      	mov	r2, r3
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a684:	4b28      	ldr	r3, [pc, #160]	; (800a728 <USBD_SetConfig+0x144>)
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	4619      	mov	r1, r3
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f7ff f96e 	bl	800996c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 f9ec 	bl	800aa6e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800a696:	e042      	b.n	800a71e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800a698:	4b23      	ldr	r3, [pc, #140]	; (800a728 <USBD_SetConfig+0x144>)
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	461a      	mov	r2, r3
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d02a      	beq.n	800a6fc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f7ff f95c 	bl	800996c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800a6b4:	4b1c      	ldr	r3, [pc, #112]	; (800a728 <USBD_SetConfig+0x144>)
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800a6be:	4b1a      	ldr	r3, [pc, #104]	; (800a728 <USBD_SetConfig+0x144>)
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f7ff f935 	bl	8009934 <USBD_SetClassConfig>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800a6ce:	7bfb      	ldrb	r3, [r7, #15]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d00f      	beq.n	800a6f4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800a6d4:	6839      	ldr	r1, [r7, #0]
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 f8fe 	bl	800a8d8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f7ff f941 	bl	800996c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2202      	movs	r2, #2
 800a6ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800a6f2:	e014      	b.n	800a71e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 f9ba 	bl	800aa6e <USBD_CtlSendStatus>
    break;
 800a6fa:	e010      	b.n	800a71e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 f9b6 	bl	800aa6e <USBD_CtlSendStatus>
    break;
 800a702:	e00c      	b.n	800a71e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800a704:	6839      	ldr	r1, [r7, #0]
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f000 f8e6 	bl	800a8d8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a70c:	4b06      	ldr	r3, [pc, #24]	; (800a728 <USBD_SetConfig+0x144>)
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	4619      	mov	r1, r3
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f7ff f92a 	bl	800996c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800a718:	2303      	movs	r3, #3
 800a71a:	73fb      	strb	r3, [r7, #15]
    break;
 800a71c:	bf00      	nop
  }

  return ret;
 800a71e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a720:	4618      	mov	r0, r3
 800a722:	3710      	adds	r7, #16
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}
 800a728:	2000021c 	.word	0x2000021c

0800a72c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	88db      	ldrh	r3, [r3, #6]
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d004      	beq.n	800a748 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a73e:	6839      	ldr	r1, [r7, #0]
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 f8c9 	bl	800a8d8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800a746:	e021      	b.n	800a78c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a74e:	2b01      	cmp	r3, #1
 800a750:	db17      	blt.n	800a782 <USBD_GetConfig+0x56>
 800a752:	2b02      	cmp	r3, #2
 800a754:	dd02      	ble.n	800a75c <USBD_GetConfig+0x30>
 800a756:	2b03      	cmp	r3, #3
 800a758:	d00b      	beq.n	800a772 <USBD_GetConfig+0x46>
 800a75a:	e012      	b.n	800a782 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2200      	movs	r2, #0
 800a760:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	3308      	adds	r3, #8
 800a766:	2201      	movs	r2, #1
 800a768:	4619      	mov	r1, r3
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 f925 	bl	800a9ba <USBD_CtlSendData>
      break;
 800a770:	e00c      	b.n	800a78c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	3304      	adds	r3, #4
 800a776:	2201      	movs	r2, #1
 800a778:	4619      	mov	r1, r3
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 f91d 	bl	800a9ba <USBD_CtlSendData>
      break;
 800a780:	e004      	b.n	800a78c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800a782:	6839      	ldr	r1, [r7, #0]
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 f8a7 	bl	800a8d8 <USBD_CtlError>
      break;
 800a78a:	bf00      	nop
}
 800a78c:	bf00      	nop
 800a78e:	3708      	adds	r7, #8
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7a4:	3b01      	subs	r3, #1
 800a7a6:	2b02      	cmp	r3, #2
 800a7a8:	d81e      	bhi.n	800a7e8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	88db      	ldrh	r3, [r3, #6]
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	d004      	beq.n	800a7bc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800a7b2:	6839      	ldr	r1, [r7, #0]
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 f88f 	bl	800a8d8 <USBD_CtlError>
      break;
 800a7ba:	e01a      	b.n	800a7f2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2201      	movs	r2, #1
 800a7c0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d005      	beq.n	800a7d8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	f043 0202 	orr.w	r2, r3, #2
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	330c      	adds	r3, #12
 800a7dc:	2202      	movs	r2, #2
 800a7de:	4619      	mov	r1, r3
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 f8ea 	bl	800a9ba <USBD_CtlSendData>
    break;
 800a7e6:	e004      	b.n	800a7f2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800a7e8:	6839      	ldr	r1, [r7, #0]
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 f874 	bl	800a8d8 <USBD_CtlError>
    break;
 800a7f0:	bf00      	nop
  }
}
 800a7f2:	bf00      	nop
 800a7f4:	3708      	adds	r7, #8
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}

0800a7fa <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7fa:	b580      	push	{r7, lr}
 800a7fc:	b082      	sub	sp, #8
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
 800a802:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	885b      	ldrh	r3, [r3, #2]
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d106      	bne.n	800a81a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2201      	movs	r2, #1
 800a810:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 f92a 	bl	800aa6e <USBD_CtlSendStatus>
  }
}
 800a81a:	bf00      	nop
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}

0800a822 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b082      	sub	sp, #8
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
 800a82a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a832:	3b01      	subs	r3, #1
 800a834:	2b02      	cmp	r3, #2
 800a836:	d80b      	bhi.n	800a850 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	885b      	ldrh	r3, [r3, #2]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d10c      	bne.n	800a85a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 f910 	bl	800aa6e <USBD_CtlSendStatus>
      }
      break;
 800a84e:	e004      	b.n	800a85a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a850:	6839      	ldr	r1, [r7, #0]
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 f840 	bl	800a8d8 <USBD_CtlError>
      break;
 800a858:	e000      	b.n	800a85c <USBD_ClrFeature+0x3a>
      break;
 800a85a:	bf00      	nop
  }
}
 800a85c:	bf00      	nop
 800a85e:	3708      	adds	r7, #8
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	781a      	ldrb	r2, [r3, #0]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	3301      	adds	r3, #1
 800a87e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	781a      	ldrb	r2, [r3, #0]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	3301      	adds	r3, #1
 800a88c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a88e:	68f8      	ldr	r0, [r7, #12]
 800a890:	f7ff faa7 	bl	8009de2 <SWAPBYTE>
 800a894:	4603      	mov	r3, r0
 800a896:	461a      	mov	r2, r3
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	3301      	adds	r3, #1
 800a8a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a8a8:	68f8      	ldr	r0, [r7, #12]
 800a8aa:	f7ff fa9a 	bl	8009de2 <SWAPBYTE>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	3301      	adds	r3, #1
 800a8c0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f7ff fa8d 	bl	8009de2 <SWAPBYTE>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	80da      	strh	r2, [r3, #6]
}
 800a8d0:	bf00      	nop
 800a8d2:	3710      	adds	r7, #16
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8e2:	2180      	movs	r1, #128	; 0x80
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 fd31 	bl	800b34c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a8ea:	2100      	movs	r1, #0
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 fd2d 	bl	800b34c <USBD_LL_StallEP>
}
 800a8f2:	bf00      	nop
 800a8f4:	3708      	adds	r7, #8
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b086      	sub	sp, #24
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	60f8      	str	r0, [r7, #12]
 800a902:	60b9      	str	r1, [r7, #8]
 800a904:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a906:	2300      	movs	r3, #0
 800a908:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d036      	beq.n	800a97e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a914:	6938      	ldr	r0, [r7, #16]
 800a916:	f000 f836 	bl	800a986 <USBD_GetLen>
 800a91a:	4603      	mov	r3, r0
 800a91c:	3301      	adds	r3, #1
 800a91e:	b29b      	uxth	r3, r3
 800a920:	005b      	lsls	r3, r3, #1
 800a922:	b29a      	uxth	r2, r3
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a928:	7dfb      	ldrb	r3, [r7, #23]
 800a92a:	68ba      	ldr	r2, [r7, #8]
 800a92c:	4413      	add	r3, r2
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	7812      	ldrb	r2, [r2, #0]
 800a932:	701a      	strb	r2, [r3, #0]
  idx++;
 800a934:	7dfb      	ldrb	r3, [r7, #23]
 800a936:	3301      	adds	r3, #1
 800a938:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a93a:	7dfb      	ldrb	r3, [r7, #23]
 800a93c:	68ba      	ldr	r2, [r7, #8]
 800a93e:	4413      	add	r3, r2
 800a940:	2203      	movs	r2, #3
 800a942:	701a      	strb	r2, [r3, #0]
  idx++;
 800a944:	7dfb      	ldrb	r3, [r7, #23]
 800a946:	3301      	adds	r3, #1
 800a948:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a94a:	e013      	b.n	800a974 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a94c:	7dfb      	ldrb	r3, [r7, #23]
 800a94e:	68ba      	ldr	r2, [r7, #8]
 800a950:	4413      	add	r3, r2
 800a952:	693a      	ldr	r2, [r7, #16]
 800a954:	7812      	ldrb	r2, [r2, #0]
 800a956:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	3301      	adds	r3, #1
 800a95c:	613b      	str	r3, [r7, #16]
    idx++;
 800a95e:	7dfb      	ldrb	r3, [r7, #23]
 800a960:	3301      	adds	r3, #1
 800a962:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a964:	7dfb      	ldrb	r3, [r7, #23]
 800a966:	68ba      	ldr	r2, [r7, #8]
 800a968:	4413      	add	r3, r2
 800a96a:	2200      	movs	r2, #0
 800a96c:	701a      	strb	r2, [r3, #0]
    idx++;
 800a96e:	7dfb      	ldrb	r3, [r7, #23]
 800a970:	3301      	adds	r3, #1
 800a972:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d1e7      	bne.n	800a94c <USBD_GetString+0x52>
 800a97c:	e000      	b.n	800a980 <USBD_GetString+0x86>
    return;
 800a97e:	bf00      	nop
  }
}
 800a980:	3718      	adds	r7, #24
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a986:	b480      	push	{r7}
 800a988:	b085      	sub	sp, #20
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a98e:	2300      	movs	r3, #0
 800a990:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a996:	e005      	b.n	800a9a4 <USBD_GetLen+0x1e>
  {
    len++;
 800a998:	7bfb      	ldrb	r3, [r7, #15]
 800a99a:	3301      	adds	r3, #1
 800a99c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1f5      	bne.n	800a998 <USBD_GetLen+0x12>
  }

  return len;
 800a9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3714      	adds	r7, #20
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr

0800a9ba <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b084      	sub	sp, #16
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	60f8      	str	r0, [r7, #12]
 800a9c2:	60b9      	str	r1, [r7, #8]
 800a9c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2202      	movs	r2, #2
 800a9ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	68ba      	ldr	r2, [r7, #8]
 800a9de:	2100      	movs	r1, #0
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	f000 fd81 	bl	800b4e8 <USBD_LL_Transmit>

  return USBD_OK;
 800a9e6:	2300      	movs	r3, #0
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	2100      	movs	r1, #0
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	f000 fd70 	bl	800b4e8 <USBD_LL_Transmit>

  return USBD_OK;
 800aa08:	2300      	movs	r3, #0
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3710      	adds	r7, #16
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}

0800aa12 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800aa12:	b580      	push	{r7, lr}
 800aa14:	b084      	sub	sp, #16
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	60f8      	str	r0, [r7, #12]
 800aa1a:	60b9      	str	r1, [r7, #8]
 800aa1c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2203      	movs	r2, #3
 800aa22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	68ba      	ldr	r2, [r7, #8]
 800aa3a:	2100      	movs	r1, #0
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	f000 fd8b 	bl	800b558 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	68ba      	ldr	r2, [r7, #8]
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f000 fd7a 	bl	800b558 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa64:	2300      	movs	r3, #0
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3710      	adds	r7, #16
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}

0800aa6e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	b082      	sub	sp, #8
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2204      	movs	r2, #4
 800aa7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aa7e:	2300      	movs	r3, #0
 800aa80:	2200      	movs	r2, #0
 800aa82:	2100      	movs	r1, #0
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 fd2f 	bl	800b4e8 <USBD_LL_Transmit>

  return USBD_OK;
 800aa8a:	2300      	movs	r3, #0
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3708      	adds	r7, #8
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2205      	movs	r2, #5
 800aaa0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	2100      	movs	r1, #0
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f000 fd54 	bl	800b558 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aab0:	2300      	movs	r3, #0
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3708      	adds	r7, #8
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
	...

0800aabc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800aac0:	2200      	movs	r2, #0
 800aac2:	4912      	ldr	r1, [pc, #72]	; (800ab0c <MX_USB_DEVICE_Init+0x50>)
 800aac4:	4812      	ldr	r0, [pc, #72]	; (800ab10 <MX_USB_DEVICE_Init+0x54>)
 800aac6:	f7fe fec7 	bl	8009858 <USBD_Init>
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d001      	beq.n	800aad4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800aad0:	f7f7 faf0 	bl	80020b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800aad4:	490f      	ldr	r1, [pc, #60]	; (800ab14 <MX_USB_DEVICE_Init+0x58>)
 800aad6:	480e      	ldr	r0, [pc, #56]	; (800ab10 <MX_USB_DEVICE_Init+0x54>)
 800aad8:	f7fe feee 	bl	80098b8 <USBD_RegisterClass>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d001      	beq.n	800aae6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800aae2:	f7f7 fae7 	bl	80020b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800aae6:	490c      	ldr	r1, [pc, #48]	; (800ab18 <MX_USB_DEVICE_Init+0x5c>)
 800aae8:	4809      	ldr	r0, [pc, #36]	; (800ab10 <MX_USB_DEVICE_Init+0x54>)
 800aaea:	f7fe fe49 	bl	8009780 <USBD_CDC_RegisterInterface>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d001      	beq.n	800aaf8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800aaf4:	f7f7 fade 	bl	80020b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800aaf8:	4805      	ldr	r0, [pc, #20]	; (800ab10 <MX_USB_DEVICE_Init+0x54>)
 800aafa:	f7fe ff04 	bl	8009906 <USBD_Start>
 800aafe:	4603      	mov	r3, r0
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d001      	beq.n	800ab08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ab04:	f7f7 fad6 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ab08:	bf00      	nop
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	20000130 	.word	0x20000130
 800ab10:	20002434 	.word	0x20002434
 800ab14:	20000018 	.word	0x20000018
 800ab18:	2000011c 	.word	0x2000011c

0800ab1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ab20:	2200      	movs	r2, #0
 800ab22:	4905      	ldr	r1, [pc, #20]	; (800ab38 <CDC_Init_FS+0x1c>)
 800ab24:	4805      	ldr	r0, [pc, #20]	; (800ab3c <CDC_Init_FS+0x20>)
 800ab26:	f7fe fe40 	bl	80097aa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ab2a:	4905      	ldr	r1, [pc, #20]	; (800ab40 <CDC_Init_FS+0x24>)
 800ab2c:	4803      	ldr	r0, [pc, #12]	; (800ab3c <CDC_Init_FS+0x20>)
 800ab2e:	f7fe fe55 	bl	80097dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ab32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	20002f04 	.word	0x20002f04
 800ab3c:	20002434 	.word	0x20002434
 800ab40:	20002704 	.word	0x20002704

0800ab44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ab44:	b480      	push	{r7}
 800ab46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ab48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	6039      	str	r1, [r7, #0]
 800ab5e:	71fb      	strb	r3, [r7, #7]
 800ab60:	4613      	mov	r3, r2
 800ab62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ab64:	79fb      	ldrb	r3, [r7, #7]
 800ab66:	2b23      	cmp	r3, #35	; 0x23
 800ab68:	d84a      	bhi.n	800ac00 <CDC_Control_FS+0xac>
 800ab6a:	a201      	add	r2, pc, #4	; (adr r2, 800ab70 <CDC_Control_FS+0x1c>)
 800ab6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab70:	0800ac01 	.word	0x0800ac01
 800ab74:	0800ac01 	.word	0x0800ac01
 800ab78:	0800ac01 	.word	0x0800ac01
 800ab7c:	0800ac01 	.word	0x0800ac01
 800ab80:	0800ac01 	.word	0x0800ac01
 800ab84:	0800ac01 	.word	0x0800ac01
 800ab88:	0800ac01 	.word	0x0800ac01
 800ab8c:	0800ac01 	.word	0x0800ac01
 800ab90:	0800ac01 	.word	0x0800ac01
 800ab94:	0800ac01 	.word	0x0800ac01
 800ab98:	0800ac01 	.word	0x0800ac01
 800ab9c:	0800ac01 	.word	0x0800ac01
 800aba0:	0800ac01 	.word	0x0800ac01
 800aba4:	0800ac01 	.word	0x0800ac01
 800aba8:	0800ac01 	.word	0x0800ac01
 800abac:	0800ac01 	.word	0x0800ac01
 800abb0:	0800ac01 	.word	0x0800ac01
 800abb4:	0800ac01 	.word	0x0800ac01
 800abb8:	0800ac01 	.word	0x0800ac01
 800abbc:	0800ac01 	.word	0x0800ac01
 800abc0:	0800ac01 	.word	0x0800ac01
 800abc4:	0800ac01 	.word	0x0800ac01
 800abc8:	0800ac01 	.word	0x0800ac01
 800abcc:	0800ac01 	.word	0x0800ac01
 800abd0:	0800ac01 	.word	0x0800ac01
 800abd4:	0800ac01 	.word	0x0800ac01
 800abd8:	0800ac01 	.word	0x0800ac01
 800abdc:	0800ac01 	.word	0x0800ac01
 800abe0:	0800ac01 	.word	0x0800ac01
 800abe4:	0800ac01 	.word	0x0800ac01
 800abe8:	0800ac01 	.word	0x0800ac01
 800abec:	0800ac01 	.word	0x0800ac01
 800abf0:	0800ac01 	.word	0x0800ac01
 800abf4:	0800ac01 	.word	0x0800ac01
 800abf8:	0800ac01 	.word	0x0800ac01
 800abfc:	0800ac01 	.word	0x0800ac01
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ac00:	bf00      	nop
  }

  return (USBD_OK);
 800ac02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	370c      	adds	r7, #12
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr

0800ac10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ac1a:	6879      	ldr	r1, [r7, #4]
 800ac1c:	4805      	ldr	r0, [pc, #20]	; (800ac34 <CDC_Receive_FS+0x24>)
 800ac1e:	f7fe fddd 	bl	80097dc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ac22:	4804      	ldr	r0, [pc, #16]	; (800ac34 <CDC_Receive_FS+0x24>)
 800ac24:	f7fe fdee 	bl	8009804 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ac28:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3708      	adds	r7, #8
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	20002434 	.word	0x20002434

0800ac38 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b087      	sub	sp, #28
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	4613      	mov	r3, r2
 800ac44:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ac46:	2300      	movs	r3, #0
 800ac48:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ac4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	371c      	adds	r7, #28
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr
	...

0800ac5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b083      	sub	sp, #12
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	4603      	mov	r3, r0
 800ac64:	6039      	str	r1, [r7, #0]
 800ac66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	2212      	movs	r2, #18
 800ac6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ac6e:	4b03      	ldr	r3, [pc, #12]	; (800ac7c <USBD_FS_DeviceDescriptor+0x20>)
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	370c      	adds	r7, #12
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr
 800ac7c:	20000150 	.word	0x20000150

0800ac80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b083      	sub	sp, #12
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	4603      	mov	r3, r0
 800ac88:	6039      	str	r1, [r7, #0]
 800ac8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	2204      	movs	r2, #4
 800ac90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ac92:	4b03      	ldr	r3, [pc, #12]	; (800aca0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr
 800aca0:	20000170 	.word	0x20000170

0800aca4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	4603      	mov	r3, r0
 800acac:	6039      	str	r1, [r7, #0]
 800acae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800acb0:	79fb      	ldrb	r3, [r7, #7]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d105      	bne.n	800acc2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800acb6:	683a      	ldr	r2, [r7, #0]
 800acb8:	4907      	ldr	r1, [pc, #28]	; (800acd8 <USBD_FS_ProductStrDescriptor+0x34>)
 800acba:	4808      	ldr	r0, [pc, #32]	; (800acdc <USBD_FS_ProductStrDescriptor+0x38>)
 800acbc:	f7ff fe1d 	bl	800a8fa <USBD_GetString>
 800acc0:	e004      	b.n	800accc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800acc2:	683a      	ldr	r2, [r7, #0]
 800acc4:	4904      	ldr	r1, [pc, #16]	; (800acd8 <USBD_FS_ProductStrDescriptor+0x34>)
 800acc6:	4805      	ldr	r0, [pc, #20]	; (800acdc <USBD_FS_ProductStrDescriptor+0x38>)
 800acc8:	f7ff fe17 	bl	800a8fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800accc:	4b02      	ldr	r3, [pc, #8]	; (800acd8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3708      	adds	r7, #8
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	20003704 	.word	0x20003704
 800acdc:	0800dab4 	.word	0x0800dab4

0800ace0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b082      	sub	sp, #8
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	4603      	mov	r3, r0
 800ace8:	6039      	str	r1, [r7, #0]
 800acea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800acec:	683a      	ldr	r2, [r7, #0]
 800acee:	4904      	ldr	r1, [pc, #16]	; (800ad00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800acf0:	4804      	ldr	r0, [pc, #16]	; (800ad04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800acf2:	f7ff fe02 	bl	800a8fa <USBD_GetString>
  return USBD_StrDesc;
 800acf6:	4b02      	ldr	r3, [pc, #8]	; (800ad00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3708      	adds	r7, #8
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}
 800ad00:	20003704 	.word	0x20003704
 800ad04:	0800dacc 	.word	0x0800dacc

0800ad08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	4603      	mov	r3, r0
 800ad10:	6039      	str	r1, [r7, #0]
 800ad12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	221a      	movs	r2, #26
 800ad18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ad1a:	f000 f855 	bl	800adc8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ad1e:	4b02      	ldr	r3, [pc, #8]	; (800ad28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3708      	adds	r7, #8
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	20000174 	.word	0x20000174

0800ad2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	4603      	mov	r3, r0
 800ad34:	6039      	str	r1, [r7, #0]
 800ad36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ad38:	79fb      	ldrb	r3, [r7, #7]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d105      	bne.n	800ad4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ad3e:	683a      	ldr	r2, [r7, #0]
 800ad40:	4907      	ldr	r1, [pc, #28]	; (800ad60 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ad42:	4808      	ldr	r0, [pc, #32]	; (800ad64 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ad44:	f7ff fdd9 	bl	800a8fa <USBD_GetString>
 800ad48:	e004      	b.n	800ad54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ad4a:	683a      	ldr	r2, [r7, #0]
 800ad4c:	4904      	ldr	r1, [pc, #16]	; (800ad60 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ad4e:	4805      	ldr	r0, [pc, #20]	; (800ad64 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ad50:	f7ff fdd3 	bl	800a8fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad54:	4b02      	ldr	r3, [pc, #8]	; (800ad60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3708      	adds	r7, #8
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
 800ad5e:	bf00      	nop
 800ad60:	20003704 	.word	0x20003704
 800ad64:	0800dae0 	.word	0x0800dae0

0800ad68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	4603      	mov	r3, r0
 800ad70:	6039      	str	r1, [r7, #0]
 800ad72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ad74:	79fb      	ldrb	r3, [r7, #7]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d105      	bne.n	800ad86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ad7a:	683a      	ldr	r2, [r7, #0]
 800ad7c:	4907      	ldr	r1, [pc, #28]	; (800ad9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ad7e:	4808      	ldr	r0, [pc, #32]	; (800ada0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ad80:	f7ff fdbb 	bl	800a8fa <USBD_GetString>
 800ad84:	e004      	b.n	800ad90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ad86:	683a      	ldr	r2, [r7, #0]
 800ad88:	4904      	ldr	r1, [pc, #16]	; (800ad9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ad8a:	4805      	ldr	r0, [pc, #20]	; (800ada0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ad8c:	f7ff fdb5 	bl	800a8fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad90:	4b02      	ldr	r3, [pc, #8]	; (800ad9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3708      	adds	r7, #8
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	20003704 	.word	0x20003704
 800ada0:	0800daec 	.word	0x0800daec

0800ada4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b083      	sub	sp, #12
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	4603      	mov	r3, r0
 800adac:	6039      	str	r1, [r7, #0]
 800adae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	220c      	movs	r2, #12
 800adb4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800adb6:	4b03      	ldr	r3, [pc, #12]	; (800adc4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800adb8:	4618      	mov	r0, r3
 800adba:	370c      	adds	r7, #12
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr
 800adc4:	20000164 	.word	0x20000164

0800adc8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800adce:	4b0f      	ldr	r3, [pc, #60]	; (800ae0c <Get_SerialNum+0x44>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800add4:	4b0e      	ldr	r3, [pc, #56]	; (800ae10 <Get_SerialNum+0x48>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800adda:	4b0e      	ldr	r3, [pc, #56]	; (800ae14 <Get_SerialNum+0x4c>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	4413      	add	r3, r2
 800ade6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d009      	beq.n	800ae02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800adee:	2208      	movs	r2, #8
 800adf0:	4909      	ldr	r1, [pc, #36]	; (800ae18 <Get_SerialNum+0x50>)
 800adf2:	68f8      	ldr	r0, [r7, #12]
 800adf4:	f000 f814 	bl	800ae20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800adf8:	2204      	movs	r2, #4
 800adfa:	4908      	ldr	r1, [pc, #32]	; (800ae1c <Get_SerialNum+0x54>)
 800adfc:	68b8      	ldr	r0, [r7, #8]
 800adfe:	f000 f80f 	bl	800ae20 <IntToUnicode>
  }
}
 800ae02:	bf00      	nop
 800ae04:	3710      	adds	r7, #16
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	1fff7590 	.word	0x1fff7590
 800ae10:	1fff7594 	.word	0x1fff7594
 800ae14:	1fff7598 	.word	0x1fff7598
 800ae18:	20000176 	.word	0x20000176
 800ae1c:	20000186 	.word	0x20000186

0800ae20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b087      	sub	sp, #28
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	60f8      	str	r0, [r7, #12]
 800ae28:	60b9      	str	r1, [r7, #8]
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ae32:	2300      	movs	r3, #0
 800ae34:	75fb      	strb	r3, [r7, #23]
 800ae36:	e027      	b.n	800ae88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	0f1b      	lsrs	r3, r3, #28
 800ae3c:	2b09      	cmp	r3, #9
 800ae3e:	d80b      	bhi.n	800ae58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	0f1b      	lsrs	r3, r3, #28
 800ae44:	b2da      	uxtb	r2, r3
 800ae46:	7dfb      	ldrb	r3, [r7, #23]
 800ae48:	005b      	lsls	r3, r3, #1
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	440b      	add	r3, r1
 800ae50:	3230      	adds	r2, #48	; 0x30
 800ae52:	b2d2      	uxtb	r2, r2
 800ae54:	701a      	strb	r2, [r3, #0]
 800ae56:	e00a      	b.n	800ae6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	0f1b      	lsrs	r3, r3, #28
 800ae5c:	b2da      	uxtb	r2, r3
 800ae5e:	7dfb      	ldrb	r3, [r7, #23]
 800ae60:	005b      	lsls	r3, r3, #1
 800ae62:	4619      	mov	r1, r3
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	440b      	add	r3, r1
 800ae68:	3237      	adds	r2, #55	; 0x37
 800ae6a:	b2d2      	uxtb	r2, r2
 800ae6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	011b      	lsls	r3, r3, #4
 800ae72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ae74:	7dfb      	ldrb	r3, [r7, #23]
 800ae76:	005b      	lsls	r3, r3, #1
 800ae78:	3301      	adds	r3, #1
 800ae7a:	68ba      	ldr	r2, [r7, #8]
 800ae7c:	4413      	add	r3, r2
 800ae7e:	2200      	movs	r2, #0
 800ae80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ae82:	7dfb      	ldrb	r3, [r7, #23]
 800ae84:	3301      	adds	r3, #1
 800ae86:	75fb      	strb	r3, [r7, #23]
 800ae88:	7dfa      	ldrb	r2, [r7, #23]
 800ae8a:	79fb      	ldrb	r3, [r7, #7]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d3d3      	bcc.n	800ae38 <IntToUnicode+0x18>
  }
}
 800ae90:	bf00      	nop
 800ae92:	371c      	adds	r7, #28
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b08a      	sub	sp, #40	; 0x28
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aea4:	f107 0314 	add.w	r3, r7, #20
 800aea8:	2200      	movs	r2, #0
 800aeaa:	601a      	str	r2, [r3, #0]
 800aeac:	605a      	str	r2, [r3, #4]
 800aeae:	609a      	str	r2, [r3, #8]
 800aeb0:	60da      	str	r2, [r3, #12]
 800aeb2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aebc:	d14e      	bne.n	800af5c <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aebe:	4b29      	ldr	r3, [pc, #164]	; (800af64 <HAL_PCD_MspInit+0xc8>)
 800aec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aec2:	4a28      	ldr	r2, [pc, #160]	; (800af64 <HAL_PCD_MspInit+0xc8>)
 800aec4:	f043 0301 	orr.w	r3, r3, #1
 800aec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aeca:	4b26      	ldr	r3, [pc, #152]	; (800af64 <HAL_PCD_MspInit+0xc8>)
 800aecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aece:	f003 0301 	and.w	r3, r3, #1
 800aed2:	613b      	str	r3, [r7, #16]
 800aed4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = OTG_FS_DP_Pin|OTG_FS_DM_Pin;
 800aed6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800aeda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aedc:	2302      	movs	r3, #2
 800aede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aee0:	2300      	movs	r3, #0
 800aee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aee4:	2303      	movs	r3, #3
 800aee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aee8:	230a      	movs	r3, #10
 800aeea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aeec:	f107 0314 	add.w	r3, r7, #20
 800aef0:	4619      	mov	r1, r3
 800aef2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aef6:	f7f9 f9d7 	bl	80042a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800aefa:	4b1a      	ldr	r3, [pc, #104]	; (800af64 <HAL_PCD_MspInit+0xc8>)
 800aefc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aefe:	4a19      	ldr	r2, [pc, #100]	; (800af64 <HAL_PCD_MspInit+0xc8>)
 800af00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800af04:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af06:	4b17      	ldr	r3, [pc, #92]	; (800af64 <HAL_PCD_MspInit+0xc8>)
 800af08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800af0e:	60fb      	str	r3, [r7, #12]
 800af10:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800af12:	4b14      	ldr	r3, [pc, #80]	; (800af64 <HAL_PCD_MspInit+0xc8>)
 800af14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d114      	bne.n	800af48 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800af1e:	4b11      	ldr	r3, [pc, #68]	; (800af64 <HAL_PCD_MspInit+0xc8>)
 800af20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af22:	4a10      	ldr	r2, [pc, #64]	; (800af64 <HAL_PCD_MspInit+0xc8>)
 800af24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af28:	6593      	str	r3, [r2, #88]	; 0x58
 800af2a:	4b0e      	ldr	r3, [pc, #56]	; (800af64 <HAL_PCD_MspInit+0xc8>)
 800af2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af32:	60bb      	str	r3, [r7, #8]
 800af34:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800af36:	f7fa fcdf 	bl	80058f8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800af3a:	4b0a      	ldr	r3, [pc, #40]	; (800af64 <HAL_PCD_MspInit+0xc8>)
 800af3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af3e:	4a09      	ldr	r2, [pc, #36]	; (800af64 <HAL_PCD_MspInit+0xc8>)
 800af40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af44:	6593      	str	r3, [r2, #88]	; 0x58
 800af46:	e001      	b.n	800af4c <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800af48:	f7fa fcd6 	bl	80058f8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800af4c:	2200      	movs	r2, #0
 800af4e:	2100      	movs	r1, #0
 800af50:	2043      	movs	r0, #67	; 0x43
 800af52:	f7f8 fe5a 	bl	8003c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800af56:	2043      	movs	r0, #67	; 0x43
 800af58:	f7f8 fe73 	bl	8003c42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800af5c:	bf00      	nop
 800af5e:	3728      	adds	r7, #40	; 0x28
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	40021000 	.word	0x40021000

0800af68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800af7c:	4619      	mov	r1, r3
 800af7e:	4610      	mov	r0, r2
 800af80:	f7fe fd0c 	bl	800999c <USBD_LL_SetupStage>
}
 800af84:	bf00      	nop
 800af86:	3708      	adds	r7, #8
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	460b      	mov	r3, r1
 800af96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800af9e:	78fa      	ldrb	r2, [r7, #3]
 800afa0:	6879      	ldr	r1, [r7, #4]
 800afa2:	4613      	mov	r3, r2
 800afa4:	00db      	lsls	r3, r3, #3
 800afa6:	1a9b      	subs	r3, r3, r2
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	440b      	add	r3, r1
 800afac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	78fb      	ldrb	r3, [r7, #3]
 800afb4:	4619      	mov	r1, r3
 800afb6:	f7fe fd44 	bl	8009a42 <USBD_LL_DataOutStage>
}
 800afba:	bf00      	nop
 800afbc:	3708      	adds	r7, #8
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}

0800afc2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afc2:	b580      	push	{r7, lr}
 800afc4:	b082      	sub	sp, #8
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
 800afca:	460b      	mov	r3, r1
 800afcc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800afd4:	78fa      	ldrb	r2, [r7, #3]
 800afd6:	6879      	ldr	r1, [r7, #4]
 800afd8:	4613      	mov	r3, r2
 800afda:	00db      	lsls	r3, r3, #3
 800afdc:	1a9b      	subs	r3, r3, r2
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	440b      	add	r3, r1
 800afe2:	3348      	adds	r3, #72	; 0x48
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	78fb      	ldrb	r3, [r7, #3]
 800afe8:	4619      	mov	r1, r3
 800afea:	f7fe fd8d 	bl	8009b08 <USBD_LL_DataInStage>
}
 800afee:	bf00      	nop
 800aff0:	3708      	adds	r7, #8
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}

0800aff6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aff6:	b580      	push	{r7, lr}
 800aff8:	b082      	sub	sp, #8
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b004:	4618      	mov	r0, r3
 800b006:	f7fe fe91 	bl	8009d2c <USBD_LL_SOF>
}
 800b00a:	bf00      	nop
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b084      	sub	sp, #16
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b01a:	2301      	movs	r3, #1
 800b01c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	68db      	ldr	r3, [r3, #12]
 800b022:	2b02      	cmp	r3, #2
 800b024:	d001      	beq.n	800b02a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b026:	f7f7 f845 	bl	80020b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b030:	7bfa      	ldrb	r2, [r7, #15]
 800b032:	4611      	mov	r1, r2
 800b034:	4618      	mov	r0, r3
 800b036:	f7fe fe3e 	bl	8009cb6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b040:	4618      	mov	r0, r3
 800b042:	f7fe fdf7 	bl	8009c34 <USBD_LL_Reset>
}
 800b046:	bf00      	nop
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
	...

0800b050 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	6812      	ldr	r2, [r2, #0]
 800b066:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b06a:	f043 0301 	orr.w	r3, r3, #1
 800b06e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b076:	4618      	mov	r0, r3
 800b078:	f7fe fe2d 	bl	8009cd6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6a1b      	ldr	r3, [r3, #32]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d005      	beq.n	800b090 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b084:	4b04      	ldr	r3, [pc, #16]	; (800b098 <HAL_PCD_SuspendCallback+0x48>)
 800b086:	691b      	ldr	r3, [r3, #16]
 800b088:	4a03      	ldr	r2, [pc, #12]	; (800b098 <HAL_PCD_SuspendCallback+0x48>)
 800b08a:	f043 0306 	orr.w	r3, r3, #6
 800b08e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b090:	bf00      	nop
 800b092:	3708      	adds	r7, #8
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}
 800b098:	e000ed00 	.word	0xe000ed00

0800b09c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	6812      	ldr	r2, [r2, #0]
 800b0b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b0b6:	f023 0301 	bic.w	r3, r3, #1
 800b0ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6a1b      	ldr	r3, [r3, #32]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d007      	beq.n	800b0d4 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b0c4:	4b08      	ldr	r3, [pc, #32]	; (800b0e8 <HAL_PCD_ResumeCallback+0x4c>)
 800b0c6:	691b      	ldr	r3, [r3, #16]
 800b0c8:	4a07      	ldr	r2, [pc, #28]	; (800b0e8 <HAL_PCD_ResumeCallback+0x4c>)
 800b0ca:	f023 0306 	bic.w	r3, r3, #6
 800b0ce:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b0d0:	f000 fadc 	bl	800b68c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7fe fe10 	bl	8009d00 <USBD_LL_Resume>
}
 800b0e0:	bf00      	nop
 800b0e2:	3708      	adds	r7, #8
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	e000ed00 	.word	0xe000ed00

0800b0ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b0fe:	78fa      	ldrb	r2, [r7, #3]
 800b100:	4611      	mov	r1, r2
 800b102:	4618      	mov	r0, r3
 800b104:	f7fe fe39 	bl	8009d7a <USBD_LL_IsoOUTIncomplete>
}
 800b108:	bf00      	nop
 800b10a:	3708      	adds	r7, #8
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	460b      	mov	r3, r1
 800b11a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b122:	78fa      	ldrb	r2, [r7, #3]
 800b124:	4611      	mov	r1, r2
 800b126:	4618      	mov	r0, r3
 800b128:	f7fe fe1a 	bl	8009d60 <USBD_LL_IsoINIncomplete>
}
 800b12c:	bf00      	nop
 800b12e:	3708      	adds	r7, #8
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b142:	4618      	mov	r0, r3
 800b144:	f7fe fe26 	bl	8009d94 <USBD_LL_DevConnected>
}
 800b148:	bf00      	nop
 800b14a:	3708      	adds	r7, #8
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b15e:	4618      	mov	r0, r3
 800b160:	f7fe fe23 	bl	8009daa <USBD_LL_DevDisconnected>
}
 800b164:	bf00      	nop
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d139      	bne.n	800b1f0 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b17c:	4a1f      	ldr	r2, [pc, #124]	; (800b1fc <USBD_LL_Init+0x90>)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	4a1d      	ldr	r2, [pc, #116]	; (800b1fc <USBD_LL_Init+0x90>)
 800b188:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b18c:	4b1b      	ldr	r3, [pc, #108]	; (800b1fc <USBD_LL_Init+0x90>)
 800b18e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b192:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b194:	4b19      	ldr	r3, [pc, #100]	; (800b1fc <USBD_LL_Init+0x90>)
 800b196:	2206      	movs	r2, #6
 800b198:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b19a:	4b18      	ldr	r3, [pc, #96]	; (800b1fc <USBD_LL_Init+0x90>)
 800b19c:	2202      	movs	r2, #2
 800b19e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b1a0:	4b16      	ldr	r3, [pc, #88]	; (800b1fc <USBD_LL_Init+0x90>)
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b1a6:	4b15      	ldr	r3, [pc, #84]	; (800b1fc <USBD_LL_Init+0x90>)
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b1ac:	4b13      	ldr	r3, [pc, #76]	; (800b1fc <USBD_LL_Init+0x90>)
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800b1b2:	4b12      	ldr	r3, [pc, #72]	; (800b1fc <USBD_LL_Init+0x90>)
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b1b8:	4b10      	ldr	r3, [pc, #64]	; (800b1fc <USBD_LL_Init+0x90>)
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b1be:	4b0f      	ldr	r3, [pc, #60]	; (800b1fc <USBD_LL_Init+0x90>)
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b1c4:	480d      	ldr	r0, [pc, #52]	; (800b1fc <USBD_LL_Init+0x90>)
 800b1c6:	f7f9 fa33 	bl	8004630 <HAL_PCD_Init>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d001      	beq.n	800b1d4 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800b1d0:	f7f6 ff70 	bl	80020b4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b1d4:	2180      	movs	r1, #128	; 0x80
 800b1d6:	4809      	ldr	r0, [pc, #36]	; (800b1fc <USBD_LL_Init+0x90>)
 800b1d8:	f7fa fa95 	bl	8005706 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b1dc:	2240      	movs	r2, #64	; 0x40
 800b1de:	2100      	movs	r1, #0
 800b1e0:	4806      	ldr	r0, [pc, #24]	; (800b1fc <USBD_LL_Init+0x90>)
 800b1e2:	f7fa fa49 	bl	8005678 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b1e6:	2280      	movs	r2, #128	; 0x80
 800b1e8:	2101      	movs	r1, #1
 800b1ea:	4804      	ldr	r0, [pc, #16]	; (800b1fc <USBD_LL_Init+0x90>)
 800b1ec:	f7fa fa44 	bl	8005678 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b1f0:	2300      	movs	r3, #0
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3708      	adds	r7, #8
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	20003904 	.word	0x20003904

0800b200 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b208:	2300      	movs	r3, #0
 800b20a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b20c:	2300      	movs	r3, #0
 800b20e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b216:	4618      	mov	r0, r3
 800b218:	f7f9 fb2e 	bl	8004878 <HAL_PCD_Start>
 800b21c:	4603      	mov	r3, r0
 800b21e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b220:	7bbb      	ldrb	r3, [r7, #14]
 800b222:	2b03      	cmp	r3, #3
 800b224:	d816      	bhi.n	800b254 <USBD_LL_Start+0x54>
 800b226:	a201      	add	r2, pc, #4	; (adr r2, 800b22c <USBD_LL_Start+0x2c>)
 800b228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b22c:	0800b23d 	.word	0x0800b23d
 800b230:	0800b243 	.word	0x0800b243
 800b234:	0800b249 	.word	0x0800b249
 800b238:	0800b24f 	.word	0x0800b24f
    case HAL_OK :
      usb_status = USBD_OK;
 800b23c:	2300      	movs	r3, #0
 800b23e:	73fb      	strb	r3, [r7, #15]
    break;
 800b240:	e00b      	b.n	800b25a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b242:	2303      	movs	r3, #3
 800b244:	73fb      	strb	r3, [r7, #15]
    break;
 800b246:	e008      	b.n	800b25a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b248:	2301      	movs	r3, #1
 800b24a:	73fb      	strb	r3, [r7, #15]
    break;
 800b24c:	e005      	b.n	800b25a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b24e:	2303      	movs	r3, #3
 800b250:	73fb      	strb	r3, [r7, #15]
    break;
 800b252:	e002      	b.n	800b25a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800b254:	2303      	movs	r3, #3
 800b256:	73fb      	strb	r3, [r7, #15]
    break;
 800b258:	bf00      	nop
  }
  return usb_status;
 800b25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3710      	adds	r7, #16
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	4608      	mov	r0, r1
 800b26e:	4611      	mov	r1, r2
 800b270:	461a      	mov	r2, r3
 800b272:	4603      	mov	r3, r0
 800b274:	70fb      	strb	r3, [r7, #3]
 800b276:	460b      	mov	r3, r1
 800b278:	70bb      	strb	r3, [r7, #2]
 800b27a:	4613      	mov	r3, r2
 800b27c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b27e:	2300      	movs	r3, #0
 800b280:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b282:	2300      	movs	r3, #0
 800b284:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b28c:	78bb      	ldrb	r3, [r7, #2]
 800b28e:	883a      	ldrh	r2, [r7, #0]
 800b290:	78f9      	ldrb	r1, [r7, #3]
 800b292:	f7f9 fee9 	bl	8005068 <HAL_PCD_EP_Open>
 800b296:	4603      	mov	r3, r0
 800b298:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b29a:	7bbb      	ldrb	r3, [r7, #14]
 800b29c:	2b03      	cmp	r3, #3
 800b29e:	d817      	bhi.n	800b2d0 <USBD_LL_OpenEP+0x6c>
 800b2a0:	a201      	add	r2, pc, #4	; (adr r2, 800b2a8 <USBD_LL_OpenEP+0x44>)
 800b2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a6:	bf00      	nop
 800b2a8:	0800b2b9 	.word	0x0800b2b9
 800b2ac:	0800b2bf 	.word	0x0800b2bf
 800b2b0:	0800b2c5 	.word	0x0800b2c5
 800b2b4:	0800b2cb 	.word	0x0800b2cb
    case HAL_OK :
      usb_status = USBD_OK;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	73fb      	strb	r3, [r7, #15]
    break;
 800b2bc:	e00b      	b.n	800b2d6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b2be:	2303      	movs	r3, #3
 800b2c0:	73fb      	strb	r3, [r7, #15]
    break;
 800b2c2:	e008      	b.n	800b2d6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	73fb      	strb	r3, [r7, #15]
    break;
 800b2c8:	e005      	b.n	800b2d6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b2ca:	2303      	movs	r3, #3
 800b2cc:	73fb      	strb	r3, [r7, #15]
    break;
 800b2ce:	e002      	b.n	800b2d6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b2d0:	2303      	movs	r3, #3
 800b2d2:	73fb      	strb	r3, [r7, #15]
    break;
 800b2d4:	bf00      	nop
  }
  return usb_status;
 800b2d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3710      	adds	r7, #16
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b2fa:	78fa      	ldrb	r2, [r7, #3]
 800b2fc:	4611      	mov	r1, r2
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7f9 ff1a 	bl	8005138 <HAL_PCD_EP_Close>
 800b304:	4603      	mov	r3, r0
 800b306:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b308:	7bbb      	ldrb	r3, [r7, #14]
 800b30a:	2b03      	cmp	r3, #3
 800b30c:	d816      	bhi.n	800b33c <USBD_LL_CloseEP+0x5c>
 800b30e:	a201      	add	r2, pc, #4	; (adr r2, 800b314 <USBD_LL_CloseEP+0x34>)
 800b310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b314:	0800b325 	.word	0x0800b325
 800b318:	0800b32b 	.word	0x0800b32b
 800b31c:	0800b331 	.word	0x0800b331
 800b320:	0800b337 	.word	0x0800b337
    case HAL_OK :
      usb_status = USBD_OK;
 800b324:	2300      	movs	r3, #0
 800b326:	73fb      	strb	r3, [r7, #15]
    break;
 800b328:	e00b      	b.n	800b342 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b32a:	2303      	movs	r3, #3
 800b32c:	73fb      	strb	r3, [r7, #15]
    break;
 800b32e:	e008      	b.n	800b342 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b330:	2301      	movs	r3, #1
 800b332:	73fb      	strb	r3, [r7, #15]
    break;
 800b334:	e005      	b.n	800b342 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b336:	2303      	movs	r3, #3
 800b338:	73fb      	strb	r3, [r7, #15]
    break;
 800b33a:	e002      	b.n	800b342 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b33c:	2303      	movs	r3, #3
 800b33e:	73fb      	strb	r3, [r7, #15]
    break;
 800b340:	bf00      	nop
  }
  return usb_status;
 800b342:	7bfb      	ldrb	r3, [r7, #15]
}
 800b344:	4618      	mov	r0, r3
 800b346:	3710      	adds	r7, #16
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	460b      	mov	r3, r1
 800b356:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b358:	2300      	movs	r3, #0
 800b35a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b35c:	2300      	movs	r3, #0
 800b35e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b366:	78fa      	ldrb	r2, [r7, #3]
 800b368:	4611      	mov	r1, r2
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7f9 ffc1 	bl	80052f2 <HAL_PCD_EP_SetStall>
 800b370:	4603      	mov	r3, r0
 800b372:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b374:	7bbb      	ldrb	r3, [r7, #14]
 800b376:	2b03      	cmp	r3, #3
 800b378:	d816      	bhi.n	800b3a8 <USBD_LL_StallEP+0x5c>
 800b37a:	a201      	add	r2, pc, #4	; (adr r2, 800b380 <USBD_LL_StallEP+0x34>)
 800b37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b380:	0800b391 	.word	0x0800b391
 800b384:	0800b397 	.word	0x0800b397
 800b388:	0800b39d 	.word	0x0800b39d
 800b38c:	0800b3a3 	.word	0x0800b3a3
    case HAL_OK :
      usb_status = USBD_OK;
 800b390:	2300      	movs	r3, #0
 800b392:	73fb      	strb	r3, [r7, #15]
    break;
 800b394:	e00b      	b.n	800b3ae <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b396:	2303      	movs	r3, #3
 800b398:	73fb      	strb	r3, [r7, #15]
    break;
 800b39a:	e008      	b.n	800b3ae <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b39c:	2301      	movs	r3, #1
 800b39e:	73fb      	strb	r3, [r7, #15]
    break;
 800b3a0:	e005      	b.n	800b3ae <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b3a2:	2303      	movs	r3, #3
 800b3a4:	73fb      	strb	r3, [r7, #15]
    break;
 800b3a6:	e002      	b.n	800b3ae <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b3a8:	2303      	movs	r3, #3
 800b3aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b3ac:	bf00      	nop
  }
  return usb_status;
 800b3ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3710      	adds	r7, #16
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b3d2:	78fa      	ldrb	r2, [r7, #3]
 800b3d4:	4611      	mov	r1, r2
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f7f9 ffed 	bl	80053b6 <HAL_PCD_EP_ClrStall>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b3e0:	7bbb      	ldrb	r3, [r7, #14]
 800b3e2:	2b03      	cmp	r3, #3
 800b3e4:	d816      	bhi.n	800b414 <USBD_LL_ClearStallEP+0x5c>
 800b3e6:	a201      	add	r2, pc, #4	; (adr r2, 800b3ec <USBD_LL_ClearStallEP+0x34>)
 800b3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ec:	0800b3fd 	.word	0x0800b3fd
 800b3f0:	0800b403 	.word	0x0800b403
 800b3f4:	0800b409 	.word	0x0800b409
 800b3f8:	0800b40f 	.word	0x0800b40f
    case HAL_OK :
      usb_status = USBD_OK;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	73fb      	strb	r3, [r7, #15]
    break;
 800b400:	e00b      	b.n	800b41a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b402:	2303      	movs	r3, #3
 800b404:	73fb      	strb	r3, [r7, #15]
    break;
 800b406:	e008      	b.n	800b41a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b408:	2301      	movs	r3, #1
 800b40a:	73fb      	strb	r3, [r7, #15]
    break;
 800b40c:	e005      	b.n	800b41a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b40e:	2303      	movs	r3, #3
 800b410:	73fb      	strb	r3, [r7, #15]
    break;
 800b412:	e002      	b.n	800b41a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b414:	2303      	movs	r3, #3
 800b416:	73fb      	strb	r3, [r7, #15]
    break;
 800b418:	bf00      	nop
  }
  return usb_status;
 800b41a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3710      	adds	r7, #16
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	460b      	mov	r3, r1
 800b42e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b436:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b438:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	da0b      	bge.n	800b458 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b440:	78fb      	ldrb	r3, [r7, #3]
 800b442:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b446:	68f9      	ldr	r1, [r7, #12]
 800b448:	4613      	mov	r3, r2
 800b44a:	00db      	lsls	r3, r3, #3
 800b44c:	1a9b      	subs	r3, r3, r2
 800b44e:	009b      	lsls	r3, r3, #2
 800b450:	440b      	add	r3, r1
 800b452:	333e      	adds	r3, #62	; 0x3e
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	e00b      	b.n	800b470 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b458:	78fb      	ldrb	r3, [r7, #3]
 800b45a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b45e:	68f9      	ldr	r1, [r7, #12]
 800b460:	4613      	mov	r3, r2
 800b462:	00db      	lsls	r3, r3, #3
 800b464:	1a9b      	subs	r3, r3, r2
 800b466:	009b      	lsls	r3, r3, #2
 800b468:	440b      	add	r3, r1
 800b46a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b46e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b470:	4618      	mov	r0, r3
 800b472:	3714      	adds	r7, #20
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	460b      	mov	r3, r1
 800b486:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b488:	2300      	movs	r3, #0
 800b48a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b48c:	2300      	movs	r3, #0
 800b48e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b496:	78fa      	ldrb	r2, [r7, #3]
 800b498:	4611      	mov	r1, r2
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7f9 fdbf 	bl	800501e <HAL_PCD_SetAddress>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b4a4:	7bbb      	ldrb	r3, [r7, #14]
 800b4a6:	2b03      	cmp	r3, #3
 800b4a8:	d816      	bhi.n	800b4d8 <USBD_LL_SetUSBAddress+0x5c>
 800b4aa:	a201      	add	r2, pc, #4	; (adr r2, 800b4b0 <USBD_LL_SetUSBAddress+0x34>)
 800b4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4b0:	0800b4c1 	.word	0x0800b4c1
 800b4b4:	0800b4c7 	.word	0x0800b4c7
 800b4b8:	0800b4cd 	.word	0x0800b4cd
 800b4bc:	0800b4d3 	.word	0x0800b4d3
    case HAL_OK :
      usb_status = USBD_OK;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b4c4:	e00b      	b.n	800b4de <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b4c6:	2303      	movs	r3, #3
 800b4c8:	73fb      	strb	r3, [r7, #15]
    break;
 800b4ca:	e008      	b.n	800b4de <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b4d0:	e005      	b.n	800b4de <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b4d2:	2303      	movs	r3, #3
 800b4d4:	73fb      	strb	r3, [r7, #15]
    break;
 800b4d6:	e002      	b.n	800b4de <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800b4d8:	2303      	movs	r3, #3
 800b4da:	73fb      	strb	r3, [r7, #15]
    break;
 800b4dc:	bf00      	nop
  }
  return usb_status;
 800b4de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3710      	adds	r7, #16
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b086      	sub	sp, #24
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	607a      	str	r2, [r7, #4]
 800b4f2:	603b      	str	r3, [r7, #0]
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b506:	7af9      	ldrb	r1, [r7, #11]
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	f7f9 feb4 	bl	8005278 <HAL_PCD_EP_Transmit>
 800b510:	4603      	mov	r3, r0
 800b512:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b514:	7dbb      	ldrb	r3, [r7, #22]
 800b516:	2b03      	cmp	r3, #3
 800b518:	d816      	bhi.n	800b548 <USBD_LL_Transmit+0x60>
 800b51a:	a201      	add	r2, pc, #4	; (adr r2, 800b520 <USBD_LL_Transmit+0x38>)
 800b51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b520:	0800b531 	.word	0x0800b531
 800b524:	0800b537 	.word	0x0800b537
 800b528:	0800b53d 	.word	0x0800b53d
 800b52c:	0800b543 	.word	0x0800b543
    case HAL_OK :
      usb_status = USBD_OK;
 800b530:	2300      	movs	r3, #0
 800b532:	75fb      	strb	r3, [r7, #23]
    break;
 800b534:	e00b      	b.n	800b54e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b536:	2303      	movs	r3, #3
 800b538:	75fb      	strb	r3, [r7, #23]
    break;
 800b53a:	e008      	b.n	800b54e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b53c:	2301      	movs	r3, #1
 800b53e:	75fb      	strb	r3, [r7, #23]
    break;
 800b540:	e005      	b.n	800b54e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b542:	2303      	movs	r3, #3
 800b544:	75fb      	strb	r3, [r7, #23]
    break;
 800b546:	e002      	b.n	800b54e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800b548:	2303      	movs	r3, #3
 800b54a:	75fb      	strb	r3, [r7, #23]
    break;
 800b54c:	bf00      	nop
  }
  return usb_status;
 800b54e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b550:	4618      	mov	r0, r3
 800b552:	3718      	adds	r7, #24
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b086      	sub	sp, #24
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	607a      	str	r2, [r7, #4]
 800b562:	603b      	str	r3, [r7, #0]
 800b564:	460b      	mov	r3, r1
 800b566:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b568:	2300      	movs	r3, #0
 800b56a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b56c:	2300      	movs	r3, #0
 800b56e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b576:	7af9      	ldrb	r1, [r7, #11]
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	f7f9 fe26 	bl	80051cc <HAL_PCD_EP_Receive>
 800b580:	4603      	mov	r3, r0
 800b582:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b584:	7dbb      	ldrb	r3, [r7, #22]
 800b586:	2b03      	cmp	r3, #3
 800b588:	d816      	bhi.n	800b5b8 <USBD_LL_PrepareReceive+0x60>
 800b58a:	a201      	add	r2, pc, #4	; (adr r2, 800b590 <USBD_LL_PrepareReceive+0x38>)
 800b58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b590:	0800b5a1 	.word	0x0800b5a1
 800b594:	0800b5a7 	.word	0x0800b5a7
 800b598:	0800b5ad 	.word	0x0800b5ad
 800b59c:	0800b5b3 	.word	0x0800b5b3
    case HAL_OK :
      usb_status = USBD_OK;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	75fb      	strb	r3, [r7, #23]
    break;
 800b5a4:	e00b      	b.n	800b5be <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b5a6:	2303      	movs	r3, #3
 800b5a8:	75fb      	strb	r3, [r7, #23]
    break;
 800b5aa:	e008      	b.n	800b5be <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	75fb      	strb	r3, [r7, #23]
    break;
 800b5b0:	e005      	b.n	800b5be <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b5b2:	2303      	movs	r3, #3
 800b5b4:	75fb      	strb	r3, [r7, #23]
    break;
 800b5b6:	e002      	b.n	800b5be <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800b5b8:	2303      	movs	r3, #3
 800b5ba:	75fb      	strb	r3, [r7, #23]
    break;
 800b5bc:	bf00      	nop
  }
  return usb_status;
 800b5be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3718      	adds	r7, #24
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b5da:	78fa      	ldrb	r2, [r7, #3]
 800b5dc:	4611      	mov	r1, r2
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7f9 fe32 	bl	8005248 <HAL_PCD_EP_GetRxCount>
 800b5e4:	4603      	mov	r3, r0
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3708      	adds	r7, #8
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
	...

0800b5f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b082      	sub	sp, #8
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b5fc:	78fb      	ldrb	r3, [r7, #3]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d002      	beq.n	800b608 <HAL_PCDEx_LPM_Callback+0x18>
 800b602:	2b01      	cmp	r3, #1
 800b604:	d01f      	beq.n	800b646 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b606:	e03b      	b.n	800b680 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6a1b      	ldr	r3, [r3, #32]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d007      	beq.n	800b620 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b610:	f000 f83c 	bl	800b68c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b614:	4b1c      	ldr	r3, [pc, #112]	; (800b688 <HAL_PCDEx_LPM_Callback+0x98>)
 800b616:	691b      	ldr	r3, [r3, #16]
 800b618:	4a1b      	ldr	r2, [pc, #108]	; (800b688 <HAL_PCDEx_LPM_Callback+0x98>)
 800b61a:	f023 0306 	bic.w	r3, r3, #6
 800b61e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	6812      	ldr	r2, [r2, #0]
 800b62e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b632:	f023 0301 	bic.w	r3, r3, #1
 800b636:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b63e:	4618      	mov	r0, r3
 800b640:	f7fe fb5e 	bl	8009d00 <USBD_LL_Resume>
    break;
 800b644:	e01c      	b.n	800b680 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	6812      	ldr	r2, [r2, #0]
 800b654:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b658:	f043 0301 	orr.w	r3, r3, #1
 800b65c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b664:	4618      	mov	r0, r3
 800b666:	f7fe fb36 	bl	8009cd6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6a1b      	ldr	r3, [r3, #32]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d005      	beq.n	800b67e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b672:	4b05      	ldr	r3, [pc, #20]	; (800b688 <HAL_PCDEx_LPM_Callback+0x98>)
 800b674:	691b      	ldr	r3, [r3, #16]
 800b676:	4a04      	ldr	r2, [pc, #16]	; (800b688 <HAL_PCDEx_LPM_Callback+0x98>)
 800b678:	f043 0306 	orr.w	r3, r3, #6
 800b67c:	6113      	str	r3, [r2, #16]
    break;
 800b67e:	bf00      	nop
}
 800b680:	bf00      	nop
 800b682:	3708      	adds	r7, #8
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	e000ed00 	.word	0xe000ed00

0800b68c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b690:	f7f6 f8b6 	bl	8001800 <SystemClock_Config>
}
 800b694:	bf00      	nop
 800b696:	bd80      	pop	{r7, pc}

0800b698 <arm_rfft_fast_init_f32>:
 800b698:	084b      	lsrs	r3, r1, #1
 800b69a:	2b80      	cmp	r3, #128	; 0x80
 800b69c:	b410      	push	{r4}
 800b69e:	8201      	strh	r1, [r0, #16]
 800b6a0:	8003      	strh	r3, [r0, #0]
 800b6a2:	d047      	beq.n	800b734 <arm_rfft_fast_init_f32+0x9c>
 800b6a4:	d917      	bls.n	800b6d6 <arm_rfft_fast_init_f32+0x3e>
 800b6a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6aa:	d03d      	beq.n	800b728 <arm_rfft_fast_init_f32+0x90>
 800b6ac:	d929      	bls.n	800b702 <arm_rfft_fast_init_f32+0x6a>
 800b6ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6b2:	d020      	beq.n	800b6f6 <arm_rfft_fast_init_f32+0x5e>
 800b6b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6b8:	d113      	bne.n	800b6e2 <arm_rfft_fast_init_f32+0x4a>
 800b6ba:	4921      	ldr	r1, [pc, #132]	; (800b740 <arm_rfft_fast_init_f32+0xa8>)
 800b6bc:	4a21      	ldr	r2, [pc, #132]	; (800b744 <arm_rfft_fast_init_f32+0xac>)
 800b6be:	4b22      	ldr	r3, [pc, #136]	; (800b748 <arm_rfft_fast_init_f32+0xb0>)
 800b6c0:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800b6c4:	8184      	strh	r4, [r0, #12]
 800b6c6:	6081      	str	r1, [r0, #8]
 800b6c8:	6042      	str	r2, [r0, #4]
 800b6ca:	6143      	str	r3, [r0, #20]
 800b6cc:	2000      	movs	r0, #0
 800b6ce:	b240      	sxtb	r0, r0
 800b6d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6d4:	4770      	bx	lr
 800b6d6:	2b20      	cmp	r3, #32
 800b6d8:	d01c      	beq.n	800b714 <arm_rfft_fast_init_f32+0x7c>
 800b6da:	2b40      	cmp	r3, #64	; 0x40
 800b6dc:	d006      	beq.n	800b6ec <arm_rfft_fast_init_f32+0x54>
 800b6de:	2b10      	cmp	r3, #16
 800b6e0:	d01d      	beq.n	800b71e <arm_rfft_fast_init_f32+0x86>
 800b6e2:	20ff      	movs	r0, #255	; 0xff
 800b6e4:	b240      	sxtb	r0, r0
 800b6e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6ea:	4770      	bx	lr
 800b6ec:	2438      	movs	r4, #56	; 0x38
 800b6ee:	4917      	ldr	r1, [pc, #92]	; (800b74c <arm_rfft_fast_init_f32+0xb4>)
 800b6f0:	4a17      	ldr	r2, [pc, #92]	; (800b750 <arm_rfft_fast_init_f32+0xb8>)
 800b6f2:	4b18      	ldr	r3, [pc, #96]	; (800b754 <arm_rfft_fast_init_f32+0xbc>)
 800b6f4:	e7e6      	b.n	800b6c4 <arm_rfft_fast_init_f32+0x2c>
 800b6f6:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800b6fa:	4917      	ldr	r1, [pc, #92]	; (800b758 <arm_rfft_fast_init_f32+0xc0>)
 800b6fc:	4a17      	ldr	r2, [pc, #92]	; (800b75c <arm_rfft_fast_init_f32+0xc4>)
 800b6fe:	4b18      	ldr	r3, [pc, #96]	; (800b760 <arm_rfft_fast_init_f32+0xc8>)
 800b700:	e7e0      	b.n	800b6c4 <arm_rfft_fast_init_f32+0x2c>
 800b702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b706:	d1ec      	bne.n	800b6e2 <arm_rfft_fast_init_f32+0x4a>
 800b708:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800b70c:	4915      	ldr	r1, [pc, #84]	; (800b764 <arm_rfft_fast_init_f32+0xcc>)
 800b70e:	4a16      	ldr	r2, [pc, #88]	; (800b768 <arm_rfft_fast_init_f32+0xd0>)
 800b710:	4b16      	ldr	r3, [pc, #88]	; (800b76c <arm_rfft_fast_init_f32+0xd4>)
 800b712:	e7d7      	b.n	800b6c4 <arm_rfft_fast_init_f32+0x2c>
 800b714:	2430      	movs	r4, #48	; 0x30
 800b716:	4916      	ldr	r1, [pc, #88]	; (800b770 <arm_rfft_fast_init_f32+0xd8>)
 800b718:	4a16      	ldr	r2, [pc, #88]	; (800b774 <arm_rfft_fast_init_f32+0xdc>)
 800b71a:	4b17      	ldr	r3, [pc, #92]	; (800b778 <arm_rfft_fast_init_f32+0xe0>)
 800b71c:	e7d2      	b.n	800b6c4 <arm_rfft_fast_init_f32+0x2c>
 800b71e:	2414      	movs	r4, #20
 800b720:	4916      	ldr	r1, [pc, #88]	; (800b77c <arm_rfft_fast_init_f32+0xe4>)
 800b722:	4a17      	ldr	r2, [pc, #92]	; (800b780 <arm_rfft_fast_init_f32+0xe8>)
 800b724:	4b17      	ldr	r3, [pc, #92]	; (800b784 <arm_rfft_fast_init_f32+0xec>)
 800b726:	e7cd      	b.n	800b6c4 <arm_rfft_fast_init_f32+0x2c>
 800b728:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800b72c:	4916      	ldr	r1, [pc, #88]	; (800b788 <arm_rfft_fast_init_f32+0xf0>)
 800b72e:	4a17      	ldr	r2, [pc, #92]	; (800b78c <arm_rfft_fast_init_f32+0xf4>)
 800b730:	4b17      	ldr	r3, [pc, #92]	; (800b790 <arm_rfft_fast_init_f32+0xf8>)
 800b732:	e7c7      	b.n	800b6c4 <arm_rfft_fast_init_f32+0x2c>
 800b734:	24d0      	movs	r4, #208	; 0xd0
 800b736:	4917      	ldr	r1, [pc, #92]	; (800b794 <arm_rfft_fast_init_f32+0xfc>)
 800b738:	4a17      	ldr	r2, [pc, #92]	; (800b798 <arm_rfft_fast_init_f32+0x100>)
 800b73a:	4b18      	ldr	r3, [pc, #96]	; (800b79c <arm_rfft_fast_init_f32+0x104>)
 800b73c:	e7c2      	b.n	800b6c4 <arm_rfft_fast_init_f32+0x2c>
 800b73e:	bf00      	nop
 800b740:	0801c964 	.word	0x0801c964
 800b744:	0800db5c 	.word	0x0800db5c
 800b748:	08013ccc 	.word	0x08013ccc
 800b74c:	08011c5c 	.word	0x08011c5c
 800b750:	0801e724 	.word	0x0801e724
 800b754:	08020c14 	.word	0x08020c14
 800b758:	0801a64c 	.word	0x0801a64c
 800b75c:	0801854c 	.word	0x0801854c
 800b760:	08011ccc 	.word	0x08011ccc
 800b764:	080208a4 	.word	0x080208a4
 800b768:	08017ccc 	.word	0x08017ccc
 800b76c:	0801e924 	.word	0x0801e924
 800b770:	0801b504 	.word	0x0801b504
 800b774:	0801a54c 	.word	0x0801a54c
 800b778:	08011b5c 	.word	0x08011b5c
 800b77c:	0801b45c 	.word	0x0801b45c
 800b780:	080184cc 	.word	0x080184cc
 800b784:	0801b484 	.word	0x0801b484
 800b788:	0801f124 	.word	0x0801f124
 800b78c:	0801b964 	.word	0x0801b964
 800b790:	0801f4a4 	.word	0x0801f4a4
 800b794:	08020e14 	.word	0x08020e14
 800b798:	0801b564 	.word	0x0801b564
 800b79c:	080204a4 	.word	0x080204a4

0800b7a0 <arm_rfft_fast_f32>:
 800b7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7a4:	8a06      	ldrh	r6, [r0, #16]
 800b7a6:	0876      	lsrs	r6, r6, #1
 800b7a8:	4607      	mov	r7, r0
 800b7aa:	4615      	mov	r5, r2
 800b7ac:	8006      	strh	r6, [r0, #0]
 800b7ae:	460c      	mov	r4, r1
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d15c      	bne.n	800b86e <arm_rfft_fast_f32+0xce>
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	f000 fbe6 	bl	800bf88 <arm_cfft_f32>
 800b7bc:	edd4 7a00 	vldr	s15, [r4]
 800b7c0:	ed94 7a01 	vldr	s14, [r4, #4]
 800b7c4:	883e      	ldrh	r6, [r7, #0]
 800b7c6:	6978      	ldr	r0, [r7, #20]
 800b7c8:	ee37 7a07 	vadd.f32	s14, s14, s14
 800b7cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b7d0:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800b7d4:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b7d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b7dc:	3e01      	subs	r6, #1
 800b7de:	ee26 7aa3 	vmul.f32	s14, s13, s7
 800b7e2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800b7e6:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800b7ea:	ed85 7a00 	vstr	s14, [r5]
 800b7ee:	edc5 7a01 	vstr	s15, [r5, #4]
 800b7f2:	3010      	adds	r0, #16
 800b7f4:	f105 0210 	add.w	r2, r5, #16
 800b7f8:	3b08      	subs	r3, #8
 800b7fa:	f104 0110 	add.w	r1, r4, #16
 800b7fe:	ed51 4a02 	vldr	s9, [r1, #-8]
 800b802:	ed93 5a02 	vldr	s10, [r3, #8]
 800b806:	ed11 7a01 	vldr	s14, [r1, #-4]
 800b80a:	ed10 6a02 	vldr	s12, [r0, #-8]
 800b80e:	edd3 5a03 	vldr	s11, [r3, #12]
 800b812:	ed50 6a01 	vldr	s13, [r0, #-4]
 800b816:	ee75 7a64 	vsub.f32	s15, s10, s9
 800b81a:	ee35 4a87 	vadd.f32	s8, s11, s14
 800b81e:	ee35 5a24 	vadd.f32	s10, s10, s9
 800b822:	ee77 5a65 	vsub.f32	s11, s14, s11
 800b826:	ee66 4a27 	vmul.f32	s9, s12, s15
 800b82a:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800b82e:	ee34 5a85 	vadd.f32	s10, s9, s10
 800b832:	ee26 6a04 	vmul.f32	s12, s12, s8
 800b836:	ee66 6a84 	vmul.f32	s13, s13, s8
 800b83a:	ee77 7a25 	vadd.f32	s15, s14, s11
 800b83e:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b842:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b846:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800b84a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800b84e:	3e01      	subs	r6, #1
 800b850:	ed42 6a02 	vstr	s13, [r2, #-8]
 800b854:	ed42 7a01 	vstr	s15, [r2, #-4]
 800b858:	f1a3 0308 	sub.w	r3, r3, #8
 800b85c:	f101 0108 	add.w	r1, r1, #8
 800b860:	f100 0008 	add.w	r0, r0, #8
 800b864:	f102 0208 	add.w	r2, r2, #8
 800b868:	d1c9      	bne.n	800b7fe <arm_rfft_fast_f32+0x5e>
 800b86a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b86e:	edd1 7a00 	vldr	s15, [r1]
 800b872:	edd1 6a01 	vldr	s13, [r1, #4]
 800b876:	6941      	ldr	r1, [r0, #20]
 800b878:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b87c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b880:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800b884:	ee27 7a23 	vmul.f32	s14, s14, s7
 800b888:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800b88c:	3e01      	subs	r6, #1
 800b88e:	ed82 7a00 	vstr	s14, [r2]
 800b892:	edc2 7a01 	vstr	s15, [r2, #4]
 800b896:	00f0      	lsls	r0, r6, #3
 800b898:	b3ee      	cbz	r6, 800b916 <arm_rfft_fast_f32+0x176>
 800b89a:	3808      	subs	r0, #8
 800b89c:	f101 0e10 	add.w	lr, r1, #16
 800b8a0:	4420      	add	r0, r4
 800b8a2:	f104 0110 	add.w	r1, r4, #16
 800b8a6:	f102 0c10 	add.w	ip, r2, #16
 800b8aa:	ed90 7a02 	vldr	s14, [r0, #8]
 800b8ae:	ed51 6a02 	vldr	s13, [r1, #-8]
 800b8b2:	ed1e 6a02 	vldr	s12, [lr, #-8]
 800b8b6:	ed90 4a03 	vldr	s8, [r0, #12]
 800b8ba:	ed11 5a01 	vldr	s10, [r1, #-4]
 800b8be:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800b8c2:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800b8c6:	ee74 4a05 	vadd.f32	s9, s8, s10
 800b8ca:	ee26 3a27 	vmul.f32	s6, s12, s15
 800b8ce:	ee77 6a26 	vadd.f32	s13, s14, s13
 800b8d2:	ee35 5a44 	vsub.f32	s10, s10, s8
 800b8d6:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800b8da:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800b8de:	ee77 7a05 	vadd.f32	s15, s14, s10
 800b8e2:	ee26 6a24 	vmul.f32	s12, s12, s9
 800b8e6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800b8ea:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b8ee:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800b8f2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800b8f6:	ee27 7a23 	vmul.f32	s14, s14, s7
 800b8fa:	3e01      	subs	r6, #1
 800b8fc:	ed0c 7a02 	vstr	s14, [ip, #-8]
 800b900:	ed4c 7a01 	vstr	s15, [ip, #-4]
 800b904:	f1a0 0008 	sub.w	r0, r0, #8
 800b908:	f101 0108 	add.w	r1, r1, #8
 800b90c:	f10e 0e08 	add.w	lr, lr, #8
 800b910:	f10c 0c08 	add.w	ip, ip, #8
 800b914:	d1c9      	bne.n	800b8aa <arm_rfft_fast_f32+0x10a>
 800b916:	4638      	mov	r0, r7
 800b918:	4629      	mov	r1, r5
 800b91a:	461a      	mov	r2, r3
 800b91c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b920:	2301      	movs	r3, #1
 800b922:	f000 bb31 	b.w	800bf88 <arm_cfft_f32>
 800b926:	bf00      	nop

0800b928 <arm_cfft_radix8by2_f32>:
 800b928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b92c:	ed2d 8b08 	vpush	{d8-d11}
 800b930:	f8b0 e000 	ldrh.w	lr, [r0]
 800b934:	6842      	ldr	r2, [r0, #4]
 800b936:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 800b93a:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 800b93e:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800b942:	4607      	mov	r7, r0
 800b944:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800b948:	f000 80af 	beq.w	800baaa <arm_cfft_radix8by2_f32+0x182>
 800b94c:	3310      	adds	r3, #16
 800b94e:	18ce      	adds	r6, r1, r3
 800b950:	3210      	adds	r2, #16
 800b952:	4443      	add	r3, r8
 800b954:	f101 0510 	add.w	r5, r1, #16
 800b958:	f108 0410 	add.w	r4, r8, #16
 800b95c:	ed54 1a04 	vldr	s3, [r4, #-16]
 800b960:	ed13 4a04 	vldr	s8, [r3, #-16]
 800b964:	ed53 3a03 	vldr	s7, [r3, #-12]
 800b968:	ed53 5a02 	vldr	s11, [r3, #-8]
 800b96c:	ed13 5a01 	vldr	s10, [r3, #-4]
 800b970:	ed54 6a03 	vldr	s13, [r4, #-12]
 800b974:	ed14 0a02 	vldr	s0, [r4, #-8]
 800b978:	ed16 2a04 	vldr	s4, [r6, #-16]
 800b97c:	ed56 2a03 	vldr	s5, [r6, #-12]
 800b980:	ed15 6a03 	vldr	s12, [r5, #-12]
 800b984:	ed15 7a01 	vldr	s14, [r5, #-4]
 800b988:	ed15 3a04 	vldr	s6, [r5, #-16]
 800b98c:	ed54 7a01 	vldr	s15, [r4, #-4]
 800b990:	ed56 0a02 	vldr	s1, [r6, #-8]
 800b994:	ed16 1a01 	vldr	s2, [r6, #-4]
 800b998:	ed55 4a02 	vldr	s9, [r5, #-8]
 800b99c:	ee73 ba21 	vadd.f32	s23, s6, s3
 800b9a0:	ee36 ba26 	vadd.f32	s22, s12, s13
 800b9a4:	ee37 aa27 	vadd.f32	s20, s14, s15
 800b9a8:	ee72 9a04 	vadd.f32	s19, s4, s8
 800b9ac:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800b9b0:	ee31 8a05 	vadd.f32	s16, s2, s10
 800b9b4:	ee74 aa80 	vadd.f32	s21, s9, s0
 800b9b8:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800b9bc:	ed45 ba04 	vstr	s23, [r5, #-16]
 800b9c0:	ed05 ba03 	vstr	s22, [r5, #-12]
 800b9c4:	ed45 aa02 	vstr	s21, [r5, #-8]
 800b9c8:	ed05 aa01 	vstr	s20, [r5, #-4]
 800b9cc:	ed06 8a01 	vstr	s16, [r6, #-4]
 800b9d0:	ed46 9a04 	vstr	s19, [r6, #-16]
 800b9d4:	ed06 9a03 	vstr	s18, [r6, #-12]
 800b9d8:	ed46 8a02 	vstr	s17, [r6, #-8]
 800b9dc:	ee76 6a66 	vsub.f32	s13, s12, s13
 800b9e0:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800b9e4:	ed12 6a03 	vldr	s12, [r2, #-12]
 800b9e8:	ed52 2a04 	vldr	s5, [r2, #-16]
 800b9ec:	ee33 3a61 	vsub.f32	s6, s6, s3
 800b9f0:	ee34 4a42 	vsub.f32	s8, s8, s4
 800b9f4:	ee26 8a86 	vmul.f32	s16, s13, s12
 800b9f8:	ee24 2a06 	vmul.f32	s4, s8, s12
 800b9fc:	ee63 1a22 	vmul.f32	s3, s6, s5
 800ba00:	ee24 4a22 	vmul.f32	s8, s8, s5
 800ba04:	ee23 3a06 	vmul.f32	s6, s6, s12
 800ba08:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800ba0c:	ee23 6a86 	vmul.f32	s12, s7, s12
 800ba10:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800ba14:	ee36 6a04 	vadd.f32	s12, s12, s8
 800ba18:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800ba1c:	ee72 3a63 	vsub.f32	s7, s4, s7
 800ba20:	ee71 2a88 	vadd.f32	s5, s3, s16
 800ba24:	ed44 6a03 	vstr	s13, [r4, #-12]
 800ba28:	ed44 2a04 	vstr	s5, [r4, #-16]
 800ba2c:	ed43 3a04 	vstr	s7, [r3, #-16]
 800ba30:	ed03 6a03 	vstr	s12, [r3, #-12]
 800ba34:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba38:	ee75 6ae0 	vsub.f32	s13, s11, s1
 800ba3c:	ed12 7a01 	vldr	s14, [r2, #-4]
 800ba40:	ed52 5a02 	vldr	s11, [r2, #-8]
 800ba44:	ee35 6a41 	vsub.f32	s12, s10, s2
 800ba48:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800ba4c:	ee67 3a87 	vmul.f32	s7, s15, s14
 800ba50:	ee26 5a87 	vmul.f32	s10, s13, s14
 800ba54:	ee24 4aa5 	vmul.f32	s8, s9, s11
 800ba58:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ba5c:	ee64 4a87 	vmul.f32	s9, s9, s14
 800ba60:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800ba64:	ee26 7a07 	vmul.f32	s14, s12, s14
 800ba68:	ee26 6a25 	vmul.f32	s12, s12, s11
 800ba6c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ba70:	ee74 5a23 	vadd.f32	s11, s8, s7
 800ba74:	ee35 6a46 	vsub.f32	s12, s10, s12
 800ba78:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ba7c:	f1be 0e01 	subs.w	lr, lr, #1
 800ba80:	ed44 5a02 	vstr	s11, [r4, #-8]
 800ba84:	f105 0510 	add.w	r5, r5, #16
 800ba88:	ed44 7a01 	vstr	s15, [r4, #-4]
 800ba8c:	f106 0610 	add.w	r6, r6, #16
 800ba90:	ed03 6a02 	vstr	s12, [r3, #-8]
 800ba94:	ed03 7a01 	vstr	s14, [r3, #-4]
 800ba98:	f102 0210 	add.w	r2, r2, #16
 800ba9c:	f104 0410 	add.w	r4, r4, #16
 800baa0:	f103 0310 	add.w	r3, r3, #16
 800baa4:	f47f af5a 	bne.w	800b95c <arm_cfft_radix8by2_f32+0x34>
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	fa1f f48c 	uxth.w	r4, ip
 800baae:	4608      	mov	r0, r1
 800bab0:	2302      	movs	r3, #2
 800bab2:	4621      	mov	r1, r4
 800bab4:	f000 fc10 	bl	800c2d8 <arm_radix8_butterfly_f32>
 800bab8:	ecbd 8b08 	vpop	{d8-d11}
 800babc:	4640      	mov	r0, r8
 800babe:	4621      	mov	r1, r4
 800bac0:	687a      	ldr	r2, [r7, #4]
 800bac2:	2302      	movs	r3, #2
 800bac4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bac8:	f000 bc06 	b.w	800c2d8 <arm_radix8_butterfly_f32>

0800bacc <arm_cfft_radix8by4_f32>:
 800bacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bad0:	ed2d 8b0a 	vpush	{d8-d12}
 800bad4:	8802      	ldrh	r2, [r0, #0]
 800bad6:	ed91 6a00 	vldr	s12, [r1]
 800bada:	b08f      	sub	sp, #60	; 0x3c
 800badc:	460f      	mov	r7, r1
 800bade:	0852      	lsrs	r2, r2, #1
 800bae0:	0093      	lsls	r3, r2, #2
 800bae2:	900c      	str	r0, [sp, #48]	; 0x30
 800bae4:	9103      	str	r1, [sp, #12]
 800bae6:	6841      	ldr	r1, [r0, #4]
 800bae8:	ed97 7a01 	vldr	s14, [r7, #4]
 800baec:	4638      	mov	r0, r7
 800baee:	4418      	add	r0, r3
 800baf0:	4606      	mov	r6, r0
 800baf2:	9009      	str	r0, [sp, #36]	; 0x24
 800baf4:	4418      	add	r0, r3
 800baf6:	edd0 6a00 	vldr	s13, [r0]
 800bafa:	edd6 3a00 	vldr	s7, [r6]
 800bafe:	edd6 2a01 	vldr	s5, [r6, #4]
 800bb02:	edd0 7a01 	vldr	s15, [r0, #4]
 800bb06:	900a      	str	r0, [sp, #40]	; 0x28
 800bb08:	ee76 5a26 	vadd.f32	s11, s12, s13
 800bb0c:	4604      	mov	r4, r0
 800bb0e:	4625      	mov	r5, r4
 800bb10:	441c      	add	r4, r3
 800bb12:	ed94 4a00 	vldr	s8, [r4]
 800bb16:	ed94 5a01 	vldr	s10, [r4, #4]
 800bb1a:	9401      	str	r4, [sp, #4]
 800bb1c:	ee75 4aa3 	vadd.f32	s9, s11, s7
 800bb20:	4630      	mov	r0, r6
 800bb22:	ee74 4a24 	vadd.f32	s9, s8, s9
 800bb26:	463e      	mov	r6, r7
 800bb28:	ee14 ea90 	vmov	lr, s9
 800bb2c:	ee76 6a66 	vsub.f32	s13, s12, s13
 800bb30:	f846 eb08 	str.w	lr, [r6], #8
 800bb34:	ee37 6a27 	vadd.f32	s12, s14, s15
 800bb38:	edd0 4a01 	vldr	s9, [r0, #4]
 800bb3c:	9604      	str	r6, [sp, #16]
 800bb3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb42:	9e01      	ldr	r6, [sp, #4]
 800bb44:	ee32 3aa6 	vadd.f32	s6, s5, s13
 800bb48:	ed96 2a01 	vldr	s4, [r6, #4]
 800bb4c:	ee36 7a24 	vadd.f32	s14, s12, s9
 800bb50:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800bb54:	ee77 4ae3 	vsub.f32	s9, s15, s7
 800bb58:	ee36 6a62 	vsub.f32	s12, s12, s5
 800bb5c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800bb60:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800bb64:	ee73 3a45 	vsub.f32	s7, s6, s10
 800bb68:	4604      	mov	r4, r0
 800bb6a:	ee36 6a45 	vsub.f32	s12, s12, s10
 800bb6e:	ee75 6a26 	vadd.f32	s13, s10, s13
 800bb72:	46a3      	mov	fp, r4
 800bb74:	ee37 7a02 	vadd.f32	s14, s14, s4
 800bb78:	ee34 5a84 	vadd.f32	s10, s9, s8
 800bb7c:	ee13 8a90 	vmov	r8, s7
 800bb80:	46a4      	mov	ip, r4
 800bb82:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800bb86:	ed87 7a01 	vstr	s14, [r7, #4]
 800bb8a:	f84b 8b08 	str.w	r8, [fp], #8
 800bb8e:	f1ac 0704 	sub.w	r7, ip, #4
 800bb92:	ed8c 5a01 	vstr	s10, [ip, #4]
 800bb96:	f101 0c08 	add.w	ip, r1, #8
 800bb9a:	462c      	mov	r4, r5
 800bb9c:	f8cd c014 	str.w	ip, [sp, #20]
 800bba0:	ee15 ca90 	vmov	ip, s11
 800bba4:	f844 cb08 	str.w	ip, [r4], #8
 800bba8:	9407      	str	r4, [sp, #28]
 800bbaa:	f101 0410 	add.w	r4, r1, #16
 800bbae:	ed85 6a01 	vstr	s12, [r5, #4]
 800bbb2:	0852      	lsrs	r2, r2, #1
 800bbb4:	9402      	str	r4, [sp, #8]
 800bbb6:	462c      	mov	r4, r5
 800bbb8:	f101 0518 	add.w	r5, r1, #24
 800bbbc:	920b      	str	r2, [sp, #44]	; 0x2c
 800bbbe:	46b2      	mov	sl, r6
 800bbc0:	9506      	str	r5, [sp, #24]
 800bbc2:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800bbc6:	3a02      	subs	r2, #2
 800bbc8:	ee16 5a90 	vmov	r5, s13
 800bbcc:	46b6      	mov	lr, r6
 800bbce:	4630      	mov	r0, r6
 800bbd0:	0852      	lsrs	r2, r2, #1
 800bbd2:	f84a 5b08 	str.w	r5, [sl], #8
 800bbd6:	f1a0 0604 	sub.w	r6, r0, #4
 800bbda:	edce 7a01 	vstr	s15, [lr, #4]
 800bbde:	9208      	str	r2, [sp, #32]
 800bbe0:	f000 8130 	beq.w	800be44 <arm_cfft_radix8by4_f32+0x378>
 800bbe4:	4691      	mov	r9, r2
 800bbe6:	9a03      	ldr	r2, [sp, #12]
 800bbe8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800bbec:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800bbf0:	3b08      	subs	r3, #8
 800bbf2:	f102 0510 	add.w	r5, r2, #16
 800bbf6:	f101 0c20 	add.w	ip, r1, #32
 800bbfa:	f1a4 020c 	sub.w	r2, r4, #12
 800bbfe:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800bc02:	4433      	add	r3, r6
 800bc04:	3410      	adds	r4, #16
 800bc06:	4650      	mov	r0, sl
 800bc08:	4659      	mov	r1, fp
 800bc0a:	ed55 3a02 	vldr	s7, [r5, #-8]
 800bc0e:	ed14 5a02 	vldr	s10, [r4, #-8]
 800bc12:	ed91 7a00 	vldr	s14, [r1]
 800bc16:	edd0 7a00 	vldr	s15, [r0]
 800bc1a:	ed15 4a01 	vldr	s8, [r5, #-4]
 800bc1e:	ed54 5a01 	vldr	s11, [r4, #-4]
 800bc22:	edd0 6a01 	vldr	s13, [r0, #4]
 800bc26:	ed91 6a01 	vldr	s12, [r1, #4]
 800bc2a:	ee33 8a85 	vadd.f32	s16, s7, s10
 800bc2e:	ee34 0a25 	vadd.f32	s0, s8, s11
 800bc32:	ee78 4a07 	vadd.f32	s9, s16, s14
 800bc36:	ee74 5a65 	vsub.f32	s11, s8, s11
 800bc3a:	ee77 4aa4 	vadd.f32	s9, s15, s9
 800bc3e:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800bc42:	ed45 4a02 	vstr	s9, [r5, #-8]
 800bc46:	edd1 4a01 	vldr	s9, [r1, #4]
 800bc4a:	ed90 4a01 	vldr	s8, [r0, #4]
 800bc4e:	ee70 4a24 	vadd.f32	s9, s0, s9
 800bc52:	ee76 aa05 	vadd.f32	s21, s12, s10
 800bc56:	ee74 4a84 	vadd.f32	s9, s9, s8
 800bc5a:	ee35 aac7 	vsub.f32	s20, s11, s14
 800bc5e:	ed45 4a01 	vstr	s9, [r5, #-4]
 800bc62:	edd6 1a00 	vldr	s3, [r6]
 800bc66:	edd7 0a00 	vldr	s1, [r7]
 800bc6a:	ed92 4a02 	vldr	s8, [r2, #8]
 800bc6e:	edd3 3a02 	vldr	s7, [r3, #8]
 800bc72:	ed93 2a01 	vldr	s4, [r3, #4]
 800bc76:	ed16 1a01 	vldr	s2, [r6, #-4]
 800bc7a:	edd2 2a01 	vldr	s5, [r2, #4]
 800bc7e:	ed57 9a01 	vldr	s19, [r7, #-4]
 800bc82:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800bc86:	ee39 3a81 	vadd.f32	s6, s19, s2
 800bc8a:	ee74 8a84 	vadd.f32	s17, s9, s8
 800bc8e:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800bc92:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800bc96:	ee7a aae6 	vsub.f32	s21, s21, s13
 800bc9a:	ee18 aa90 	vmov	sl, s17
 800bc9e:	f847 a908 	str.w	sl, [r7], #-8
 800bca2:	edd2 8a01 	vldr	s17, [r2, #4]
 800bca6:	ed93 9a01 	vldr	s18, [r3, #4]
 800bcaa:	ee73 8a28 	vadd.f32	s17, s6, s17
 800bcae:	ee3a aa27 	vadd.f32	s20, s20, s15
 800bcb2:	ee78 8a89 	vadd.f32	s17, s17, s18
 800bcb6:	ee74 0a63 	vsub.f32	s1, s8, s7
 800bcba:	edc7 8a01 	vstr	s17, [r7, #4]
 800bcbe:	ed18 ba02 	vldr	s22, [r8, #-8]
 800bcc2:	ed58 8a01 	vldr	s17, [r8, #-4]
 800bcc6:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800bcca:	ee6a ba28 	vmul.f32	s23, s20, s17
 800bcce:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800bcd2:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800bcd6:	ee30 9a81 	vadd.f32	s18, s1, s2
 800bcda:	ee79 9a82 	vadd.f32	s19, s19, s4
 800bcde:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800bce2:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800bce6:	ee69 baa8 	vmul.f32	s23, s19, s17
 800bcea:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800bcee:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800bcf2:	ee69 8a28 	vmul.f32	s17, s18, s17
 800bcf6:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800bcfa:	ee1c aa10 	vmov	sl, s24
 800bcfe:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800bd02:	f841 ab08 	str.w	sl, [r1], #8
 800bd06:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800bd0a:	ee3b bacb 	vsub.f32	s22, s23, s22
 800bd0e:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800bd12:	ee33 3a62 	vsub.f32	s6, s6, s5
 800bd16:	ed01 aa01 	vstr	s20, [r1, #-4]
 800bd1a:	edc2 8a01 	vstr	s17, [r2, #4]
 800bd1e:	ed82 ba02 	vstr	s22, [r2, #8]
 800bd22:	ed5c 4a04 	vldr	s9, [ip, #-16]
 800bd26:	ee74 3a63 	vsub.f32	s7, s8, s7
 800bd2a:	ee38 8a47 	vsub.f32	s16, s16, s14
 800bd2e:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800bd32:	ee30 0a46 	vsub.f32	s0, s0, s12
 800bd36:	ee33 3a42 	vsub.f32	s6, s6, s4
 800bd3a:	ee38 8a67 	vsub.f32	s16, s16, s15
 800bd3e:	ee30 0a66 	vsub.f32	s0, s0, s13
 800bd42:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800bd46:	ee63 8a04 	vmul.f32	s17, s6, s8
 800bd4a:	ee28 aa24 	vmul.f32	s20, s16, s9
 800bd4e:	ee60 9a04 	vmul.f32	s19, s0, s8
 800bd52:	ee28 8a04 	vmul.f32	s16, s16, s8
 800bd56:	ee20 0a24 	vmul.f32	s0, s0, s9
 800bd5a:	ee63 3a84 	vmul.f32	s7, s7, s8
 800bd5e:	ee39 4a68 	vsub.f32	s8, s18, s17
 800bd62:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800bd66:	ee14 aa10 	vmov	sl, s8
 800bd6a:	ee30 0a48 	vsub.f32	s0, s0, s16
 800bd6e:	ee63 4a24 	vmul.f32	s9, s6, s9
 800bd72:	ed44 9a02 	vstr	s19, [r4, #-8]
 800bd76:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800bd7a:	ed04 0a01 	vstr	s0, [r4, #-4]
 800bd7e:	f846 a908 	str.w	sl, [r6], #-8
 800bd82:	ee35 6a46 	vsub.f32	s12, s10, s12
 800bd86:	ee35 7a87 	vadd.f32	s14, s11, s14
 800bd8a:	edc6 3a01 	vstr	s7, [r6, #4]
 800bd8e:	ee76 6a86 	vadd.f32	s13, s13, s12
 800bd92:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd96:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 800bd9a:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 800bd9e:	ee67 5a86 	vmul.f32	s11, s15, s12
 800bda2:	ee26 5a87 	vmul.f32	s10, s13, s14
 800bda6:	ee72 2a62 	vsub.f32	s5, s4, s5
 800bdaa:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800bdae:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800bdb2:	ee75 5a25 	vadd.f32	s11, s10, s11
 800bdb6:	ee62 0a86 	vmul.f32	s1, s5, s12
 800bdba:	ee66 6a86 	vmul.f32	s13, s13, s12
 800bdbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bdc2:	ee21 6a06 	vmul.f32	s12, s2, s12
 800bdc6:	ee62 2a87 	vmul.f32	s5, s5, s14
 800bdca:	ee21 1a07 	vmul.f32	s2, s2, s14
 800bdce:	ee15 aa90 	vmov	sl, s11
 800bdd2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bdd6:	f840 ab08 	str.w	sl, [r0], #8
 800bdda:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800bdde:	ee76 2a22 	vadd.f32	s5, s12, s5
 800bde2:	f1b9 0901 	subs.w	r9, r9, #1
 800bde6:	ed40 7a01 	vstr	s15, [r0, #-4]
 800bdea:	f105 0508 	add.w	r5, r5, #8
 800bdee:	ed83 1a02 	vstr	s2, [r3, #8]
 800bdf2:	edc3 2a01 	vstr	s5, [r3, #4]
 800bdf6:	f108 0808 	add.w	r8, r8, #8
 800bdfa:	f1a2 0208 	sub.w	r2, r2, #8
 800bdfe:	f10c 0c10 	add.w	ip, ip, #16
 800be02:	f104 0408 	add.w	r4, r4, #8
 800be06:	f10e 0e18 	add.w	lr, lr, #24
 800be0a:	f1a3 0308 	sub.w	r3, r3, #8
 800be0e:	f47f aefc 	bne.w	800bc0a <arm_cfft_radix8by4_f32+0x13e>
 800be12:	9908      	ldr	r1, [sp, #32]
 800be14:	9802      	ldr	r0, [sp, #8]
 800be16:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800be1a:	00cb      	lsls	r3, r1, #3
 800be1c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800be20:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800be24:	9102      	str	r1, [sp, #8]
 800be26:	9904      	ldr	r1, [sp, #16]
 800be28:	4419      	add	r1, r3
 800be2a:	9104      	str	r1, [sp, #16]
 800be2c:	9905      	ldr	r1, [sp, #20]
 800be2e:	4419      	add	r1, r3
 800be30:	9105      	str	r1, [sp, #20]
 800be32:	9907      	ldr	r1, [sp, #28]
 800be34:	449b      	add	fp, r3
 800be36:	4419      	add	r1, r3
 800be38:	449a      	add	sl, r3
 800be3a:	9b06      	ldr	r3, [sp, #24]
 800be3c:	9107      	str	r1, [sp, #28]
 800be3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be42:	9306      	str	r3, [sp, #24]
 800be44:	9a04      	ldr	r2, [sp, #16]
 800be46:	9807      	ldr	r0, [sp, #28]
 800be48:	edd2 3a00 	vldr	s7, [r2]
 800be4c:	ed90 4a00 	vldr	s8, [r0]
 800be50:	eddb 7a00 	vldr	s15, [fp]
 800be54:	ed9a 3a00 	vldr	s6, [sl]
 800be58:	edd2 4a01 	vldr	s9, [r2, #4]
 800be5c:	ed90 7a01 	vldr	s14, [r0, #4]
 800be60:	ed9b 2a01 	vldr	s4, [fp, #4]
 800be64:	edda 5a01 	vldr	s11, [sl, #4]
 800be68:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800be6c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800be6e:	ee73 6a84 	vadd.f32	s13, s7, s8
 800be72:	ee34 6a87 	vadd.f32	s12, s9, s14
 800be76:	ee36 5aa7 	vadd.f32	s10, s13, s15
 800be7a:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800be7e:	ee33 5a05 	vadd.f32	s10, s6, s10
 800be82:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800be86:	ed82 5a00 	vstr	s10, [r2]
 800be8a:	ed9b 5a01 	vldr	s10, [fp, #4]
 800be8e:	edda 4a01 	vldr	s9, [sl, #4]
 800be92:	ee36 5a05 	vadd.f32	s10, s12, s10
 800be96:	ee72 3a04 	vadd.f32	s7, s4, s8
 800be9a:	ee35 5a24 	vadd.f32	s10, s10, s9
 800be9e:	ee77 4a67 	vsub.f32	s9, s14, s15
 800bea2:	ed82 5a01 	vstr	s10, [r2, #4]
 800bea6:	9a05      	ldr	r2, [sp, #20]
 800bea8:	ee34 5a83 	vadd.f32	s10, s9, s6
 800beac:	edd2 1a00 	vldr	s3, [r2]
 800beb0:	edd2 2a01 	vldr	s5, [r2, #4]
 800beb4:	9a02      	ldr	r2, [sp, #8]
 800beb6:	ee73 3ae5 	vsub.f32	s7, s7, s11
 800beba:	ee36 6a42 	vsub.f32	s12, s12, s4
 800bebe:	ee63 4aa1 	vmul.f32	s9, s7, s3
 800bec2:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800bec6:	ee65 2a22 	vmul.f32	s5, s10, s5
 800beca:	ee25 5a21 	vmul.f32	s10, s10, s3
 800bece:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800bed2:	ee35 5a63 	vsub.f32	s10, s10, s7
 800bed6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800beda:	edcb 2a00 	vstr	s5, [fp]
 800bede:	ed8b 5a01 	vstr	s10, [fp, #4]
 800bee2:	edd2 3a01 	vldr	s7, [r2, #4]
 800bee6:	ed92 5a00 	vldr	s10, [r2]
 800beea:	9a06      	ldr	r2, [sp, #24]
 800beec:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800bef0:	ee36 6a65 	vsub.f32	s12, s12, s11
 800bef4:	ee66 4a85 	vmul.f32	s9, s13, s10
 800bef8:	ee26 5a05 	vmul.f32	s10, s12, s10
 800befc:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800bf00:	ee26 6a23 	vmul.f32	s12, s12, s7
 800bf04:	ee75 6a66 	vsub.f32	s13, s10, s13
 800bf08:	ee34 6a86 	vadd.f32	s12, s9, s12
 800bf0c:	ee34 4a42 	vsub.f32	s8, s8, s4
 800bf10:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bf14:	edc0 6a01 	vstr	s13, [r0, #4]
 800bf18:	ed80 6a00 	vstr	s12, [r0]
 800bf1c:	ed92 6a01 	vldr	s12, [r2, #4]
 800bf20:	9803      	ldr	r0, [sp, #12]
 800bf22:	ee77 7a43 	vsub.f32	s15, s14, s6
 800bf26:	ee75 5a84 	vadd.f32	s11, s11, s8
 800bf2a:	ed92 7a00 	vldr	s14, [r2]
 800bf2e:	ee65 6a87 	vmul.f32	s13, s11, s14
 800bf32:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bf36:	ee65 5a86 	vmul.f32	s11, s11, s12
 800bf3a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bf3e:	ee77 5a65 	vsub.f32	s11, s14, s11
 800bf42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf46:	edca 5a01 	vstr	s11, [sl, #4]
 800bf4a:	edca 7a00 	vstr	s15, [sl]
 800bf4e:	6872      	ldr	r2, [r6, #4]
 800bf50:	4621      	mov	r1, r4
 800bf52:	2304      	movs	r3, #4
 800bf54:	f000 f9c0 	bl	800c2d8 <arm_radix8_butterfly_f32>
 800bf58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf5a:	6872      	ldr	r2, [r6, #4]
 800bf5c:	4621      	mov	r1, r4
 800bf5e:	2304      	movs	r3, #4
 800bf60:	f000 f9ba 	bl	800c2d8 <arm_radix8_butterfly_f32>
 800bf64:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bf66:	6872      	ldr	r2, [r6, #4]
 800bf68:	4621      	mov	r1, r4
 800bf6a:	2304      	movs	r3, #4
 800bf6c:	f000 f9b4 	bl	800c2d8 <arm_radix8_butterfly_f32>
 800bf70:	9801      	ldr	r0, [sp, #4]
 800bf72:	6872      	ldr	r2, [r6, #4]
 800bf74:	4621      	mov	r1, r4
 800bf76:	2304      	movs	r3, #4
 800bf78:	b00f      	add	sp, #60	; 0x3c
 800bf7a:	ecbd 8b0a 	vpop	{d8-d12}
 800bf7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf82:	f000 b9a9 	b.w	800c2d8 <arm_radix8_butterfly_f32>
 800bf86:	bf00      	nop

0800bf88 <arm_cfft_f32>:
 800bf88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf8c:	2a01      	cmp	r2, #1
 800bf8e:	4606      	mov	r6, r0
 800bf90:	4617      	mov	r7, r2
 800bf92:	460c      	mov	r4, r1
 800bf94:	4698      	mov	r8, r3
 800bf96:	8805      	ldrh	r5, [r0, #0]
 800bf98:	d054      	beq.n	800c044 <arm_cfft_f32+0xbc>
 800bf9a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800bf9e:	d04c      	beq.n	800c03a <arm_cfft_f32+0xb2>
 800bfa0:	d916      	bls.n	800bfd0 <arm_cfft_f32+0x48>
 800bfa2:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800bfa6:	d01a      	beq.n	800bfde <arm_cfft_f32+0x56>
 800bfa8:	d95c      	bls.n	800c064 <arm_cfft_f32+0xdc>
 800bfaa:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800bfae:	d044      	beq.n	800c03a <arm_cfft_f32+0xb2>
 800bfb0:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800bfb4:	d105      	bne.n	800bfc2 <arm_cfft_f32+0x3a>
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	4629      	mov	r1, r5
 800bfba:	6872      	ldr	r2, [r6, #4]
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	f000 f98b 	bl	800c2d8 <arm_radix8_butterfly_f32>
 800bfc2:	f1b8 0f00 	cmp.w	r8, #0
 800bfc6:	d111      	bne.n	800bfec <arm_cfft_f32+0x64>
 800bfc8:	2f01      	cmp	r7, #1
 800bfca:	d016      	beq.n	800bffa <arm_cfft_f32+0x72>
 800bfcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfd0:	2d20      	cmp	r5, #32
 800bfd2:	d032      	beq.n	800c03a <arm_cfft_f32+0xb2>
 800bfd4:	d94a      	bls.n	800c06c <arm_cfft_f32+0xe4>
 800bfd6:	2d40      	cmp	r5, #64	; 0x40
 800bfd8:	d0ed      	beq.n	800bfb6 <arm_cfft_f32+0x2e>
 800bfda:	2d80      	cmp	r5, #128	; 0x80
 800bfdc:	d1f1      	bne.n	800bfc2 <arm_cfft_f32+0x3a>
 800bfde:	4630      	mov	r0, r6
 800bfe0:	4621      	mov	r1, r4
 800bfe2:	f7ff fca1 	bl	800b928 <arm_cfft_radix8by2_f32>
 800bfe6:	f1b8 0f00 	cmp.w	r8, #0
 800bfea:	d0ed      	beq.n	800bfc8 <arm_cfft_f32+0x40>
 800bfec:	4620      	mov	r0, r4
 800bfee:	89b1      	ldrh	r1, [r6, #12]
 800bff0:	68b2      	ldr	r2, [r6, #8]
 800bff2:	f7f4 f905 	bl	8000200 <arm_bitreversal_32>
 800bff6:	2f01      	cmp	r7, #1
 800bff8:	d1e8      	bne.n	800bfcc <arm_cfft_f32+0x44>
 800bffa:	ee07 5a90 	vmov	s15, r5
 800bffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c002:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c006:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800c00a:	2d00      	cmp	r5, #0
 800c00c:	d0de      	beq.n	800bfcc <arm_cfft_f32+0x44>
 800c00e:	f104 0108 	add.w	r1, r4, #8
 800c012:	2300      	movs	r3, #0
 800c014:	3301      	adds	r3, #1
 800c016:	429d      	cmp	r5, r3
 800c018:	f101 0108 	add.w	r1, r1, #8
 800c01c:	ed11 7a04 	vldr	s14, [r1, #-16]
 800c020:	ed51 7a03 	vldr	s15, [r1, #-12]
 800c024:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c028:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c02c:	ed01 7a04 	vstr	s14, [r1, #-16]
 800c030:	ed41 7a03 	vstr	s15, [r1, #-12]
 800c034:	d1ee      	bne.n	800c014 <arm_cfft_f32+0x8c>
 800c036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c03a:	4630      	mov	r0, r6
 800c03c:	4621      	mov	r1, r4
 800c03e:	f7ff fd45 	bl	800bacc <arm_cfft_radix8by4_f32>
 800c042:	e7be      	b.n	800bfc2 <arm_cfft_f32+0x3a>
 800c044:	b1ad      	cbz	r5, 800c072 <arm_cfft_f32+0xea>
 800c046:	f101 030c 	add.w	r3, r1, #12
 800c04a:	2200      	movs	r2, #0
 800c04c:	ed53 7a02 	vldr	s15, [r3, #-8]
 800c050:	3201      	adds	r2, #1
 800c052:	eef1 7a67 	vneg.f32	s15, s15
 800c056:	4295      	cmp	r5, r2
 800c058:	ed43 7a02 	vstr	s15, [r3, #-8]
 800c05c:	f103 0308 	add.w	r3, r3, #8
 800c060:	d1f4      	bne.n	800c04c <arm_cfft_f32+0xc4>
 800c062:	e79a      	b.n	800bf9a <arm_cfft_f32+0x12>
 800c064:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800c068:	d0a5      	beq.n	800bfb6 <arm_cfft_f32+0x2e>
 800c06a:	e7aa      	b.n	800bfc2 <arm_cfft_f32+0x3a>
 800c06c:	2d10      	cmp	r5, #16
 800c06e:	d0b6      	beq.n	800bfde <arm_cfft_f32+0x56>
 800c070:	e7a7      	b.n	800bfc2 <arm_cfft_f32+0x3a>
 800c072:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800c076:	d894      	bhi.n	800bfa2 <arm_cfft_f32+0x1a>
 800c078:	e7aa      	b.n	800bfd0 <arm_cfft_f32+0x48>
 800c07a:	bf00      	nop

0800c07c <arm_cmplx_mag_f32>:
 800c07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c080:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800c084:	b084      	sub	sp, #16
 800c086:	d07f      	beq.n	800c188 <arm_cmplx_mag_f32+0x10c>
 800c088:	2700      	movs	r7, #0
 800c08a:	f100 0420 	add.w	r4, r0, #32
 800c08e:	f101 0510 	add.w	r5, r1, #16
 800c092:	4646      	mov	r6, r8
 800c094:	e05a      	b.n	800c14c <arm_cmplx_mag_f32+0xd0>
 800c096:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800c09a:	eeb4 0a40 	vcmp.f32	s0, s0
 800c09e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0a2:	f040 80a4 	bne.w	800c1ee <arm_cmplx_mag_f32+0x172>
 800c0a6:	ed05 0a04 	vstr	s0, [r5, #-16]
 800c0aa:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800c0ae:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 800c0b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c0b6:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c0ba:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c0be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c0c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0c6:	f2c0 808f 	blt.w	800c1e8 <arm_cmplx_mag_f32+0x16c>
 800c0ca:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800c0ce:	eeb4 0a40 	vcmp.f32	s0, s0
 800c0d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0d6:	f040 80af 	bne.w	800c238 <arm_cmplx_mag_f32+0x1bc>
 800c0da:	ed05 0a03 	vstr	s0, [r5, #-12]
 800c0de:	ed54 7a04 	vldr	s15, [r4, #-16]
 800c0e2:	ed14 0a03 	vldr	s0, [r4, #-12]
 800c0e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c0ea:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c0ee:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c0f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c0f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0fa:	db72      	blt.n	800c1e2 <arm_cmplx_mag_f32+0x166>
 800c0fc:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800c100:	eeb4 0a40 	vcmp.f32	s0, s0
 800c104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c108:	f040 808c 	bne.w	800c224 <arm_cmplx_mag_f32+0x1a8>
 800c10c:	ed05 0a02 	vstr	s0, [r5, #-8]
 800c110:	ed54 7a02 	vldr	s15, [r4, #-8]
 800c114:	ed14 0a01 	vldr	s0, [r4, #-4]
 800c118:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c11c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c120:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c124:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c12c:	db20      	blt.n	800c170 <arm_cmplx_mag_f32+0xf4>
 800c12e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800c132:	eeb4 0a40 	vcmp.f32	s0, s0
 800c136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c13a:	d169      	bne.n	800c210 <arm_cmplx_mag_f32+0x194>
 800c13c:	3e01      	subs	r6, #1
 800c13e:	ed05 0a01 	vstr	s0, [r5, #-4]
 800c142:	f104 0420 	add.w	r4, r4, #32
 800c146:	f105 0510 	add.w	r5, r5, #16
 800c14a:	d019      	beq.n	800c180 <arm_cmplx_mag_f32+0x104>
 800c14c:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 800c150:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 800c154:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c158:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c15c:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c160:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c168:	da95      	bge.n	800c096 <arm_cmplx_mag_f32+0x1a>
 800c16a:	f845 7c10 	str.w	r7, [r5, #-16]
 800c16e:	e79c      	b.n	800c0aa <arm_cmplx_mag_f32+0x2e>
 800c170:	3e01      	subs	r6, #1
 800c172:	f845 7c04 	str.w	r7, [r5, #-4]
 800c176:	f104 0420 	add.w	r4, r4, #32
 800c17a:	f105 0510 	add.w	r5, r5, #16
 800c17e:	d1e5      	bne.n	800c14c <arm_cmplx_mag_f32+0xd0>
 800c180:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 800c184:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 800c188:	f012 0503 	ands.w	r5, r2, #3
 800c18c:	d026      	beq.n	800c1dc <arm_cmplx_mag_f32+0x160>
 800c18e:	2600      	movs	r6, #0
 800c190:	f100 0408 	add.w	r4, r0, #8
 800c194:	e00c      	b.n	800c1b0 <arm_cmplx_mag_f32+0x134>
 800c196:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800c19a:	eeb4 0a40 	vcmp.f32	s0, s0
 800c19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1a2:	d12e      	bne.n	800c202 <arm_cmplx_mag_f32+0x186>
 800c1a4:	3d01      	subs	r5, #1
 800c1a6:	ed01 0a01 	vstr	s0, [r1, #-4]
 800c1aa:	f104 0408 	add.w	r4, r4, #8
 800c1ae:	d015      	beq.n	800c1dc <arm_cmplx_mag_f32+0x160>
 800c1b0:	ed54 7a02 	vldr	s15, [r4, #-8]
 800c1b4:	ed14 0a01 	vldr	s0, [r4, #-4]
 800c1b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c1bc:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c1c0:	3104      	adds	r1, #4
 800c1c2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c1c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c1ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1ce:	dae2      	bge.n	800c196 <arm_cmplx_mag_f32+0x11a>
 800c1d0:	3d01      	subs	r5, #1
 800c1d2:	f841 6c04 	str.w	r6, [r1, #-4]
 800c1d6:	f104 0408 	add.w	r4, r4, #8
 800c1da:	d1e9      	bne.n	800c1b0 <arm_cmplx_mag_f32+0x134>
 800c1dc:	b004      	add	sp, #16
 800c1de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1e2:	f845 7c08 	str.w	r7, [r5, #-8]
 800c1e6:	e793      	b.n	800c110 <arm_cmplx_mag_f32+0x94>
 800c1e8:	f845 7c0c 	str.w	r7, [r5, #-12]
 800c1ec:	e777      	b.n	800c0de <arm_cmplx_mag_f32+0x62>
 800c1ee:	eeb0 0a67 	vmov.f32	s0, s15
 800c1f2:	9203      	str	r2, [sp, #12]
 800c1f4:	9102      	str	r1, [sp, #8]
 800c1f6:	9001      	str	r0, [sp, #4]
 800c1f8:	f000 fd2e 	bl	800cc58 <sqrtf>
 800c1fc:	a801      	add	r0, sp, #4
 800c1fe:	c807      	ldmia	r0, {r0, r1, r2}
 800c200:	e751      	b.n	800c0a6 <arm_cmplx_mag_f32+0x2a>
 800c202:	eeb0 0a67 	vmov.f32	s0, s15
 800c206:	9101      	str	r1, [sp, #4]
 800c208:	f000 fd26 	bl	800cc58 <sqrtf>
 800c20c:	9901      	ldr	r1, [sp, #4]
 800c20e:	e7c9      	b.n	800c1a4 <arm_cmplx_mag_f32+0x128>
 800c210:	eeb0 0a67 	vmov.f32	s0, s15
 800c214:	9203      	str	r2, [sp, #12]
 800c216:	9102      	str	r1, [sp, #8]
 800c218:	9001      	str	r0, [sp, #4]
 800c21a:	f000 fd1d 	bl	800cc58 <sqrtf>
 800c21e:	a801      	add	r0, sp, #4
 800c220:	c807      	ldmia	r0, {r0, r1, r2}
 800c222:	e78b      	b.n	800c13c <arm_cmplx_mag_f32+0xc0>
 800c224:	eeb0 0a67 	vmov.f32	s0, s15
 800c228:	9203      	str	r2, [sp, #12]
 800c22a:	9102      	str	r1, [sp, #8]
 800c22c:	9001      	str	r0, [sp, #4]
 800c22e:	f000 fd13 	bl	800cc58 <sqrtf>
 800c232:	a801      	add	r0, sp, #4
 800c234:	c807      	ldmia	r0, {r0, r1, r2}
 800c236:	e769      	b.n	800c10c <arm_cmplx_mag_f32+0x90>
 800c238:	eeb0 0a67 	vmov.f32	s0, s15
 800c23c:	9203      	str	r2, [sp, #12]
 800c23e:	9102      	str	r1, [sp, #8]
 800c240:	9001      	str	r0, [sp, #4]
 800c242:	f000 fd09 	bl	800cc58 <sqrtf>
 800c246:	a801      	add	r0, sp, #4
 800c248:	c807      	ldmia	r0, {r0, r1, r2}
 800c24a:	e746      	b.n	800c0da <arm_cmplx_mag_f32+0x5e>

0800c24c <arm_mult_f32>:
 800c24c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c24e:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800c252:	d033      	beq.n	800c2bc <arm_mult_f32+0x70>
 800c254:	f100 0610 	add.w	r6, r0, #16
 800c258:	f101 0510 	add.w	r5, r1, #16
 800c25c:	f102 0410 	add.w	r4, r2, #16
 800c260:	4677      	mov	r7, lr
 800c262:	ed16 6a04 	vldr	s12, [r6, #-16]
 800c266:	ed55 4a04 	vldr	s9, [r5, #-16]
 800c26a:	ed56 6a02 	vldr	s13, [r6, #-8]
 800c26e:	ed15 5a02 	vldr	s10, [r5, #-8]
 800c272:	ed16 7a03 	vldr	s14, [r6, #-12]
 800c276:	ed55 5a03 	vldr	s11, [r5, #-12]
 800c27a:	ed56 7a01 	vldr	s15, [r6, #-4]
 800c27e:	ee26 6a24 	vmul.f32	s12, s12, s9
 800c282:	ee66 6a85 	vmul.f32	s13, s13, s10
 800c286:	ed04 6a04 	vstr	s12, [r4, #-16]
 800c28a:	ed15 6a01 	vldr	s12, [r5, #-4]
 800c28e:	ed44 6a02 	vstr	s13, [r4, #-8]
 800c292:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c296:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c29a:	3f01      	subs	r7, #1
 800c29c:	ed04 7a03 	vstr	s14, [r4, #-12]
 800c2a0:	ed44 7a01 	vstr	s15, [r4, #-4]
 800c2a4:	f106 0610 	add.w	r6, r6, #16
 800c2a8:	f105 0510 	add.w	r5, r5, #16
 800c2ac:	f104 0410 	add.w	r4, r4, #16
 800c2b0:	d1d7      	bne.n	800c262 <arm_mult_f32+0x16>
 800c2b2:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800c2b6:	4420      	add	r0, r4
 800c2b8:	4421      	add	r1, r4
 800c2ba:	4422      	add	r2, r4
 800c2bc:	f013 0303 	ands.w	r3, r3, #3
 800c2c0:	d009      	beq.n	800c2d6 <arm_mult_f32+0x8a>
 800c2c2:	ecf0 7a01 	vldmia	r0!, {s15}
 800c2c6:	ecb1 7a01 	vldmia	r1!, {s14}
 800c2ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c2ce:	3b01      	subs	r3, #1
 800c2d0:	ece2 7a01 	vstmia	r2!, {s15}
 800c2d4:	d1f5      	bne.n	800c2c2 <arm_mult_f32+0x76>
 800c2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c2d8 <arm_radix8_butterfly_f32>:
 800c2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2dc:	ed2d 8b10 	vpush	{d8-d15}
 800c2e0:	b09d      	sub	sp, #116	; 0x74
 800c2e2:	461c      	mov	r4, r3
 800c2e4:	ed9f bac8 	vldr	s22, [pc, #800]	; 800c608 <arm_radix8_butterfly_f32+0x330>
 800c2e8:	921a      	str	r2, [sp, #104]	; 0x68
 800c2ea:	1d03      	adds	r3, r0, #4
 800c2ec:	4682      	mov	sl, r0
 800c2ee:	4689      	mov	r9, r1
 800c2f0:	468b      	mov	fp, r1
 800c2f2:	931b      	str	r3, [sp, #108]	; 0x6c
 800c2f4:	9400      	str	r4, [sp, #0]
 800c2f6:	469e      	mov	lr, r3
 800c2f8:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800c2fc:	005a      	lsls	r2, r3, #1
 800c2fe:	18d6      	adds	r6, r2, r3
 800c300:	18f5      	adds	r5, r6, r3
 800c302:	9203      	str	r2, [sp, #12]
 800c304:	195a      	adds	r2, r3, r5
 800c306:	18d0      	adds	r0, r2, r3
 800c308:	00df      	lsls	r7, r3, #3
 800c30a:	1819      	adds	r1, r3, r0
 800c30c:	463c      	mov	r4, r7
 800c30e:	9701      	str	r7, [sp, #4]
 800c310:	4457      	add	r7, sl
 800c312:	930c      	str	r3, [sp, #48]	; 0x30
 800c314:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 800c318:	011b      	lsls	r3, r3, #4
 800c31a:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 800c31e:	eb07 0c04 	add.w	ip, r7, r4
 800c322:	9c00      	ldr	r4, [sp, #0]
 800c324:	9302      	str	r3, [sp, #8]
 800c326:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 800c32a:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 800c32e:	3204      	adds	r2, #4
 800c330:	3104      	adds	r1, #4
 800c332:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 800c336:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c33a:	f04f 0800 	mov.w	r8, #0
 800c33e:	eddc 7a00 	vldr	s15, [ip]
 800c342:	edd7 6a00 	vldr	s13, [r7]
 800c346:	edd6 3a00 	vldr	s7, [r6]
 800c34a:	ed5e aa01 	vldr	s21, [lr, #-4]
 800c34e:	edd5 4a00 	vldr	s9, [r5]
 800c352:	ed90 2a00 	vldr	s4, [r0]
 800c356:	ed12 7a01 	vldr	s14, [r2, #-4]
 800c35a:	ed51 0a01 	vldr	s1, [r1, #-4]
 800c35e:	ee77 8a82 	vadd.f32	s17, s15, s4
 800c362:	ee33 4aa0 	vadd.f32	s8, s7, s1
 800c366:	ee76 1a87 	vadd.f32	s3, s13, s14
 800c36a:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 800c36e:	ee31 6a84 	vadd.f32	s12, s3, s8
 800c372:	ee33 5a28 	vadd.f32	s10, s6, s17
 800c376:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c37a:	ee75 6a06 	vadd.f32	s13, s10, s12
 800c37e:	ee35 5a46 	vsub.f32	s10, s10, s12
 800c382:	ed4e 6a01 	vstr	s13, [lr, #-4]
 800c386:	ed85 5a00 	vstr	s10, [r5]
 800c38a:	ed96 1a01 	vldr	s2, [r6, #4]
 800c38e:	edd7 5a01 	vldr	s11, [r7, #4]
 800c392:	ed92 aa00 	vldr	s20, [r2]
 800c396:	ed91 6a00 	vldr	s12, [r1]
 800c39a:	ed9e 9a00 	vldr	s18, [lr]
 800c39e:	ed95 5a01 	vldr	s10, [r5, #4]
 800c3a2:	eddc 6a01 	vldr	s13, [ip, #4]
 800c3a6:	edd0 9a01 	vldr	s19, [r0, #4]
 800c3aa:	ee73 0ae0 	vsub.f32	s1, s7, s1
 800c3ae:	ee71 2a46 	vsub.f32	s5, s2, s12
 800c3b2:	ee75 3aca 	vsub.f32	s7, s11, s20
 800c3b6:	ee37 0a60 	vsub.f32	s0, s14, s1
 800c3ba:	ee33 8aa2 	vadd.f32	s16, s7, s5
 800c3be:	ee37 7a20 	vadd.f32	s14, s14, s1
 800c3c2:	ee73 2ae2 	vsub.f32	s5, s7, s5
 800c3c6:	ee37 2ac2 	vsub.f32	s4, s15, s4
 800c3ca:	ee79 3a05 	vadd.f32	s7, s18, s10
 800c3ce:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800c3d2:	ee39 5a45 	vsub.f32	s10, s18, s10
 800c3d6:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 800c3da:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800c3de:	ee75 5a8a 	vadd.f32	s11, s11, s20
 800c3e2:	ee31 6a06 	vadd.f32	s12, s2, s12
 800c3e6:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800c3ea:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800c3ee:	ee62 2a8b 	vmul.f32	s5, s5, s22
 800c3f2:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800c3f6:	ee33 3a68 	vsub.f32	s6, s6, s17
 800c3fa:	ee36 0a88 	vadd.f32	s0, s13, s16
 800c3fe:	ee75 8a86 	vadd.f32	s17, s11, s12
 800c402:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800c406:	ee71 1ac4 	vsub.f32	s3, s3, s8
 800c40a:	ee75 6a62 	vsub.f32	s13, s10, s5
 800c40e:	ee33 4ac9 	vsub.f32	s8, s7, s18
 800c412:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800c416:	ee33 1a89 	vadd.f32	s2, s7, s18
 800c41a:	ee74 5ae0 	vsub.f32	s11, s9, s1
 800c41e:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800c422:	ee75 4a22 	vadd.f32	s9, s10, s5
 800c426:	ee32 5a27 	vadd.f32	s10, s4, s15
 800c42a:	ee72 7a67 	vsub.f32	s15, s4, s15
 800c42e:	ee33 8a06 	vadd.f32	s16, s6, s12
 800c432:	ee75 2a87 	vadd.f32	s5, s11, s14
 800c436:	ee31 9a28 	vadd.f32	s18, s2, s17
 800c43a:	ee33 6a46 	vsub.f32	s12, s6, s12
 800c43e:	ee74 0a61 	vsub.f32	s1, s8, s3
 800c442:	ee33 2a80 	vadd.f32	s4, s7, s0
 800c446:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800c44a:	ee34 3ac5 	vsub.f32	s6, s9, s10
 800c44e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800c452:	ee31 1a68 	vsub.f32	s2, s2, s17
 800c456:	ee34 4a21 	vadd.f32	s8, s8, s3
 800c45a:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800c45e:	ee74 4a85 	vadd.f32	s9, s9, s10
 800c462:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c466:	44d8      	add	r8, fp
 800c468:	45c1      	cmp	r9, r8
 800c46a:	ed8e 9a00 	vstr	s18, [lr]
 800c46e:	ed85 1a01 	vstr	s2, [r5, #4]
 800c472:	449e      	add	lr, r3
 800c474:	ed8c 8a00 	vstr	s16, [ip]
 800c478:	441d      	add	r5, r3
 800c47a:	ed80 6a00 	vstr	s12, [r0]
 800c47e:	edcc 0a01 	vstr	s1, [ip, #4]
 800c482:	ed80 4a01 	vstr	s8, [r0, #4]
 800c486:	449c      	add	ip, r3
 800c488:	ed87 2a00 	vstr	s4, [r7]
 800c48c:	4418      	add	r0, r3
 800c48e:	ed41 3a01 	vstr	s7, [r1, #-4]
 800c492:	ed42 2a01 	vstr	s5, [r2, #-4]
 800c496:	ed86 7a00 	vstr	s14, [r6]
 800c49a:	ed87 3a01 	vstr	s6, [r7, #4]
 800c49e:	edc1 4a00 	vstr	s9, [r1]
 800c4a2:	441f      	add	r7, r3
 800c4a4:	edc2 5a00 	vstr	s11, [r2]
 800c4a8:	4419      	add	r1, r3
 800c4aa:	edc6 6a01 	vstr	s13, [r6, #4]
 800c4ae:	441a      	add	r2, r3
 800c4b0:	441e      	add	r6, r3
 800c4b2:	f63f af44 	bhi.w	800c33e <arm_radix8_butterfly_f32+0x66>
 800c4b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c4b8:	2907      	cmp	r1, #7
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	f240 81e9 	bls.w	800c892 <arm_radix8_butterfly_f32+0x5ba>
 800c4c0:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 800c4c4:	193e      	adds	r6, r7, r4
 800c4c6:	1935      	adds	r5, r6, r4
 800c4c8:	9c03      	ldr	r4, [sp, #12]
 800c4ca:	9000      	str	r0, [sp, #0]
 800c4cc:	4622      	mov	r2, r4
 800c4ce:	3201      	adds	r2, #1
 800c4d0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800c4d4:	9900      	ldr	r1, [sp, #0]
 800c4d6:	1828      	adds	r0, r5, r0
 800c4d8:	eb00 0e01 	add.w	lr, r0, r1
 800c4dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c4de:	440a      	add	r2, r1
 800c4e0:	eb04 0c01 	add.w	ip, r4, r1
 800c4e4:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 800c4e8:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 800c4ec:	9a00      	ldr	r2, [sp, #0]
 800c4ee:	940f      	str	r4, [sp, #60]	; 0x3c
 800c4f0:	00ed      	lsls	r5, r5, #3
 800c4f2:	9511      	str	r5, [sp, #68]	; 0x44
 800c4f4:	00d5      	lsls	r5, r2, #3
 800c4f6:	950d      	str	r5, [sp, #52]	; 0x34
 800c4f8:	9d01      	ldr	r5, [sp, #4]
 800c4fa:	3508      	adds	r5, #8
 800c4fc:	9516      	str	r5, [sp, #88]	; 0x58
 800c4fe:	9d02      	ldr	r5, [sp, #8]
 800c500:	3508      	adds	r5, #8
 800c502:	0114      	lsls	r4, r2, #4
 800c504:	9517      	str	r5, [sp, #92]	; 0x5c
 800c506:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c508:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800c50a:	940e      	str	r4, [sp, #56]	; 0x38
 800c50c:	00c0      	lsls	r0, r0, #3
 800c50e:	9010      	str	r0, [sp, #64]	; 0x40
 800c510:	18aa      	adds	r2, r5, r2
 800c512:	9207      	str	r2, [sp, #28]
 800c514:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c516:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c518:	18aa      	adds	r2, r5, r2
 800c51a:	9208      	str	r2, [sp, #32]
 800c51c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c51e:	18aa      	adds	r2, r5, r2
 800c520:	9209      	str	r2, [sp, #36]	; 0x24
 800c522:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c526:	f10e 0204 	add.w	r2, lr, #4
 800c52a:	920a      	str	r2, [sp, #40]	; 0x28
 800c52c:	00c9      	lsls	r1, r1, #3
 800c52e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c530:	310c      	adds	r1, #12
 800c532:	00f6      	lsls	r6, r6, #3
 800c534:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 800c538:	9114      	str	r1, [sp, #80]	; 0x50
 800c53a:	18a9      	adds	r1, r5, r2
 800c53c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c53e:	9612      	str	r6, [sp, #72]	; 0x48
 800c540:	00ff      	lsls	r7, r7, #3
 800c542:	19ae      	adds	r6, r5, r6
 800c544:	3008      	adds	r0, #8
 800c546:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800c54a:	9606      	str	r6, [sp, #24]
 800c54c:	9019      	str	r0, [sp, #100]	; 0x64
 800c54e:	18aa      	adds	r2, r5, r2
 800c550:	0164      	lsls	r4, r4, #5
 800c552:	19ee      	adds	r6, r5, r7
 800c554:	f10c 000c 	add.w	r0, ip, #12
 800c558:	9713      	str	r7, [sp, #76]	; 0x4c
 800c55a:	9604      	str	r6, [sp, #16]
 800c55c:	9015      	str	r0, [sp, #84]	; 0x54
 800c55e:	9103      	str	r1, [sp, #12]
 800c560:	9205      	str	r2, [sp, #20]
 800c562:	f104 0208 	add.w	r2, r4, #8
 800c566:	9218      	str	r2, [sp, #96]	; 0x60
 800c568:	f04f 0801 	mov.w	r8, #1
 800c56c:	2200      	movs	r2, #0
 800c56e:	f102 0108 	add.w	r1, r2, #8
 800c572:	460f      	mov	r7, r1
 800c574:	910b      	str	r1, [sp, #44]	; 0x2c
 800c576:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c578:	188e      	adds	r6, r1, r2
 800c57a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c57c:	188d      	adds	r5, r1, r2
 800c57e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800c580:	188c      	adds	r4, r1, r2
 800c582:	9919      	ldr	r1, [sp, #100]	; 0x64
 800c584:	1888      	adds	r0, r1, r2
 800c586:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c588:	eb01 0c02 	add.w	ip, r1, r2
 800c58c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800c58e:	440a      	add	r2, r1
 800c590:	9903      	ldr	r1, [sp, #12]
 800c592:	edd1 fa00 	vldr	s31, [r1]
 800c596:	9905      	ldr	r1, [sp, #20]
 800c598:	ed91 fa00 	vldr	s30, [r1]
 800c59c:	9904      	ldr	r1, [sp, #16]
 800c59e:	edd1 ea00 	vldr	s29, [r1]
 800c5a2:	9906      	ldr	r1, [sp, #24]
 800c5a4:	ed91 ea00 	vldr	s28, [r1]
 800c5a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c5aa:	edd1 da00 	vldr	s27, [r1]
 800c5ae:	9908      	ldr	r1, [sp, #32]
 800c5b0:	ed91 da00 	vldr	s26, [r1]
 800c5b4:	9907      	ldr	r1, [sp, #28]
 800c5b6:	edd1 ca00 	vldr	s25, [r1]
 800c5ba:	9903      	ldr	r1, [sp, #12]
 800c5bc:	ed91 ca01 	vldr	s24, [r1, #4]
 800c5c0:	9905      	ldr	r1, [sp, #20]
 800c5c2:	edd1 ba01 	vldr	s23, [r1, #4]
 800c5c6:	9904      	ldr	r1, [sp, #16]
 800c5c8:	edd1 aa01 	vldr	s21, [r1, #4]
 800c5cc:	9906      	ldr	r1, [sp, #24]
 800c5ce:	ed91 aa01 	vldr	s20, [r1, #4]
 800c5d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c5d4:	edd1 7a01 	vldr	s15, [r1, #4]
 800c5d8:	9908      	ldr	r1, [sp, #32]
 800c5da:	edcd 7a00 	vstr	s15, [sp]
 800c5de:	edd1 7a01 	vldr	s15, [r1, #4]
 800c5e2:	9907      	ldr	r1, [sp, #28]
 800c5e4:	edcd 7a01 	vstr	s15, [sp, #4]
 800c5e8:	edd1 7a01 	vldr	s15, [r1, #4]
 800c5ec:	eb0a 0e07 	add.w	lr, sl, r7
 800c5f0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c5f2:	edcd 7a02 	vstr	s15, [sp, #8]
 800c5f6:	eb0c 010a 	add.w	r1, ip, sl
 800c5fa:	4456      	add	r6, sl
 800c5fc:	4455      	add	r5, sl
 800c5fe:	4454      	add	r4, sl
 800c600:	4450      	add	r0, sl
 800c602:	4452      	add	r2, sl
 800c604:	46c4      	mov	ip, r8
 800c606:	e001      	b.n	800c60c <arm_radix8_butterfly_f32+0x334>
 800c608:	3f3504f3 	.word	0x3f3504f3
 800c60c:	ed96 5a00 	vldr	s10, [r6]
 800c610:	ed52 9a01 	vldr	s19, [r2, #-4]
 800c614:	ed11 6a01 	vldr	s12, [r1, #-4]
 800c618:	edd0 7a00 	vldr	s15, [r0]
 800c61c:	ed17 7a01 	vldr	s14, [r7, #-4]
 800c620:	edde 3a00 	vldr	s7, [lr]
 800c624:	ed94 3a00 	vldr	s6, [r4]
 800c628:	ed95 2a00 	vldr	s4, [r5]
 800c62c:	ed9e 0a01 	vldr	s0, [lr, #4]
 800c630:	ee33 8a85 	vadd.f32	s16, s7, s10
 800c634:	ee32 1a06 	vadd.f32	s2, s4, s12
 800c638:	ee33 4a29 	vadd.f32	s8, s6, s19
 800c63c:	ee77 4a87 	vadd.f32	s9, s15, s14
 800c640:	ee78 1a04 	vadd.f32	s3, s16, s8
 800c644:	ee71 6a24 	vadd.f32	s13, s2, s9
 800c648:	ee32 2a46 	vsub.f32	s4, s4, s12
 800c64c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800c650:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c654:	ed8e 6a00 	vstr	s12, [lr]
 800c658:	edd0 8a01 	vldr	s17, [r0, #4]
 800c65c:	ed95 9a01 	vldr	s18, [r5, #4]
 800c660:	edd1 2a00 	vldr	s5, [r1]
 800c664:	ed97 7a00 	vldr	s14, [r7]
 800c668:	edd4 0a01 	vldr	s1, [r4, #4]
 800c66c:	ed96 6a01 	vldr	s12, [r6, #4]
 800c670:	edd2 5a00 	vldr	s11, [r2]
 800c674:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800c678:	ee33 3a69 	vsub.f32	s6, s6, s19
 800c67c:	ee39 5a62 	vsub.f32	s10, s18, s5
 800c680:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800c684:	ee38 4a44 	vsub.f32	s8, s16, s8
 800c688:	ee38 7a87 	vadd.f32	s14, s17, s14
 800c68c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800c690:	ee79 2a22 	vadd.f32	s5, s18, s5
 800c694:	ee75 8a69 	vsub.f32	s17, s10, s19
 800c698:	ee32 9a27 	vadd.f32	s18, s4, s15
 800c69c:	ee35 5a29 	vadd.f32	s10, s10, s19
 800c6a0:	ee72 7a67 	vsub.f32	s15, s4, s15
 800c6a4:	ee30 2a06 	vadd.f32	s4, s0, s12
 800c6a8:	ee69 9a0b 	vmul.f32	s19, s18, s22
 800c6ac:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800c6b0:	ee32 9a08 	vadd.f32	s18, s4, s16
 800c6b4:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800c6b8:	ee32 2a48 	vsub.f32	s4, s4, s16
 800c6bc:	ee71 4a64 	vsub.f32	s9, s2, s9
 800c6c0:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800c6c4:	ee32 1a87 	vadd.f32	s2, s5, s14
 800c6c8:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800c6cc:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800c6d0:	ee30 6a46 	vsub.f32	s12, s0, s12
 800c6d4:	ee73 0a29 	vadd.f32	s1, s6, s19
 800c6d8:	ee36 0a28 	vadd.f32	s0, s12, s17
 800c6dc:	ee33 3a69 	vsub.f32	s6, s6, s19
 800c6e0:	ee32 7a64 	vsub.f32	s14, s4, s9
 800c6e4:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800c6e8:	ee36 6a68 	vsub.f32	s12, s12, s17
 800c6ec:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800c6f0:	ee75 8a85 	vadd.f32	s17, s11, s10
 800c6f4:	ee74 3a22 	vadd.f32	s7, s8, s5
 800c6f8:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800c6fc:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800c700:	ee79 1a41 	vsub.f32	s3, s18, s2
 800c704:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800c708:	ee76 5a43 	vsub.f32	s11, s12, s6
 800c70c:	ee74 2a62 	vsub.f32	s5, s8, s5
 800c710:	ee72 4a24 	vadd.f32	s9, s4, s9
 800c714:	ee30 4a60 	vsub.f32	s8, s0, s1
 800c718:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800c71c:	ee30 0a20 	vadd.f32	s0, s0, s1
 800c720:	ee77 9a85 	vadd.f32	s19, s15, s10
 800c724:	ee36 6a03 	vadd.f32	s12, s12, s6
 800c728:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800c72c:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800c730:	ee2e 5a26 	vmul.f32	s10, s28, s13
 800c734:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800c738:	ee2a 3a21 	vmul.f32	s6, s20, s3
 800c73c:	ee39 1a01 	vadd.f32	s2, s18, s2
 800c740:	ee6a 6a26 	vmul.f32	s13, s20, s13
 800c744:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800c748:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 800c74c:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800c750:	ee6f 1a84 	vmul.f32	s3, s31, s8
 800c754:	ee35 3a03 	vadd.f32	s6, s10, s6
 800c758:	ee72 6a66 	vsub.f32	s13, s4, s13
 800c75c:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800c760:	ee2f 2a88 	vmul.f32	s4, s31, s16
 800c764:	ed9d 4a02 	vldr	s8, [sp, #8]
 800c768:	ed8e 1a01 	vstr	s2, [lr, #4]
 800c76c:	ee77 3a63 	vsub.f32	s7, s14, s7
 800c770:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800c774:	ed9d 7a01 	vldr	s14, [sp, #4]
 800c778:	ed86 3a00 	vstr	s6, [r6]
 800c77c:	ee30 9a89 	vadd.f32	s18, s1, s18
 800c780:	ee32 2a05 	vadd.f32	s4, s4, s10
 800c784:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800c788:	ee31 8ac8 	vsub.f32	s16, s3, s16
 800c78c:	ee67 2a22 	vmul.f32	s5, s14, s5
 800c790:	ee64 1a00 	vmul.f32	s3, s8, s0
 800c794:	ee27 7a24 	vmul.f32	s14, s14, s9
 800c798:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 800c79c:	ee6d 4a24 	vmul.f32	s9, s26, s9
 800c7a0:	ee64 8a28 	vmul.f32	s17, s8, s17
 800c7a4:	ed9d 4a00 	vldr	s8, [sp]
 800c7a8:	edc6 6a01 	vstr	s13, [r6, #4]
 800c7ac:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800c7b0:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800c7b4:	ee64 9a29 	vmul.f32	s19, s8, s19
 800c7b8:	ee24 4a25 	vmul.f32	s8, s8, s11
 800c7bc:	ee30 7a87 	vadd.f32	s14, s1, s14
 800c7c0:	ee74 4a84 	vadd.f32	s9, s9, s8
 800c7c4:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800c7c8:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800c7cc:	ee2c 0a80 	vmul.f32	s0, s25, s0
 800c7d0:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800c7d4:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800c7d8:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800c7dc:	ee75 1a21 	vadd.f32	s3, s10, s3
 800c7e0:	ee30 0a68 	vsub.f32	s0, s0, s17
 800c7e4:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800c7e8:	ee70 0a84 	vadd.f32	s1, s1, s8
 800c7ec:	ee36 6a67 	vsub.f32	s12, s12, s15
 800c7f0:	44dc      	add	ip, fp
 800c7f2:	45e1      	cmp	r9, ip
 800c7f4:	ed84 9a00 	vstr	s18, [r4]
 800c7f8:	edc4 3a01 	vstr	s7, [r4, #4]
 800c7fc:	449e      	add	lr, r3
 800c7fe:	ed02 7a01 	vstr	s14, [r2, #-4]
 800c802:	edc2 2a00 	vstr	s5, [r2]
 800c806:	441e      	add	r6, r3
 800c808:	ed85 2a00 	vstr	s4, [r5]
 800c80c:	ed85 8a01 	vstr	s16, [r5, #4]
 800c810:	441c      	add	r4, r3
 800c812:	ed47 1a01 	vstr	s3, [r7, #-4]
 800c816:	ed87 0a00 	vstr	s0, [r7]
 800c81a:	441a      	add	r2, r3
 800c81c:	ed41 4a01 	vstr	s9, [r1, #-4]
 800c820:	edc1 9a00 	vstr	s19, [r1]
 800c824:	441d      	add	r5, r3
 800c826:	edc0 0a00 	vstr	s1, [r0]
 800c82a:	441f      	add	r7, r3
 800c82c:	ed80 6a01 	vstr	s12, [r0, #4]
 800c830:	4419      	add	r1, r3
 800c832:	4418      	add	r0, r3
 800c834:	f63f aeea 	bhi.w	800c60c <arm_radix8_butterfly_f32+0x334>
 800c838:	9a03      	ldr	r2, [sp, #12]
 800c83a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c83c:	440a      	add	r2, r1
 800c83e:	9203      	str	r2, [sp, #12]
 800c840:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c842:	9a05      	ldr	r2, [sp, #20]
 800c844:	440a      	add	r2, r1
 800c846:	9205      	str	r2, [sp, #20]
 800c848:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c84a:	9a04      	ldr	r2, [sp, #16]
 800c84c:	440a      	add	r2, r1
 800c84e:	9204      	str	r2, [sp, #16]
 800c850:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c852:	9a06      	ldr	r2, [sp, #24]
 800c854:	440a      	add	r2, r1
 800c856:	9206      	str	r2, [sp, #24]
 800c858:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c85a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c85c:	440a      	add	r2, r1
 800c85e:	9209      	str	r2, [sp, #36]	; 0x24
 800c860:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c862:	9a08      	ldr	r2, [sp, #32]
 800c864:	440a      	add	r2, r1
 800c866:	9208      	str	r2, [sp, #32]
 800c868:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c86a:	9a07      	ldr	r2, [sp, #28]
 800c86c:	440a      	add	r2, r1
 800c86e:	9207      	str	r2, [sp, #28]
 800c870:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c872:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c874:	f108 0801 	add.w	r8, r8, #1
 800c878:	3208      	adds	r2, #8
 800c87a:	4588      	cmp	r8, r1
 800c87c:	920a      	str	r2, [sp, #40]	; 0x28
 800c87e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c880:	f47f ae75 	bne.w	800c56e <arm_radix8_butterfly_f32+0x296>
 800c884:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800c888:	9300      	str	r3, [sp, #0]
 800c88a:	46c3      	mov	fp, r8
 800c88c:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 800c890:	e532      	b.n	800c2f8 <arm_radix8_butterfly_f32+0x20>
 800c892:	b01d      	add	sp, #116	; 0x74
 800c894:	ecbd 8b10 	vpop	{d8-d15}
 800c898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c89c <calloc>:
 800c89c:	4b02      	ldr	r3, [pc, #8]	; (800c8a8 <calloc+0xc>)
 800c89e:	460a      	mov	r2, r1
 800c8a0:	4601      	mov	r1, r0
 800c8a2:	6818      	ldr	r0, [r3, #0]
 800c8a4:	f000 b84f 	b.w	800c946 <_calloc_r>
 800c8a8:	20000190 	.word	0x20000190

0800c8ac <__errno>:
 800c8ac:	4b01      	ldr	r3, [pc, #4]	; (800c8b4 <__errno+0x8>)
 800c8ae:	6818      	ldr	r0, [r3, #0]
 800c8b0:	4770      	bx	lr
 800c8b2:	bf00      	nop
 800c8b4:	20000190 	.word	0x20000190

0800c8b8 <__libc_init_array>:
 800c8b8:	b570      	push	{r4, r5, r6, lr}
 800c8ba:	4e0d      	ldr	r6, [pc, #52]	; (800c8f0 <__libc_init_array+0x38>)
 800c8bc:	4c0d      	ldr	r4, [pc, #52]	; (800c8f4 <__libc_init_array+0x3c>)
 800c8be:	1ba4      	subs	r4, r4, r6
 800c8c0:	10a4      	asrs	r4, r4, #2
 800c8c2:	2500      	movs	r5, #0
 800c8c4:	42a5      	cmp	r5, r4
 800c8c6:	d109      	bne.n	800c8dc <__libc_init_array+0x24>
 800c8c8:	4e0b      	ldr	r6, [pc, #44]	; (800c8f8 <__libc_init_array+0x40>)
 800c8ca:	4c0c      	ldr	r4, [pc, #48]	; (800c8fc <__libc_init_array+0x44>)
 800c8cc:	f001 f8de 	bl	800da8c <_init>
 800c8d0:	1ba4      	subs	r4, r4, r6
 800c8d2:	10a4      	asrs	r4, r4, #2
 800c8d4:	2500      	movs	r5, #0
 800c8d6:	42a5      	cmp	r5, r4
 800c8d8:	d105      	bne.n	800c8e6 <__libc_init_array+0x2e>
 800c8da:	bd70      	pop	{r4, r5, r6, pc}
 800c8dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c8e0:	4798      	blx	r3
 800c8e2:	3501      	adds	r5, #1
 800c8e4:	e7ee      	b.n	800c8c4 <__libc_init_array+0xc>
 800c8e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c8ea:	4798      	blx	r3
 800c8ec:	3501      	adds	r5, #1
 800c8ee:	e7f2      	b.n	800c8d6 <__libc_init_array+0x1e>
 800c8f0:	08021398 	.word	0x08021398
 800c8f4:	08021398 	.word	0x08021398
 800c8f8:	08021398 	.word	0x08021398
 800c8fc:	0802139c 	.word	0x0802139c

0800c900 <malloc>:
 800c900:	4b02      	ldr	r3, [pc, #8]	; (800c90c <malloc+0xc>)
 800c902:	4601      	mov	r1, r0
 800c904:	6818      	ldr	r0, [r3, #0]
 800c906:	f000 b87b 	b.w	800ca00 <_malloc_r>
 800c90a:	bf00      	nop
 800c90c:	20000190 	.word	0x20000190

0800c910 <free>:
 800c910:	4b02      	ldr	r3, [pc, #8]	; (800c91c <free+0xc>)
 800c912:	4601      	mov	r1, r0
 800c914:	6818      	ldr	r0, [r3, #0]
 800c916:	f000 b825 	b.w	800c964 <_free_r>
 800c91a:	bf00      	nop
 800c91c:	20000190 	.word	0x20000190

0800c920 <memcpy>:
 800c920:	b510      	push	{r4, lr}
 800c922:	1e43      	subs	r3, r0, #1
 800c924:	440a      	add	r2, r1
 800c926:	4291      	cmp	r1, r2
 800c928:	d100      	bne.n	800c92c <memcpy+0xc>
 800c92a:	bd10      	pop	{r4, pc}
 800c92c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c930:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c934:	e7f7      	b.n	800c926 <memcpy+0x6>

0800c936 <memset>:
 800c936:	4402      	add	r2, r0
 800c938:	4603      	mov	r3, r0
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d100      	bne.n	800c940 <memset+0xa>
 800c93e:	4770      	bx	lr
 800c940:	f803 1b01 	strb.w	r1, [r3], #1
 800c944:	e7f9      	b.n	800c93a <memset+0x4>

0800c946 <_calloc_r>:
 800c946:	b538      	push	{r3, r4, r5, lr}
 800c948:	fb02 f401 	mul.w	r4, r2, r1
 800c94c:	4621      	mov	r1, r4
 800c94e:	f000 f857 	bl	800ca00 <_malloc_r>
 800c952:	4605      	mov	r5, r0
 800c954:	b118      	cbz	r0, 800c95e <_calloc_r+0x18>
 800c956:	4622      	mov	r2, r4
 800c958:	2100      	movs	r1, #0
 800c95a:	f7ff ffec 	bl	800c936 <memset>
 800c95e:	4628      	mov	r0, r5
 800c960:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c964 <_free_r>:
 800c964:	b538      	push	{r3, r4, r5, lr}
 800c966:	4605      	mov	r5, r0
 800c968:	2900      	cmp	r1, #0
 800c96a:	d045      	beq.n	800c9f8 <_free_r+0x94>
 800c96c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c970:	1f0c      	subs	r4, r1, #4
 800c972:	2b00      	cmp	r3, #0
 800c974:	bfb8      	it	lt
 800c976:	18e4      	addlt	r4, r4, r3
 800c978:	f000 f8ac 	bl	800cad4 <__malloc_lock>
 800c97c:	4a1f      	ldr	r2, [pc, #124]	; (800c9fc <_free_r+0x98>)
 800c97e:	6813      	ldr	r3, [r2, #0]
 800c980:	4610      	mov	r0, r2
 800c982:	b933      	cbnz	r3, 800c992 <_free_r+0x2e>
 800c984:	6063      	str	r3, [r4, #4]
 800c986:	6014      	str	r4, [r2, #0]
 800c988:	4628      	mov	r0, r5
 800c98a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c98e:	f000 b8a2 	b.w	800cad6 <__malloc_unlock>
 800c992:	42a3      	cmp	r3, r4
 800c994:	d90c      	bls.n	800c9b0 <_free_r+0x4c>
 800c996:	6821      	ldr	r1, [r4, #0]
 800c998:	1862      	adds	r2, r4, r1
 800c99a:	4293      	cmp	r3, r2
 800c99c:	bf04      	itt	eq
 800c99e:	681a      	ldreq	r2, [r3, #0]
 800c9a0:	685b      	ldreq	r3, [r3, #4]
 800c9a2:	6063      	str	r3, [r4, #4]
 800c9a4:	bf04      	itt	eq
 800c9a6:	1852      	addeq	r2, r2, r1
 800c9a8:	6022      	streq	r2, [r4, #0]
 800c9aa:	6004      	str	r4, [r0, #0]
 800c9ac:	e7ec      	b.n	800c988 <_free_r+0x24>
 800c9ae:	4613      	mov	r3, r2
 800c9b0:	685a      	ldr	r2, [r3, #4]
 800c9b2:	b10a      	cbz	r2, 800c9b8 <_free_r+0x54>
 800c9b4:	42a2      	cmp	r2, r4
 800c9b6:	d9fa      	bls.n	800c9ae <_free_r+0x4a>
 800c9b8:	6819      	ldr	r1, [r3, #0]
 800c9ba:	1858      	adds	r0, r3, r1
 800c9bc:	42a0      	cmp	r0, r4
 800c9be:	d10b      	bne.n	800c9d8 <_free_r+0x74>
 800c9c0:	6820      	ldr	r0, [r4, #0]
 800c9c2:	4401      	add	r1, r0
 800c9c4:	1858      	adds	r0, r3, r1
 800c9c6:	4282      	cmp	r2, r0
 800c9c8:	6019      	str	r1, [r3, #0]
 800c9ca:	d1dd      	bne.n	800c988 <_free_r+0x24>
 800c9cc:	6810      	ldr	r0, [r2, #0]
 800c9ce:	6852      	ldr	r2, [r2, #4]
 800c9d0:	605a      	str	r2, [r3, #4]
 800c9d2:	4401      	add	r1, r0
 800c9d4:	6019      	str	r1, [r3, #0]
 800c9d6:	e7d7      	b.n	800c988 <_free_r+0x24>
 800c9d8:	d902      	bls.n	800c9e0 <_free_r+0x7c>
 800c9da:	230c      	movs	r3, #12
 800c9dc:	602b      	str	r3, [r5, #0]
 800c9de:	e7d3      	b.n	800c988 <_free_r+0x24>
 800c9e0:	6820      	ldr	r0, [r4, #0]
 800c9e2:	1821      	adds	r1, r4, r0
 800c9e4:	428a      	cmp	r2, r1
 800c9e6:	bf04      	itt	eq
 800c9e8:	6811      	ldreq	r1, [r2, #0]
 800c9ea:	6852      	ldreq	r2, [r2, #4]
 800c9ec:	6062      	str	r2, [r4, #4]
 800c9ee:	bf04      	itt	eq
 800c9f0:	1809      	addeq	r1, r1, r0
 800c9f2:	6021      	streq	r1, [r4, #0]
 800c9f4:	605c      	str	r4, [r3, #4]
 800c9f6:	e7c7      	b.n	800c988 <_free_r+0x24>
 800c9f8:	bd38      	pop	{r3, r4, r5, pc}
 800c9fa:	bf00      	nop
 800c9fc:	20000220 	.word	0x20000220

0800ca00 <_malloc_r>:
 800ca00:	b570      	push	{r4, r5, r6, lr}
 800ca02:	1ccd      	adds	r5, r1, #3
 800ca04:	f025 0503 	bic.w	r5, r5, #3
 800ca08:	3508      	adds	r5, #8
 800ca0a:	2d0c      	cmp	r5, #12
 800ca0c:	bf38      	it	cc
 800ca0e:	250c      	movcc	r5, #12
 800ca10:	2d00      	cmp	r5, #0
 800ca12:	4606      	mov	r6, r0
 800ca14:	db01      	blt.n	800ca1a <_malloc_r+0x1a>
 800ca16:	42a9      	cmp	r1, r5
 800ca18:	d903      	bls.n	800ca22 <_malloc_r+0x22>
 800ca1a:	230c      	movs	r3, #12
 800ca1c:	6033      	str	r3, [r6, #0]
 800ca1e:	2000      	movs	r0, #0
 800ca20:	bd70      	pop	{r4, r5, r6, pc}
 800ca22:	f000 f857 	bl	800cad4 <__malloc_lock>
 800ca26:	4a21      	ldr	r2, [pc, #132]	; (800caac <_malloc_r+0xac>)
 800ca28:	6814      	ldr	r4, [r2, #0]
 800ca2a:	4621      	mov	r1, r4
 800ca2c:	b991      	cbnz	r1, 800ca54 <_malloc_r+0x54>
 800ca2e:	4c20      	ldr	r4, [pc, #128]	; (800cab0 <_malloc_r+0xb0>)
 800ca30:	6823      	ldr	r3, [r4, #0]
 800ca32:	b91b      	cbnz	r3, 800ca3c <_malloc_r+0x3c>
 800ca34:	4630      	mov	r0, r6
 800ca36:	f000 f83d 	bl	800cab4 <_sbrk_r>
 800ca3a:	6020      	str	r0, [r4, #0]
 800ca3c:	4629      	mov	r1, r5
 800ca3e:	4630      	mov	r0, r6
 800ca40:	f000 f838 	bl	800cab4 <_sbrk_r>
 800ca44:	1c43      	adds	r3, r0, #1
 800ca46:	d124      	bne.n	800ca92 <_malloc_r+0x92>
 800ca48:	230c      	movs	r3, #12
 800ca4a:	6033      	str	r3, [r6, #0]
 800ca4c:	4630      	mov	r0, r6
 800ca4e:	f000 f842 	bl	800cad6 <__malloc_unlock>
 800ca52:	e7e4      	b.n	800ca1e <_malloc_r+0x1e>
 800ca54:	680b      	ldr	r3, [r1, #0]
 800ca56:	1b5b      	subs	r3, r3, r5
 800ca58:	d418      	bmi.n	800ca8c <_malloc_r+0x8c>
 800ca5a:	2b0b      	cmp	r3, #11
 800ca5c:	d90f      	bls.n	800ca7e <_malloc_r+0x7e>
 800ca5e:	600b      	str	r3, [r1, #0]
 800ca60:	50cd      	str	r5, [r1, r3]
 800ca62:	18cc      	adds	r4, r1, r3
 800ca64:	4630      	mov	r0, r6
 800ca66:	f000 f836 	bl	800cad6 <__malloc_unlock>
 800ca6a:	f104 000b 	add.w	r0, r4, #11
 800ca6e:	1d23      	adds	r3, r4, #4
 800ca70:	f020 0007 	bic.w	r0, r0, #7
 800ca74:	1ac3      	subs	r3, r0, r3
 800ca76:	d0d3      	beq.n	800ca20 <_malloc_r+0x20>
 800ca78:	425a      	negs	r2, r3
 800ca7a:	50e2      	str	r2, [r4, r3]
 800ca7c:	e7d0      	b.n	800ca20 <_malloc_r+0x20>
 800ca7e:	428c      	cmp	r4, r1
 800ca80:	684b      	ldr	r3, [r1, #4]
 800ca82:	bf16      	itet	ne
 800ca84:	6063      	strne	r3, [r4, #4]
 800ca86:	6013      	streq	r3, [r2, #0]
 800ca88:	460c      	movne	r4, r1
 800ca8a:	e7eb      	b.n	800ca64 <_malloc_r+0x64>
 800ca8c:	460c      	mov	r4, r1
 800ca8e:	6849      	ldr	r1, [r1, #4]
 800ca90:	e7cc      	b.n	800ca2c <_malloc_r+0x2c>
 800ca92:	1cc4      	adds	r4, r0, #3
 800ca94:	f024 0403 	bic.w	r4, r4, #3
 800ca98:	42a0      	cmp	r0, r4
 800ca9a:	d005      	beq.n	800caa8 <_malloc_r+0xa8>
 800ca9c:	1a21      	subs	r1, r4, r0
 800ca9e:	4630      	mov	r0, r6
 800caa0:	f000 f808 	bl	800cab4 <_sbrk_r>
 800caa4:	3001      	adds	r0, #1
 800caa6:	d0cf      	beq.n	800ca48 <_malloc_r+0x48>
 800caa8:	6025      	str	r5, [r4, #0]
 800caaa:	e7db      	b.n	800ca64 <_malloc_r+0x64>
 800caac:	20000220 	.word	0x20000220
 800cab0:	20000224 	.word	0x20000224

0800cab4 <_sbrk_r>:
 800cab4:	b538      	push	{r3, r4, r5, lr}
 800cab6:	4c06      	ldr	r4, [pc, #24]	; (800cad0 <_sbrk_r+0x1c>)
 800cab8:	2300      	movs	r3, #0
 800caba:	4605      	mov	r5, r0
 800cabc:	4608      	mov	r0, r1
 800cabe:	6023      	str	r3, [r4, #0]
 800cac0:	f7f5 fc46 	bl	8002350 <_sbrk>
 800cac4:	1c43      	adds	r3, r0, #1
 800cac6:	d102      	bne.n	800cace <_sbrk_r+0x1a>
 800cac8:	6823      	ldr	r3, [r4, #0]
 800caca:	b103      	cbz	r3, 800cace <_sbrk_r+0x1a>
 800cacc:	602b      	str	r3, [r5, #0]
 800cace:	bd38      	pop	{r3, r4, r5, pc}
 800cad0:	20003d0c 	.word	0x20003d0c

0800cad4 <__malloc_lock>:
 800cad4:	4770      	bx	lr

0800cad6 <__malloc_unlock>:
 800cad6:	4770      	bx	lr

0800cad8 <cosf>:
 800cad8:	ee10 3a10 	vmov	r3, s0
 800cadc:	b507      	push	{r0, r1, r2, lr}
 800cade:	4a1c      	ldr	r2, [pc, #112]	; (800cb50 <cosf+0x78>)
 800cae0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cae4:	4293      	cmp	r3, r2
 800cae6:	dc04      	bgt.n	800caf2 <cosf+0x1a>
 800cae8:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800cb54 <cosf+0x7c>
 800caec:	f000 fbe6 	bl	800d2bc <__kernel_cosf>
 800caf0:	e004      	b.n	800cafc <cosf+0x24>
 800caf2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800caf6:	db04      	blt.n	800cb02 <cosf+0x2a>
 800caf8:	ee30 0a40 	vsub.f32	s0, s0, s0
 800cafc:	b003      	add	sp, #12
 800cafe:	f85d fb04 	ldr.w	pc, [sp], #4
 800cb02:	4668      	mov	r0, sp
 800cb04:	f000 faaa 	bl	800d05c <__ieee754_rem_pio2f>
 800cb08:	f000 0003 	and.w	r0, r0, #3
 800cb0c:	2801      	cmp	r0, #1
 800cb0e:	d007      	beq.n	800cb20 <cosf+0x48>
 800cb10:	2802      	cmp	r0, #2
 800cb12:	d00e      	beq.n	800cb32 <cosf+0x5a>
 800cb14:	b9a0      	cbnz	r0, 800cb40 <cosf+0x68>
 800cb16:	eddd 0a01 	vldr	s1, [sp, #4]
 800cb1a:	ed9d 0a00 	vldr	s0, [sp]
 800cb1e:	e7e5      	b.n	800caec <cosf+0x14>
 800cb20:	eddd 0a01 	vldr	s1, [sp, #4]
 800cb24:	ed9d 0a00 	vldr	s0, [sp]
 800cb28:	f000 fea8 	bl	800d87c <__kernel_sinf>
 800cb2c:	eeb1 0a40 	vneg.f32	s0, s0
 800cb30:	e7e4      	b.n	800cafc <cosf+0x24>
 800cb32:	eddd 0a01 	vldr	s1, [sp, #4]
 800cb36:	ed9d 0a00 	vldr	s0, [sp]
 800cb3a:	f000 fbbf 	bl	800d2bc <__kernel_cosf>
 800cb3e:	e7f5      	b.n	800cb2c <cosf+0x54>
 800cb40:	2001      	movs	r0, #1
 800cb42:	eddd 0a01 	vldr	s1, [sp, #4]
 800cb46:	ed9d 0a00 	vldr	s0, [sp]
 800cb4a:	f000 fe97 	bl	800d87c <__kernel_sinf>
 800cb4e:	e7d5      	b.n	800cafc <cosf+0x24>
 800cb50:	3f490fd8 	.word	0x3f490fd8
 800cb54:	00000000 	.word	0x00000000

0800cb58 <log>:
 800cb58:	b570      	push	{r4, r5, r6, lr}
 800cb5a:	ed2d 8b02 	vpush	{d8}
 800cb5e:	b08a      	sub	sp, #40	; 0x28
 800cb60:	ec55 4b10 	vmov	r4, r5, d0
 800cb64:	f000 f8c8 	bl	800ccf8 <__ieee754_log>
 800cb68:	4b36      	ldr	r3, [pc, #216]	; (800cc44 <log+0xec>)
 800cb6a:	eeb0 8a40 	vmov.f32	s16, s0
 800cb6e:	eef0 8a60 	vmov.f32	s17, s1
 800cb72:	f993 6000 	ldrsb.w	r6, [r3]
 800cb76:	1c73      	adds	r3, r6, #1
 800cb78:	d05b      	beq.n	800cc32 <log+0xda>
 800cb7a:	4622      	mov	r2, r4
 800cb7c:	462b      	mov	r3, r5
 800cb7e:	4620      	mov	r0, r4
 800cb80:	4629      	mov	r1, r5
 800cb82:	f7f3 fff3 	bl	8000b6c <__aeabi_dcmpun>
 800cb86:	2800      	cmp	r0, #0
 800cb88:	d153      	bne.n	800cc32 <log+0xda>
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	4620      	mov	r0, r4
 800cb90:	4629      	mov	r1, r5
 800cb92:	f7f3 ffe1 	bl	8000b58 <__aeabi_dcmpgt>
 800cb96:	2800      	cmp	r0, #0
 800cb98:	d14b      	bne.n	800cc32 <log+0xda>
 800cb9a:	4b2b      	ldr	r3, [pc, #172]	; (800cc48 <log+0xf0>)
 800cb9c:	9301      	str	r3, [sp, #4]
 800cb9e:	9008      	str	r0, [sp, #32]
 800cba0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800cba4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800cba8:	b9a6      	cbnz	r6, 800cbd4 <log+0x7c>
 800cbaa:	4b28      	ldr	r3, [pc, #160]	; (800cc4c <log+0xf4>)
 800cbac:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800cbb0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	2300      	movs	r3, #0
 800cbba:	4629      	mov	r1, r5
 800cbbc:	f7f3 ffa4 	bl	8000b08 <__aeabi_dcmpeq>
 800cbc0:	bb40      	cbnz	r0, 800cc14 <log+0xbc>
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	2e02      	cmp	r6, #2
 800cbc6:	9300      	str	r3, [sp, #0]
 800cbc8:	d119      	bne.n	800cbfe <log+0xa6>
 800cbca:	f7ff fe6f 	bl	800c8ac <__errno>
 800cbce:	2321      	movs	r3, #33	; 0x21
 800cbd0:	6003      	str	r3, [r0, #0]
 800cbd2:	e019      	b.n	800cc08 <log+0xb0>
 800cbd4:	4b1e      	ldr	r3, [pc, #120]	; (800cc50 <log+0xf8>)
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cbdc:	4620      	mov	r0, r4
 800cbde:	2200      	movs	r2, #0
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	4629      	mov	r1, r5
 800cbe4:	f7f3 ff90 	bl	8000b08 <__aeabi_dcmpeq>
 800cbe8:	2800      	cmp	r0, #0
 800cbea:	d0ea      	beq.n	800cbc2 <log+0x6a>
 800cbec:	2302      	movs	r3, #2
 800cbee:	429e      	cmp	r6, r3
 800cbf0:	9300      	str	r3, [sp, #0]
 800cbf2:	d111      	bne.n	800cc18 <log+0xc0>
 800cbf4:	f7ff fe5a 	bl	800c8ac <__errno>
 800cbf8:	2322      	movs	r3, #34	; 0x22
 800cbfa:	6003      	str	r3, [r0, #0]
 800cbfc:	e011      	b.n	800cc22 <log+0xca>
 800cbfe:	4668      	mov	r0, sp
 800cc00:	f000 fe84 	bl	800d90c <matherr>
 800cc04:	2800      	cmp	r0, #0
 800cc06:	d0e0      	beq.n	800cbca <log+0x72>
 800cc08:	4812      	ldr	r0, [pc, #72]	; (800cc54 <log+0xfc>)
 800cc0a:	f000 fe81 	bl	800d910 <nan>
 800cc0e:	ed8d 0b06 	vstr	d0, [sp, #24]
 800cc12:	e006      	b.n	800cc22 <log+0xca>
 800cc14:	2302      	movs	r3, #2
 800cc16:	9300      	str	r3, [sp, #0]
 800cc18:	4668      	mov	r0, sp
 800cc1a:	f000 fe77 	bl	800d90c <matherr>
 800cc1e:	2800      	cmp	r0, #0
 800cc20:	d0e8      	beq.n	800cbf4 <log+0x9c>
 800cc22:	9b08      	ldr	r3, [sp, #32]
 800cc24:	b11b      	cbz	r3, 800cc2e <log+0xd6>
 800cc26:	f7ff fe41 	bl	800c8ac <__errno>
 800cc2a:	9b08      	ldr	r3, [sp, #32]
 800cc2c:	6003      	str	r3, [r0, #0]
 800cc2e:	ed9d 8b06 	vldr	d8, [sp, #24]
 800cc32:	eeb0 0a48 	vmov.f32	s0, s16
 800cc36:	eef0 0a68 	vmov.f32	s1, s17
 800cc3a:	b00a      	add	sp, #40	; 0x28
 800cc3c:	ecbd 8b02 	vpop	{d8}
 800cc40:	bd70      	pop	{r4, r5, r6, pc}
 800cc42:	bf00      	nop
 800cc44:	200001f4 	.word	0x200001f4
 800cc48:	08020fb4 	.word	0x08020fb4
 800cc4c:	c7efffff 	.word	0xc7efffff
 800cc50:	fff00000 	.word	0xfff00000
 800cc54:	08020fbd 	.word	0x08020fbd

0800cc58 <sqrtf>:
 800cc58:	b510      	push	{r4, lr}
 800cc5a:	ed2d 8b02 	vpush	{d8}
 800cc5e:	b08a      	sub	sp, #40	; 0x28
 800cc60:	eeb0 8a40 	vmov.f32	s16, s0
 800cc64:	f000 fb26 	bl	800d2b4 <__ieee754_sqrtf>
 800cc68:	4b21      	ldr	r3, [pc, #132]	; (800ccf0 <sqrtf+0x98>)
 800cc6a:	f993 4000 	ldrsb.w	r4, [r3]
 800cc6e:	1c63      	adds	r3, r4, #1
 800cc70:	d02c      	beq.n	800cccc <sqrtf+0x74>
 800cc72:	eeb4 8a48 	vcmp.f32	s16, s16
 800cc76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc7a:	d627      	bvs.n	800cccc <sqrtf+0x74>
 800cc7c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cc80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc84:	d522      	bpl.n	800cccc <sqrtf+0x74>
 800cc86:	2301      	movs	r3, #1
 800cc88:	9300      	str	r3, [sp, #0]
 800cc8a:	4b1a      	ldr	r3, [pc, #104]	; (800ccf4 <sqrtf+0x9c>)
 800cc8c:	9301      	str	r3, [sp, #4]
 800cc8e:	ee18 0a10 	vmov	r0, s16
 800cc92:	2300      	movs	r3, #0
 800cc94:	9308      	str	r3, [sp, #32]
 800cc96:	f7f3 fc77 	bl	8000588 <__aeabi_f2d>
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cca0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cca4:	2300      	movs	r3, #0
 800cca6:	b9ac      	cbnz	r4, 800ccd4 <sqrtf+0x7c>
 800cca8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ccac:	4668      	mov	r0, sp
 800ccae:	f000 fe2d 	bl	800d90c <matherr>
 800ccb2:	b1b8      	cbz	r0, 800cce4 <sqrtf+0x8c>
 800ccb4:	9b08      	ldr	r3, [sp, #32]
 800ccb6:	b11b      	cbz	r3, 800ccc0 <sqrtf+0x68>
 800ccb8:	f7ff fdf8 	bl	800c8ac <__errno>
 800ccbc:	9b08      	ldr	r3, [sp, #32]
 800ccbe:	6003      	str	r3, [r0, #0]
 800ccc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ccc4:	f7f3 ff68 	bl	8000b98 <__aeabi_d2f>
 800ccc8:	ee00 0a10 	vmov	s0, r0
 800cccc:	b00a      	add	sp, #40	; 0x28
 800ccce:	ecbd 8b02 	vpop	{d8}
 800ccd2:	bd10      	pop	{r4, pc}
 800ccd4:	4610      	mov	r0, r2
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	f7f3 fdd8 	bl	800088c <__aeabi_ddiv>
 800ccdc:	2c02      	cmp	r4, #2
 800ccde:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cce2:	d1e3      	bne.n	800ccac <sqrtf+0x54>
 800cce4:	f7ff fde2 	bl	800c8ac <__errno>
 800cce8:	2321      	movs	r3, #33	; 0x21
 800ccea:	6003      	str	r3, [r0, #0]
 800ccec:	e7e2      	b.n	800ccb4 <sqrtf+0x5c>
 800ccee:	bf00      	nop
 800ccf0:	200001f4 	.word	0x200001f4
 800ccf4:	08020fb8 	.word	0x08020fb8

0800ccf8 <__ieee754_log>:
 800ccf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccfc:	ec51 0b10 	vmov	r0, r1, d0
 800cd00:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800cd04:	b087      	sub	sp, #28
 800cd06:	460d      	mov	r5, r1
 800cd08:	da27      	bge.n	800cd5a <__ieee754_log+0x62>
 800cd0a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cd0e:	4303      	orrs	r3, r0
 800cd10:	ee10 2a10 	vmov	r2, s0
 800cd14:	d10a      	bne.n	800cd2c <__ieee754_log+0x34>
 800cd16:	49cc      	ldr	r1, [pc, #816]	; (800d048 <__ieee754_log+0x350>)
 800cd18:	2200      	movs	r2, #0
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	2000      	movs	r0, #0
 800cd1e:	f7f3 fdb5 	bl	800088c <__aeabi_ddiv>
 800cd22:	ec41 0b10 	vmov	d0, r0, r1
 800cd26:	b007      	add	sp, #28
 800cd28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd2c:	2900      	cmp	r1, #0
 800cd2e:	da05      	bge.n	800cd3c <__ieee754_log+0x44>
 800cd30:	460b      	mov	r3, r1
 800cd32:	f7f3 fac9 	bl	80002c8 <__aeabi_dsub>
 800cd36:	2200      	movs	r2, #0
 800cd38:	2300      	movs	r3, #0
 800cd3a:	e7f0      	b.n	800cd1e <__ieee754_log+0x26>
 800cd3c:	4bc3      	ldr	r3, [pc, #780]	; (800d04c <__ieee754_log+0x354>)
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f7f3 fc7a 	bl	8000638 <__aeabi_dmul>
 800cd44:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800cd48:	460d      	mov	r5, r1
 800cd4a:	4ac1      	ldr	r2, [pc, #772]	; (800d050 <__ieee754_log+0x358>)
 800cd4c:	4295      	cmp	r5, r2
 800cd4e:	dd06      	ble.n	800cd5e <__ieee754_log+0x66>
 800cd50:	4602      	mov	r2, r0
 800cd52:	460b      	mov	r3, r1
 800cd54:	f7f3 faba 	bl	80002cc <__adddf3>
 800cd58:	e7e3      	b.n	800cd22 <__ieee754_log+0x2a>
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	e7f5      	b.n	800cd4a <__ieee754_log+0x52>
 800cd5e:	152c      	asrs	r4, r5, #20
 800cd60:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800cd64:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800cd68:	441c      	add	r4, r3
 800cd6a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800cd6e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800cd72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd76:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800cd7a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800cd7e:	ea42 0105 	orr.w	r1, r2, r5
 800cd82:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800cd86:	2200      	movs	r2, #0
 800cd88:	4bb2      	ldr	r3, [pc, #712]	; (800d054 <__ieee754_log+0x35c>)
 800cd8a:	f7f3 fa9d 	bl	80002c8 <__aeabi_dsub>
 800cd8e:	1cab      	adds	r3, r5, #2
 800cd90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd94:	2b02      	cmp	r3, #2
 800cd96:	4682      	mov	sl, r0
 800cd98:	468b      	mov	fp, r1
 800cd9a:	f04f 0200 	mov.w	r2, #0
 800cd9e:	dc53      	bgt.n	800ce48 <__ieee754_log+0x150>
 800cda0:	2300      	movs	r3, #0
 800cda2:	f7f3 feb1 	bl	8000b08 <__aeabi_dcmpeq>
 800cda6:	b1d0      	cbz	r0, 800cdde <__ieee754_log+0xe6>
 800cda8:	2c00      	cmp	r4, #0
 800cdaa:	f000 8120 	beq.w	800cfee <__ieee754_log+0x2f6>
 800cdae:	4620      	mov	r0, r4
 800cdb0:	f7f3 fbd8 	bl	8000564 <__aeabi_i2d>
 800cdb4:	a390      	add	r3, pc, #576	; (adr r3, 800cff8 <__ieee754_log+0x300>)
 800cdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdba:	4606      	mov	r6, r0
 800cdbc:	460f      	mov	r7, r1
 800cdbe:	f7f3 fc3b 	bl	8000638 <__aeabi_dmul>
 800cdc2:	a38f      	add	r3, pc, #572	; (adr r3, 800d000 <__ieee754_log+0x308>)
 800cdc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc8:	4604      	mov	r4, r0
 800cdca:	460d      	mov	r5, r1
 800cdcc:	4630      	mov	r0, r6
 800cdce:	4639      	mov	r1, r7
 800cdd0:	f7f3 fc32 	bl	8000638 <__aeabi_dmul>
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	460b      	mov	r3, r1
 800cdd8:	4620      	mov	r0, r4
 800cdda:	4629      	mov	r1, r5
 800cddc:	e7ba      	b.n	800cd54 <__ieee754_log+0x5c>
 800cdde:	a38a      	add	r3, pc, #552	; (adr r3, 800d008 <__ieee754_log+0x310>)
 800cde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde4:	4650      	mov	r0, sl
 800cde6:	4659      	mov	r1, fp
 800cde8:	f7f3 fc26 	bl	8000638 <__aeabi_dmul>
 800cdec:	4602      	mov	r2, r0
 800cdee:	460b      	mov	r3, r1
 800cdf0:	2000      	movs	r0, #0
 800cdf2:	4999      	ldr	r1, [pc, #612]	; (800d058 <__ieee754_log+0x360>)
 800cdf4:	f7f3 fa68 	bl	80002c8 <__aeabi_dsub>
 800cdf8:	4652      	mov	r2, sl
 800cdfa:	4606      	mov	r6, r0
 800cdfc:	460f      	mov	r7, r1
 800cdfe:	465b      	mov	r3, fp
 800ce00:	4650      	mov	r0, sl
 800ce02:	4659      	mov	r1, fp
 800ce04:	f7f3 fc18 	bl	8000638 <__aeabi_dmul>
 800ce08:	4602      	mov	r2, r0
 800ce0a:	460b      	mov	r3, r1
 800ce0c:	4630      	mov	r0, r6
 800ce0e:	4639      	mov	r1, r7
 800ce10:	f7f3 fc12 	bl	8000638 <__aeabi_dmul>
 800ce14:	4606      	mov	r6, r0
 800ce16:	460f      	mov	r7, r1
 800ce18:	b914      	cbnz	r4, 800ce20 <__ieee754_log+0x128>
 800ce1a:	4632      	mov	r2, r6
 800ce1c:	463b      	mov	r3, r7
 800ce1e:	e0a0      	b.n	800cf62 <__ieee754_log+0x26a>
 800ce20:	4620      	mov	r0, r4
 800ce22:	f7f3 fb9f 	bl	8000564 <__aeabi_i2d>
 800ce26:	a374      	add	r3, pc, #464	; (adr r3, 800cff8 <__ieee754_log+0x300>)
 800ce28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce2c:	4680      	mov	r8, r0
 800ce2e:	4689      	mov	r9, r1
 800ce30:	f7f3 fc02 	bl	8000638 <__aeabi_dmul>
 800ce34:	a372      	add	r3, pc, #456	; (adr r3, 800d000 <__ieee754_log+0x308>)
 800ce36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce3a:	4604      	mov	r4, r0
 800ce3c:	460d      	mov	r5, r1
 800ce3e:	4640      	mov	r0, r8
 800ce40:	4649      	mov	r1, r9
 800ce42:	f7f3 fbf9 	bl	8000638 <__aeabi_dmul>
 800ce46:	e0a5      	b.n	800cf94 <__ieee754_log+0x29c>
 800ce48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ce4c:	f7f3 fa3e 	bl	80002cc <__adddf3>
 800ce50:	4602      	mov	r2, r0
 800ce52:	460b      	mov	r3, r1
 800ce54:	4650      	mov	r0, sl
 800ce56:	4659      	mov	r1, fp
 800ce58:	f7f3 fd18 	bl	800088c <__aeabi_ddiv>
 800ce5c:	e9cd 0100 	strd	r0, r1, [sp]
 800ce60:	4620      	mov	r0, r4
 800ce62:	f7f3 fb7f 	bl	8000564 <__aeabi_i2d>
 800ce66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce6e:	4610      	mov	r0, r2
 800ce70:	4619      	mov	r1, r3
 800ce72:	f7f3 fbe1 	bl	8000638 <__aeabi_dmul>
 800ce76:	4602      	mov	r2, r0
 800ce78:	460b      	mov	r3, r1
 800ce7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ce7e:	f7f3 fbdb 	bl	8000638 <__aeabi_dmul>
 800ce82:	a363      	add	r3, pc, #396	; (adr r3, 800d010 <__ieee754_log+0x318>)
 800ce84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce88:	4680      	mov	r8, r0
 800ce8a:	4689      	mov	r9, r1
 800ce8c:	f7f3 fbd4 	bl	8000638 <__aeabi_dmul>
 800ce90:	a361      	add	r3, pc, #388	; (adr r3, 800d018 <__ieee754_log+0x320>)
 800ce92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce96:	f7f3 fa19 	bl	80002cc <__adddf3>
 800ce9a:	4642      	mov	r2, r8
 800ce9c:	464b      	mov	r3, r9
 800ce9e:	f7f3 fbcb 	bl	8000638 <__aeabi_dmul>
 800cea2:	a35f      	add	r3, pc, #380	; (adr r3, 800d020 <__ieee754_log+0x328>)
 800cea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea8:	f7f3 fa10 	bl	80002cc <__adddf3>
 800ceac:	4642      	mov	r2, r8
 800ceae:	464b      	mov	r3, r9
 800ceb0:	f7f3 fbc2 	bl	8000638 <__aeabi_dmul>
 800ceb4:	a35c      	add	r3, pc, #368	; (adr r3, 800d028 <__ieee754_log+0x330>)
 800ceb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceba:	f7f3 fa07 	bl	80002cc <__adddf3>
 800cebe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cec2:	f7f3 fbb9 	bl	8000638 <__aeabi_dmul>
 800cec6:	a35a      	add	r3, pc, #360	; (adr r3, 800d030 <__ieee754_log+0x338>)
 800cec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cecc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ced0:	4640      	mov	r0, r8
 800ced2:	4649      	mov	r1, r9
 800ced4:	f7f3 fbb0 	bl	8000638 <__aeabi_dmul>
 800ced8:	a357      	add	r3, pc, #348	; (adr r3, 800d038 <__ieee754_log+0x340>)
 800ceda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cede:	f7f3 f9f5 	bl	80002cc <__adddf3>
 800cee2:	4642      	mov	r2, r8
 800cee4:	464b      	mov	r3, r9
 800cee6:	f7f3 fba7 	bl	8000638 <__aeabi_dmul>
 800ceea:	a355      	add	r3, pc, #340	; (adr r3, 800d040 <__ieee754_log+0x348>)
 800ceec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef0:	f7f3 f9ec 	bl	80002cc <__adddf3>
 800cef4:	4642      	mov	r2, r8
 800cef6:	464b      	mov	r3, r9
 800cef8:	f7f3 fb9e 	bl	8000638 <__aeabi_dmul>
 800cefc:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800cf00:	4602      	mov	r2, r0
 800cf02:	460b      	mov	r3, r1
 800cf04:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800cf08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cf0c:	f7f3 f9de 	bl	80002cc <__adddf3>
 800cf10:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800cf14:	3551      	adds	r5, #81	; 0x51
 800cf16:	4335      	orrs	r5, r6
 800cf18:	2d00      	cmp	r5, #0
 800cf1a:	4680      	mov	r8, r0
 800cf1c:	4689      	mov	r9, r1
 800cf1e:	dd48      	ble.n	800cfb2 <__ieee754_log+0x2ba>
 800cf20:	2200      	movs	r2, #0
 800cf22:	4b4d      	ldr	r3, [pc, #308]	; (800d058 <__ieee754_log+0x360>)
 800cf24:	4650      	mov	r0, sl
 800cf26:	4659      	mov	r1, fp
 800cf28:	f7f3 fb86 	bl	8000638 <__aeabi_dmul>
 800cf2c:	4652      	mov	r2, sl
 800cf2e:	465b      	mov	r3, fp
 800cf30:	f7f3 fb82 	bl	8000638 <__aeabi_dmul>
 800cf34:	4602      	mov	r2, r0
 800cf36:	460b      	mov	r3, r1
 800cf38:	4606      	mov	r6, r0
 800cf3a:	460f      	mov	r7, r1
 800cf3c:	4640      	mov	r0, r8
 800cf3e:	4649      	mov	r1, r9
 800cf40:	f7f3 f9c4 	bl	80002cc <__adddf3>
 800cf44:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf48:	f7f3 fb76 	bl	8000638 <__aeabi_dmul>
 800cf4c:	4680      	mov	r8, r0
 800cf4e:	4689      	mov	r9, r1
 800cf50:	b964      	cbnz	r4, 800cf6c <__ieee754_log+0x274>
 800cf52:	4602      	mov	r2, r0
 800cf54:	460b      	mov	r3, r1
 800cf56:	4630      	mov	r0, r6
 800cf58:	4639      	mov	r1, r7
 800cf5a:	f7f3 f9b5 	bl	80002c8 <__aeabi_dsub>
 800cf5e:	4602      	mov	r2, r0
 800cf60:	460b      	mov	r3, r1
 800cf62:	4650      	mov	r0, sl
 800cf64:	4659      	mov	r1, fp
 800cf66:	f7f3 f9af 	bl	80002c8 <__aeabi_dsub>
 800cf6a:	e6da      	b.n	800cd22 <__ieee754_log+0x2a>
 800cf6c:	a322      	add	r3, pc, #136	; (adr r3, 800cff8 <__ieee754_log+0x300>)
 800cf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf76:	f7f3 fb5f 	bl	8000638 <__aeabi_dmul>
 800cf7a:	a321      	add	r3, pc, #132	; (adr r3, 800d000 <__ieee754_log+0x308>)
 800cf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf80:	4604      	mov	r4, r0
 800cf82:	460d      	mov	r5, r1
 800cf84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf88:	f7f3 fb56 	bl	8000638 <__aeabi_dmul>
 800cf8c:	4642      	mov	r2, r8
 800cf8e:	464b      	mov	r3, r9
 800cf90:	f7f3 f99c 	bl	80002cc <__adddf3>
 800cf94:	4602      	mov	r2, r0
 800cf96:	460b      	mov	r3, r1
 800cf98:	4630      	mov	r0, r6
 800cf9a:	4639      	mov	r1, r7
 800cf9c:	f7f3 f994 	bl	80002c8 <__aeabi_dsub>
 800cfa0:	4652      	mov	r2, sl
 800cfa2:	465b      	mov	r3, fp
 800cfa4:	f7f3 f990 	bl	80002c8 <__aeabi_dsub>
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	460b      	mov	r3, r1
 800cfac:	4620      	mov	r0, r4
 800cfae:	4629      	mov	r1, r5
 800cfb0:	e7d9      	b.n	800cf66 <__ieee754_log+0x26e>
 800cfb2:	4602      	mov	r2, r0
 800cfb4:	460b      	mov	r3, r1
 800cfb6:	4650      	mov	r0, sl
 800cfb8:	4659      	mov	r1, fp
 800cfba:	f7f3 f985 	bl	80002c8 <__aeabi_dsub>
 800cfbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfc2:	f7f3 fb39 	bl	8000638 <__aeabi_dmul>
 800cfc6:	4606      	mov	r6, r0
 800cfc8:	460f      	mov	r7, r1
 800cfca:	2c00      	cmp	r4, #0
 800cfcc:	f43f af25 	beq.w	800ce1a <__ieee754_log+0x122>
 800cfd0:	a309      	add	r3, pc, #36	; (adr r3, 800cff8 <__ieee754_log+0x300>)
 800cfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfda:	f7f3 fb2d 	bl	8000638 <__aeabi_dmul>
 800cfde:	a308      	add	r3, pc, #32	; (adr r3, 800d000 <__ieee754_log+0x308>)
 800cfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe4:	4604      	mov	r4, r0
 800cfe6:	460d      	mov	r5, r1
 800cfe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfec:	e729      	b.n	800ce42 <__ieee754_log+0x14a>
 800cfee:	2000      	movs	r0, #0
 800cff0:	2100      	movs	r1, #0
 800cff2:	e696      	b.n	800cd22 <__ieee754_log+0x2a>
 800cff4:	f3af 8000 	nop.w
 800cff8:	fee00000 	.word	0xfee00000
 800cffc:	3fe62e42 	.word	0x3fe62e42
 800d000:	35793c76 	.word	0x35793c76
 800d004:	3dea39ef 	.word	0x3dea39ef
 800d008:	55555555 	.word	0x55555555
 800d00c:	3fd55555 	.word	0x3fd55555
 800d010:	df3e5244 	.word	0xdf3e5244
 800d014:	3fc2f112 	.word	0x3fc2f112
 800d018:	96cb03de 	.word	0x96cb03de
 800d01c:	3fc74664 	.word	0x3fc74664
 800d020:	94229359 	.word	0x94229359
 800d024:	3fd24924 	.word	0x3fd24924
 800d028:	55555593 	.word	0x55555593
 800d02c:	3fe55555 	.word	0x3fe55555
 800d030:	d078c69f 	.word	0xd078c69f
 800d034:	3fc39a09 	.word	0x3fc39a09
 800d038:	1d8e78af 	.word	0x1d8e78af
 800d03c:	3fcc71c5 	.word	0x3fcc71c5
 800d040:	9997fa04 	.word	0x9997fa04
 800d044:	3fd99999 	.word	0x3fd99999
 800d048:	c3500000 	.word	0xc3500000
 800d04c:	43500000 	.word	0x43500000
 800d050:	7fefffff 	.word	0x7fefffff
 800d054:	3ff00000 	.word	0x3ff00000
 800d058:	3fe00000 	.word	0x3fe00000

0800d05c <__ieee754_rem_pio2f>:
 800d05c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d05e:	ee10 6a10 	vmov	r6, s0
 800d062:	4b86      	ldr	r3, [pc, #536]	; (800d27c <__ieee754_rem_pio2f+0x220>)
 800d064:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800d068:	429c      	cmp	r4, r3
 800d06a:	b087      	sub	sp, #28
 800d06c:	4605      	mov	r5, r0
 800d06e:	dc05      	bgt.n	800d07c <__ieee754_rem_pio2f+0x20>
 800d070:	2300      	movs	r3, #0
 800d072:	ed85 0a00 	vstr	s0, [r5]
 800d076:	6043      	str	r3, [r0, #4]
 800d078:	2000      	movs	r0, #0
 800d07a:	e020      	b.n	800d0be <__ieee754_rem_pio2f+0x62>
 800d07c:	4b80      	ldr	r3, [pc, #512]	; (800d280 <__ieee754_rem_pio2f+0x224>)
 800d07e:	429c      	cmp	r4, r3
 800d080:	dc38      	bgt.n	800d0f4 <__ieee754_rem_pio2f+0x98>
 800d082:	2e00      	cmp	r6, #0
 800d084:	f024 040f 	bic.w	r4, r4, #15
 800d088:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800d284 <__ieee754_rem_pio2f+0x228>
 800d08c:	4b7e      	ldr	r3, [pc, #504]	; (800d288 <__ieee754_rem_pio2f+0x22c>)
 800d08e:	dd18      	ble.n	800d0c2 <__ieee754_rem_pio2f+0x66>
 800d090:	429c      	cmp	r4, r3
 800d092:	ee70 7a47 	vsub.f32	s15, s0, s14
 800d096:	bf09      	itett	eq
 800d098:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800d28c <__ieee754_rem_pio2f+0x230>
 800d09c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800d290 <__ieee754_rem_pio2f+0x234>
 800d0a0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800d0a4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800d294 <__ieee754_rem_pio2f+0x238>
 800d0a8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800d0ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d0b0:	edc0 6a00 	vstr	s13, [r0]
 800d0b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d0b8:	edc0 7a01 	vstr	s15, [r0, #4]
 800d0bc:	2001      	movs	r0, #1
 800d0be:	b007      	add	sp, #28
 800d0c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0c2:	429c      	cmp	r4, r3
 800d0c4:	ee70 7a07 	vadd.f32	s15, s0, s14
 800d0c8:	bf09      	itett	eq
 800d0ca:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800d28c <__ieee754_rem_pio2f+0x230>
 800d0ce:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800d290 <__ieee754_rem_pio2f+0x234>
 800d0d2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800d0d6:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800d294 <__ieee754_rem_pio2f+0x238>
 800d0da:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d0de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d0e2:	edc0 6a00 	vstr	s13, [r0]
 800d0e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d0ea:	edc0 7a01 	vstr	s15, [r0, #4]
 800d0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d0f2:	e7e4      	b.n	800d0be <__ieee754_rem_pio2f+0x62>
 800d0f4:	4b68      	ldr	r3, [pc, #416]	; (800d298 <__ieee754_rem_pio2f+0x23c>)
 800d0f6:	429c      	cmp	r4, r3
 800d0f8:	dc71      	bgt.n	800d1de <__ieee754_rem_pio2f+0x182>
 800d0fa:	f000 fc11 	bl	800d920 <fabsf>
 800d0fe:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800d29c <__ieee754_rem_pio2f+0x240>
 800d102:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d106:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d10a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d10e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800d112:	ee17 0a90 	vmov	r0, s15
 800d116:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800d284 <__ieee754_rem_pio2f+0x228>
 800d11a:	eeb1 7a46 	vneg.f32	s14, s12
 800d11e:	eea7 0a27 	vfma.f32	s0, s14, s15
 800d122:	281f      	cmp	r0, #31
 800d124:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800d290 <__ieee754_rem_pio2f+0x234>
 800d128:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d12c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d130:	ee16 3a90 	vmov	r3, s13
 800d134:	dc1c      	bgt.n	800d170 <__ieee754_rem_pio2f+0x114>
 800d136:	1e47      	subs	r7, r0, #1
 800d138:	4959      	ldr	r1, [pc, #356]	; (800d2a0 <__ieee754_rem_pio2f+0x244>)
 800d13a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800d13e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800d142:	428a      	cmp	r2, r1
 800d144:	d014      	beq.n	800d170 <__ieee754_rem_pio2f+0x114>
 800d146:	602b      	str	r3, [r5, #0]
 800d148:	ed95 7a00 	vldr	s14, [r5]
 800d14c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d150:	2e00      	cmp	r6, #0
 800d152:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d156:	ed85 0a01 	vstr	s0, [r5, #4]
 800d15a:	dab0      	bge.n	800d0be <__ieee754_rem_pio2f+0x62>
 800d15c:	eeb1 7a47 	vneg.f32	s14, s14
 800d160:	eeb1 0a40 	vneg.f32	s0, s0
 800d164:	ed85 7a00 	vstr	s14, [r5]
 800d168:	ed85 0a01 	vstr	s0, [r5, #4]
 800d16c:	4240      	negs	r0, r0
 800d16e:	e7a6      	b.n	800d0be <__ieee754_rem_pio2f+0x62>
 800d170:	15e4      	asrs	r4, r4, #23
 800d172:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d176:	1aa2      	subs	r2, r4, r2
 800d178:	2a08      	cmp	r2, #8
 800d17a:	dde4      	ble.n	800d146 <__ieee754_rem_pio2f+0xea>
 800d17c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800d28c <__ieee754_rem_pio2f+0x230>
 800d180:	eef0 6a40 	vmov.f32	s13, s0
 800d184:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d188:	ee30 0a66 	vsub.f32	s0, s0, s13
 800d18c:	eea7 0a27 	vfma.f32	s0, s14, s15
 800d190:	eddf 7a40 	vldr	s15, [pc, #256]	; 800d294 <__ieee754_rem_pio2f+0x238>
 800d194:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800d198:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800d19c:	eef0 7a40 	vmov.f32	s15, s0
 800d1a0:	ee15 3a90 	vmov	r3, s11
 800d1a4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d1a8:	1aa4      	subs	r4, r4, r2
 800d1aa:	2c19      	cmp	r4, #25
 800d1ac:	dc04      	bgt.n	800d1b8 <__ieee754_rem_pio2f+0x15c>
 800d1ae:	edc5 5a00 	vstr	s11, [r5]
 800d1b2:	eeb0 0a66 	vmov.f32	s0, s13
 800d1b6:	e7c7      	b.n	800d148 <__ieee754_rem_pio2f+0xec>
 800d1b8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800d2a4 <__ieee754_rem_pio2f+0x248>
 800d1bc:	eeb0 0a66 	vmov.f32	s0, s13
 800d1c0:	eea7 0a25 	vfma.f32	s0, s14, s11
 800d1c4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d1c8:	eee7 7a25 	vfma.f32	s15, s14, s11
 800d1cc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800d2a8 <__ieee754_rem_pio2f+0x24c>
 800d1d0:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800d1d4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d1d8:	ed85 7a00 	vstr	s14, [r5]
 800d1dc:	e7b4      	b.n	800d148 <__ieee754_rem_pio2f+0xec>
 800d1de:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800d1e2:	db06      	blt.n	800d1f2 <__ieee754_rem_pio2f+0x196>
 800d1e4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d1e8:	edc0 7a01 	vstr	s15, [r0, #4]
 800d1ec:	edc0 7a00 	vstr	s15, [r0]
 800d1f0:	e742      	b.n	800d078 <__ieee754_rem_pio2f+0x1c>
 800d1f2:	15e2      	asrs	r2, r4, #23
 800d1f4:	3a86      	subs	r2, #134	; 0x86
 800d1f6:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800d1fa:	ee07 3a90 	vmov	s15, r3
 800d1fe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d202:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800d2ac <__ieee754_rem_pio2f+0x250>
 800d206:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d20a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d20e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d212:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d216:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d21a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d21e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d222:	ed8d 7a04 	vstr	s14, [sp, #16]
 800d226:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d22a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d22e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d232:	edcd 7a05 	vstr	s15, [sp, #20]
 800d236:	d11e      	bne.n	800d276 <__ieee754_rem_pio2f+0x21a>
 800d238:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d23c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d240:	bf0c      	ite	eq
 800d242:	2301      	moveq	r3, #1
 800d244:	2302      	movne	r3, #2
 800d246:	491a      	ldr	r1, [pc, #104]	; (800d2b0 <__ieee754_rem_pio2f+0x254>)
 800d248:	9101      	str	r1, [sp, #4]
 800d24a:	2102      	movs	r1, #2
 800d24c:	9100      	str	r1, [sp, #0]
 800d24e:	a803      	add	r0, sp, #12
 800d250:	4629      	mov	r1, r5
 800d252:	f000 f891 	bl	800d378 <__kernel_rem_pio2f>
 800d256:	2e00      	cmp	r6, #0
 800d258:	f6bf af31 	bge.w	800d0be <__ieee754_rem_pio2f+0x62>
 800d25c:	edd5 7a00 	vldr	s15, [r5]
 800d260:	eef1 7a67 	vneg.f32	s15, s15
 800d264:	edc5 7a00 	vstr	s15, [r5]
 800d268:	edd5 7a01 	vldr	s15, [r5, #4]
 800d26c:	eef1 7a67 	vneg.f32	s15, s15
 800d270:	edc5 7a01 	vstr	s15, [r5, #4]
 800d274:	e77a      	b.n	800d16c <__ieee754_rem_pio2f+0x110>
 800d276:	2303      	movs	r3, #3
 800d278:	e7e5      	b.n	800d246 <__ieee754_rem_pio2f+0x1ea>
 800d27a:	bf00      	nop
 800d27c:	3f490fd8 	.word	0x3f490fd8
 800d280:	4016cbe3 	.word	0x4016cbe3
 800d284:	3fc90f80 	.word	0x3fc90f80
 800d288:	3fc90fd0 	.word	0x3fc90fd0
 800d28c:	37354400 	.word	0x37354400
 800d290:	37354443 	.word	0x37354443
 800d294:	2e85a308 	.word	0x2e85a308
 800d298:	43490f80 	.word	0x43490f80
 800d29c:	3f22f984 	.word	0x3f22f984
 800d2a0:	08020fc0 	.word	0x08020fc0
 800d2a4:	2e85a300 	.word	0x2e85a300
 800d2a8:	248d3132 	.word	0x248d3132
 800d2ac:	43800000 	.word	0x43800000
 800d2b0:	08021040 	.word	0x08021040

0800d2b4 <__ieee754_sqrtf>:
 800d2b4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d2b8:	4770      	bx	lr
	...

0800d2bc <__kernel_cosf>:
 800d2bc:	ee10 3a10 	vmov	r3, s0
 800d2c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d2c4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800d2c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2cc:	da05      	bge.n	800d2da <__kernel_cosf+0x1e>
 800d2ce:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d2d2:	ee17 2a90 	vmov	r2, s15
 800d2d6:	2a00      	cmp	r2, #0
 800d2d8:	d03b      	beq.n	800d352 <__kernel_cosf+0x96>
 800d2da:	ee20 6a00 	vmul.f32	s12, s0, s0
 800d2de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d2e2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800d358 <__kernel_cosf+0x9c>
 800d2e6:	4a1d      	ldr	r2, [pc, #116]	; (800d35c <__kernel_cosf+0xa0>)
 800d2e8:	ee66 7a07 	vmul.f32	s15, s12, s14
 800d2ec:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800d360 <__kernel_cosf+0xa4>
 800d2f0:	eea6 7a25 	vfma.f32	s14, s12, s11
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800d364 <__kernel_cosf+0xa8>
 800d2fa:	eee7 5a06 	vfma.f32	s11, s14, s12
 800d2fe:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800d368 <__kernel_cosf+0xac>
 800d302:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d306:	eddf 5a19 	vldr	s11, [pc, #100]	; 800d36c <__kernel_cosf+0xb0>
 800d30a:	eee7 5a06 	vfma.f32	s11, s14, s12
 800d30e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800d370 <__kernel_cosf+0xb4>
 800d312:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d316:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800d31a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800d31e:	eee6 0a07 	vfma.f32	s1, s12, s14
 800d322:	dc04      	bgt.n	800d32e <__kernel_cosf+0x72>
 800d324:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800d328:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800d32c:	4770      	bx	lr
 800d32e:	4a11      	ldr	r2, [pc, #68]	; (800d374 <__kernel_cosf+0xb8>)
 800d330:	4293      	cmp	r3, r2
 800d332:	bfda      	itte	le
 800d334:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800d338:	ee07 3a10 	vmovle	s14, r3
 800d33c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800d340:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d344:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800d348:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d34c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d350:	4770      	bx	lr
 800d352:	eeb0 0a66 	vmov.f32	s0, s13
 800d356:	4770      	bx	lr
 800d358:	ad47d74e 	.word	0xad47d74e
 800d35c:	3e999999 	.word	0x3e999999
 800d360:	310f74f6 	.word	0x310f74f6
 800d364:	b493f27c 	.word	0xb493f27c
 800d368:	37d00d01 	.word	0x37d00d01
 800d36c:	bab60b61 	.word	0xbab60b61
 800d370:	3d2aaaab 	.word	0x3d2aaaab
 800d374:	3f480000 	.word	0x3f480000

0800d378 <__kernel_rem_pio2f>:
 800d378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d37c:	ed2d 8b04 	vpush	{d8-d9}
 800d380:	b0d7      	sub	sp, #348	; 0x15c
 800d382:	469b      	mov	fp, r3
 800d384:	460e      	mov	r6, r1
 800d386:	4bbe      	ldr	r3, [pc, #760]	; (800d680 <__kernel_rem_pio2f+0x308>)
 800d388:	9964      	ldr	r1, [sp, #400]	; 0x190
 800d38a:	9002      	str	r0, [sp, #8]
 800d38c:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800d390:	9865      	ldr	r0, [sp, #404]	; 0x194
 800d392:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800d690 <__kernel_rem_pio2f+0x318>
 800d396:	1ed1      	subs	r1, r2, #3
 800d398:	2308      	movs	r3, #8
 800d39a:	fb91 f1f3 	sdiv	r1, r1, r3
 800d39e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800d3a2:	f10b 3aff 	add.w	sl, fp, #4294967295
 800d3a6:	1c4c      	adds	r4, r1, #1
 800d3a8:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800d3ac:	eba1 050a 	sub.w	r5, r1, sl
 800d3b0:	aa1a      	add	r2, sp, #104	; 0x68
 800d3b2:	eb09 070a 	add.w	r7, r9, sl
 800d3b6:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800d3ba:	4696      	mov	lr, r2
 800d3bc:	2300      	movs	r3, #0
 800d3be:	42bb      	cmp	r3, r7
 800d3c0:	dd0f      	ble.n	800d3e2 <__kernel_rem_pio2f+0x6a>
 800d3c2:	af42      	add	r7, sp, #264	; 0x108
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	454a      	cmp	r2, r9
 800d3c8:	dc27      	bgt.n	800d41a <__kernel_rem_pio2f+0xa2>
 800d3ca:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800d3ce:	eb0b 0302 	add.w	r3, fp, r2
 800d3d2:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800d3d6:	9d02      	ldr	r5, [sp, #8]
 800d3d8:	eddf 7aad 	vldr	s15, [pc, #692]	; 800d690 <__kernel_rem_pio2f+0x318>
 800d3dc:	f04f 0c00 	mov.w	ip, #0
 800d3e0:	e015      	b.n	800d40e <__kernel_rem_pio2f+0x96>
 800d3e2:	42dd      	cmn	r5, r3
 800d3e4:	bf5d      	ittte	pl
 800d3e6:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800d3ea:	ee07 2a90 	vmovpl	s15, r2
 800d3ee:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d3f2:	eef0 7a47 	vmovmi.f32	s15, s14
 800d3f6:	ecee 7a01 	vstmia	lr!, {s15}
 800d3fa:	3301      	adds	r3, #1
 800d3fc:	e7df      	b.n	800d3be <__kernel_rem_pio2f+0x46>
 800d3fe:	ecf5 6a01 	vldmia	r5!, {s13}
 800d402:	ed33 7a01 	vldmdb	r3!, {s14}
 800d406:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d40a:	f10c 0c01 	add.w	ip, ip, #1
 800d40e:	45d4      	cmp	ip, sl
 800d410:	ddf5      	ble.n	800d3fe <__kernel_rem_pio2f+0x86>
 800d412:	ece7 7a01 	vstmia	r7!, {s15}
 800d416:	3201      	adds	r2, #1
 800d418:	e7d5      	b.n	800d3c6 <__kernel_rem_pio2f+0x4e>
 800d41a:	ab06      	add	r3, sp, #24
 800d41c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800d420:	9304      	str	r3, [sp, #16]
 800d422:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800d68c <__kernel_rem_pio2f+0x314>
 800d426:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800d688 <__kernel_rem_pio2f+0x310>
 800d42a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800d42e:	9303      	str	r3, [sp, #12]
 800d430:	464d      	mov	r5, r9
 800d432:	ab56      	add	r3, sp, #344	; 0x158
 800d434:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800d438:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800d43c:	3f01      	subs	r7, #1
 800d43e:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800d442:	00bf      	lsls	r7, r7, #2
 800d444:	ab56      	add	r3, sp, #344	; 0x158
 800d446:	19da      	adds	r2, r3, r7
 800d448:	3a4c      	subs	r2, #76	; 0x4c
 800d44a:	2300      	movs	r3, #0
 800d44c:	1ae9      	subs	r1, r5, r3
 800d44e:	2900      	cmp	r1, #0
 800d450:	dc4c      	bgt.n	800d4ec <__kernel_rem_pio2f+0x174>
 800d452:	4620      	mov	r0, r4
 800d454:	f000 faae 	bl	800d9b4 <scalbnf>
 800d458:	eeb0 8a40 	vmov.f32	s16, s0
 800d45c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800d460:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d464:	f000 fa64 	bl	800d930 <floorf>
 800d468:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800d46c:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d470:	2c00      	cmp	r4, #0
 800d472:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d476:	edcd 7a01 	vstr	s15, [sp, #4]
 800d47a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d47e:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d482:	dd48      	ble.n	800d516 <__kernel_rem_pio2f+0x19e>
 800d484:	1e69      	subs	r1, r5, #1
 800d486:	ab06      	add	r3, sp, #24
 800d488:	f1c4 0008 	rsb	r0, r4, #8
 800d48c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800d490:	9a01      	ldr	r2, [sp, #4]
 800d492:	fa4c f300 	asr.w	r3, ip, r0
 800d496:	441a      	add	r2, r3
 800d498:	4083      	lsls	r3, r0
 800d49a:	9201      	str	r2, [sp, #4]
 800d49c:	ebac 0203 	sub.w	r2, ip, r3
 800d4a0:	ab06      	add	r3, sp, #24
 800d4a2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800d4a6:	f1c4 0307 	rsb	r3, r4, #7
 800d4aa:	fa42 f803 	asr.w	r8, r2, r3
 800d4ae:	f1b8 0f00 	cmp.w	r8, #0
 800d4b2:	dd41      	ble.n	800d538 <__kernel_rem_pio2f+0x1c0>
 800d4b4:	9b01      	ldr	r3, [sp, #4]
 800d4b6:	2000      	movs	r0, #0
 800d4b8:	3301      	adds	r3, #1
 800d4ba:	9301      	str	r3, [sp, #4]
 800d4bc:	4601      	mov	r1, r0
 800d4be:	4285      	cmp	r5, r0
 800d4c0:	dc6d      	bgt.n	800d59e <__kernel_rem_pio2f+0x226>
 800d4c2:	2c00      	cmp	r4, #0
 800d4c4:	dd04      	ble.n	800d4d0 <__kernel_rem_pio2f+0x158>
 800d4c6:	2c01      	cmp	r4, #1
 800d4c8:	d07e      	beq.n	800d5c8 <__kernel_rem_pio2f+0x250>
 800d4ca:	2c02      	cmp	r4, #2
 800d4cc:	f000 8086 	beq.w	800d5dc <__kernel_rem_pio2f+0x264>
 800d4d0:	f1b8 0f02 	cmp.w	r8, #2
 800d4d4:	d130      	bne.n	800d538 <__kernel_rem_pio2f+0x1c0>
 800d4d6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d4da:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d4de:	b359      	cbz	r1, 800d538 <__kernel_rem_pio2f+0x1c0>
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	f000 fa67 	bl	800d9b4 <scalbnf>
 800d4e6:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d4ea:	e025      	b.n	800d538 <__kernel_rem_pio2f+0x1c0>
 800d4ec:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d4f0:	a806      	add	r0, sp, #24
 800d4f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d4f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d4fa:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d4fe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d502:	ee10 1a10 	vmov	r1, s0
 800d506:	ed32 0a01 	vldmdb	r2!, {s0}
 800d50a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800d50e:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d512:	3301      	adds	r3, #1
 800d514:	e79a      	b.n	800d44c <__kernel_rem_pio2f+0xd4>
 800d516:	d106      	bne.n	800d526 <__kernel_rem_pio2f+0x1ae>
 800d518:	1e6b      	subs	r3, r5, #1
 800d51a:	aa06      	add	r2, sp, #24
 800d51c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d520:	ea4f 2822 	mov.w	r8, r2, asr #8
 800d524:	e7c3      	b.n	800d4ae <__kernel_rem_pio2f+0x136>
 800d526:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d52a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d52e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d532:	da31      	bge.n	800d598 <__kernel_rem_pio2f+0x220>
 800d534:	f04f 0800 	mov.w	r8, #0
 800d538:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d53c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d540:	f040 80a8 	bne.w	800d694 <__kernel_rem_pio2f+0x31c>
 800d544:	1e6b      	subs	r3, r5, #1
 800d546:	4618      	mov	r0, r3
 800d548:	2200      	movs	r2, #0
 800d54a:	4548      	cmp	r0, r9
 800d54c:	da4d      	bge.n	800d5ea <__kernel_rem_pio2f+0x272>
 800d54e:	2a00      	cmp	r2, #0
 800d550:	f000 8087 	beq.w	800d662 <__kernel_rem_pio2f+0x2ea>
 800d554:	aa06      	add	r2, sp, #24
 800d556:	3c08      	subs	r4, #8
 800d558:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d55c:	2900      	cmp	r1, #0
 800d55e:	f000 808d 	beq.w	800d67c <__kernel_rem_pio2f+0x304>
 800d562:	4620      	mov	r0, r4
 800d564:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d568:	9302      	str	r3, [sp, #8]
 800d56a:	f000 fa23 	bl	800d9b4 <scalbnf>
 800d56e:	9b02      	ldr	r3, [sp, #8]
 800d570:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800d68c <__kernel_rem_pio2f+0x314>
 800d574:	0099      	lsls	r1, r3, #2
 800d576:	aa42      	add	r2, sp, #264	; 0x108
 800d578:	1850      	adds	r0, r2, r1
 800d57a:	1d05      	adds	r5, r0, #4
 800d57c:	461c      	mov	r4, r3
 800d57e:	2c00      	cmp	r4, #0
 800d580:	f280 80b8 	bge.w	800d6f4 <__kernel_rem_pio2f+0x37c>
 800d584:	2500      	movs	r5, #0
 800d586:	1b5c      	subs	r4, r3, r5
 800d588:	2c00      	cmp	r4, #0
 800d58a:	f2c0 80d8 	blt.w	800d73e <__kernel_rem_pio2f+0x3c6>
 800d58e:	4f3d      	ldr	r7, [pc, #244]	; (800d684 <__kernel_rem_pio2f+0x30c>)
 800d590:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800d690 <__kernel_rem_pio2f+0x318>
 800d594:	2400      	movs	r4, #0
 800d596:	e0c6      	b.n	800d726 <__kernel_rem_pio2f+0x3ae>
 800d598:	f04f 0802 	mov.w	r8, #2
 800d59c:	e78a      	b.n	800d4b4 <__kernel_rem_pio2f+0x13c>
 800d59e:	ab06      	add	r3, sp, #24
 800d5a0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d5a4:	b949      	cbnz	r1, 800d5ba <__kernel_rem_pio2f+0x242>
 800d5a6:	b12b      	cbz	r3, 800d5b4 <__kernel_rem_pio2f+0x23c>
 800d5a8:	aa06      	add	r2, sp, #24
 800d5aa:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800d5ae:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	3001      	adds	r0, #1
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	e781      	b.n	800d4be <__kernel_rem_pio2f+0x146>
 800d5ba:	aa06      	add	r2, sp, #24
 800d5bc:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800d5c0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d5c4:	460b      	mov	r3, r1
 800d5c6:	e7f5      	b.n	800d5b4 <__kernel_rem_pio2f+0x23c>
 800d5c8:	1e68      	subs	r0, r5, #1
 800d5ca:	ab06      	add	r3, sp, #24
 800d5cc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d5d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5d4:	aa06      	add	r2, sp, #24
 800d5d6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d5da:	e779      	b.n	800d4d0 <__kernel_rem_pio2f+0x158>
 800d5dc:	1e68      	subs	r0, r5, #1
 800d5de:	ab06      	add	r3, sp, #24
 800d5e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d5e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d5e8:	e7f4      	b.n	800d5d4 <__kernel_rem_pio2f+0x25c>
 800d5ea:	a906      	add	r1, sp, #24
 800d5ec:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d5f0:	3801      	subs	r0, #1
 800d5f2:	430a      	orrs	r2, r1
 800d5f4:	e7a9      	b.n	800d54a <__kernel_rem_pio2f+0x1d2>
 800d5f6:	f10c 0c01 	add.w	ip, ip, #1
 800d5fa:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d5fe:	2a00      	cmp	r2, #0
 800d600:	d0f9      	beq.n	800d5f6 <__kernel_rem_pio2f+0x27e>
 800d602:	eb0b 0305 	add.w	r3, fp, r5
 800d606:	aa1a      	add	r2, sp, #104	; 0x68
 800d608:	009b      	lsls	r3, r3, #2
 800d60a:	1898      	adds	r0, r3, r2
 800d60c:	3004      	adds	r0, #4
 800d60e:	1c69      	adds	r1, r5, #1
 800d610:	3704      	adds	r7, #4
 800d612:	2200      	movs	r2, #0
 800d614:	4465      	add	r5, ip
 800d616:	9005      	str	r0, [sp, #20]
 800d618:	428d      	cmp	r5, r1
 800d61a:	f6ff af0a 	blt.w	800d432 <__kernel_rem_pio2f+0xba>
 800d61e:	a81a      	add	r0, sp, #104	; 0x68
 800d620:	eb02 0c03 	add.w	ip, r2, r3
 800d624:	4484      	add	ip, r0
 800d626:	9803      	ldr	r0, [sp, #12]
 800d628:	f8dd e008 	ldr.w	lr, [sp, #8]
 800d62c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800d630:	9001      	str	r0, [sp, #4]
 800d632:	ee07 0a90 	vmov	s15, r0
 800d636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d63a:	9805      	ldr	r0, [sp, #20]
 800d63c:	edcc 7a00 	vstr	s15, [ip]
 800d640:	eddf 7a13 	vldr	s15, [pc, #76]	; 800d690 <__kernel_rem_pio2f+0x318>
 800d644:	eb00 0802 	add.w	r8, r0, r2
 800d648:	f04f 0c00 	mov.w	ip, #0
 800d64c:	45d4      	cmp	ip, sl
 800d64e:	dd0c      	ble.n	800d66a <__kernel_rem_pio2f+0x2f2>
 800d650:	eb02 0c07 	add.w	ip, r2, r7
 800d654:	a842      	add	r0, sp, #264	; 0x108
 800d656:	4484      	add	ip, r0
 800d658:	edcc 7a01 	vstr	s15, [ip, #4]
 800d65c:	3101      	adds	r1, #1
 800d65e:	3204      	adds	r2, #4
 800d660:	e7da      	b.n	800d618 <__kernel_rem_pio2f+0x2a0>
 800d662:	9b04      	ldr	r3, [sp, #16]
 800d664:	f04f 0c01 	mov.w	ip, #1
 800d668:	e7c7      	b.n	800d5fa <__kernel_rem_pio2f+0x282>
 800d66a:	ecfe 6a01 	vldmia	lr!, {s13}
 800d66e:	ed38 7a01 	vldmdb	r8!, {s14}
 800d672:	f10c 0c01 	add.w	ip, ip, #1
 800d676:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d67a:	e7e7      	b.n	800d64c <__kernel_rem_pio2f+0x2d4>
 800d67c:	3b01      	subs	r3, #1
 800d67e:	e769      	b.n	800d554 <__kernel_rem_pio2f+0x1dc>
 800d680:	08021384 	.word	0x08021384
 800d684:	08021358 	.word	0x08021358
 800d688:	43800000 	.word	0x43800000
 800d68c:	3b800000 	.word	0x3b800000
 800d690:	00000000 	.word	0x00000000
 800d694:	4260      	negs	r0, r4
 800d696:	eeb0 0a48 	vmov.f32	s0, s16
 800d69a:	f000 f98b 	bl	800d9b4 <scalbnf>
 800d69e:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800d688 <__kernel_rem_pio2f+0x310>
 800d6a2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d6a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6aa:	db1a      	blt.n	800d6e2 <__kernel_rem_pio2f+0x36a>
 800d6ac:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800d68c <__kernel_rem_pio2f+0x314>
 800d6b0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d6b4:	aa06      	add	r2, sp, #24
 800d6b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6ba:	a906      	add	r1, sp, #24
 800d6bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d6c0:	3408      	adds	r4, #8
 800d6c2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d6c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6ca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d6ce:	ee10 3a10 	vmov	r3, s0
 800d6d2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800d6d6:	1c6b      	adds	r3, r5, #1
 800d6d8:	ee17 2a90 	vmov	r2, s15
 800d6dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d6e0:	e73f      	b.n	800d562 <__kernel_rem_pio2f+0x1ea>
 800d6e2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d6e6:	aa06      	add	r2, sp, #24
 800d6e8:	ee10 3a10 	vmov	r3, s0
 800d6ec:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800d6f0:	462b      	mov	r3, r5
 800d6f2:	e736      	b.n	800d562 <__kernel_rem_pio2f+0x1ea>
 800d6f4:	aa06      	add	r2, sp, #24
 800d6f6:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800d6fa:	9202      	str	r2, [sp, #8]
 800d6fc:	ee07 2a90 	vmov	s15, r2
 800d700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d704:	3c01      	subs	r4, #1
 800d706:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d70a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d70e:	ed65 7a01 	vstmdb	r5!, {s15}
 800d712:	e734      	b.n	800d57e <__kernel_rem_pio2f+0x206>
 800d714:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800d718:	ecf7 6a01 	vldmia	r7!, {s13}
 800d71c:	ed9c 7a00 	vldr	s14, [ip]
 800d720:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d724:	3401      	adds	r4, #1
 800d726:	454c      	cmp	r4, r9
 800d728:	dc01      	bgt.n	800d72e <__kernel_rem_pio2f+0x3b6>
 800d72a:	42a5      	cmp	r5, r4
 800d72c:	daf2      	bge.n	800d714 <__kernel_rem_pio2f+0x39c>
 800d72e:	aa56      	add	r2, sp, #344	; 0x158
 800d730:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800d734:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800d738:	3501      	adds	r5, #1
 800d73a:	3804      	subs	r0, #4
 800d73c:	e723      	b.n	800d586 <__kernel_rem_pio2f+0x20e>
 800d73e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800d740:	2a03      	cmp	r2, #3
 800d742:	d84d      	bhi.n	800d7e0 <__kernel_rem_pio2f+0x468>
 800d744:	e8df f002 	tbb	[pc, r2]
 800d748:	021f1f3e 	.word	0x021f1f3e
 800d74c:	aa56      	add	r2, sp, #344	; 0x158
 800d74e:	4411      	add	r1, r2
 800d750:	399c      	subs	r1, #156	; 0x9c
 800d752:	4608      	mov	r0, r1
 800d754:	461c      	mov	r4, r3
 800d756:	2c00      	cmp	r4, #0
 800d758:	dc5f      	bgt.n	800d81a <__kernel_rem_pio2f+0x4a2>
 800d75a:	4608      	mov	r0, r1
 800d75c:	461c      	mov	r4, r3
 800d75e:	2c01      	cmp	r4, #1
 800d760:	dc6b      	bgt.n	800d83a <__kernel_rem_pio2f+0x4c2>
 800d762:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800d690 <__kernel_rem_pio2f+0x318>
 800d766:	2b01      	cmp	r3, #1
 800d768:	dc77      	bgt.n	800d85a <__kernel_rem_pio2f+0x4e2>
 800d76a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800d76e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800d772:	f1b8 0f00 	cmp.w	r8, #0
 800d776:	d176      	bne.n	800d866 <__kernel_rem_pio2f+0x4ee>
 800d778:	edc6 6a00 	vstr	s13, [r6]
 800d77c:	ed86 7a01 	vstr	s14, [r6, #4]
 800d780:	edc6 7a02 	vstr	s15, [r6, #8]
 800d784:	e02c      	b.n	800d7e0 <__kernel_rem_pio2f+0x468>
 800d786:	aa56      	add	r2, sp, #344	; 0x158
 800d788:	4411      	add	r1, r2
 800d78a:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800d690 <__kernel_rem_pio2f+0x318>
 800d78e:	399c      	subs	r1, #156	; 0x9c
 800d790:	4618      	mov	r0, r3
 800d792:	2800      	cmp	r0, #0
 800d794:	da32      	bge.n	800d7fc <__kernel_rem_pio2f+0x484>
 800d796:	f1b8 0f00 	cmp.w	r8, #0
 800d79a:	d035      	beq.n	800d808 <__kernel_rem_pio2f+0x490>
 800d79c:	eef1 7a47 	vneg.f32	s15, s14
 800d7a0:	edc6 7a00 	vstr	s15, [r6]
 800d7a4:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800d7a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d7ac:	a82f      	add	r0, sp, #188	; 0xbc
 800d7ae:	2101      	movs	r1, #1
 800d7b0:	428b      	cmp	r3, r1
 800d7b2:	da2c      	bge.n	800d80e <__kernel_rem_pio2f+0x496>
 800d7b4:	f1b8 0f00 	cmp.w	r8, #0
 800d7b8:	d001      	beq.n	800d7be <__kernel_rem_pio2f+0x446>
 800d7ba:	eef1 7a67 	vneg.f32	s15, s15
 800d7be:	edc6 7a01 	vstr	s15, [r6, #4]
 800d7c2:	e00d      	b.n	800d7e0 <__kernel_rem_pio2f+0x468>
 800d7c4:	aa56      	add	r2, sp, #344	; 0x158
 800d7c6:	4411      	add	r1, r2
 800d7c8:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800d690 <__kernel_rem_pio2f+0x318>
 800d7cc:	399c      	subs	r1, #156	; 0x9c
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	da0e      	bge.n	800d7f0 <__kernel_rem_pio2f+0x478>
 800d7d2:	f1b8 0f00 	cmp.w	r8, #0
 800d7d6:	d001      	beq.n	800d7dc <__kernel_rem_pio2f+0x464>
 800d7d8:	eef1 7a67 	vneg.f32	s15, s15
 800d7dc:	edc6 7a00 	vstr	s15, [r6]
 800d7e0:	9b01      	ldr	r3, [sp, #4]
 800d7e2:	f003 0007 	and.w	r0, r3, #7
 800d7e6:	b057      	add	sp, #348	; 0x15c
 800d7e8:	ecbd 8b04 	vpop	{d8-d9}
 800d7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7f0:	ed31 7a01 	vldmdb	r1!, {s14}
 800d7f4:	3b01      	subs	r3, #1
 800d7f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d7fa:	e7e8      	b.n	800d7ce <__kernel_rem_pio2f+0x456>
 800d7fc:	ed71 7a01 	vldmdb	r1!, {s15}
 800d800:	3801      	subs	r0, #1
 800d802:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d806:	e7c4      	b.n	800d792 <__kernel_rem_pio2f+0x41a>
 800d808:	eef0 7a47 	vmov.f32	s15, s14
 800d80c:	e7c8      	b.n	800d7a0 <__kernel_rem_pio2f+0x428>
 800d80e:	ecb0 7a01 	vldmia	r0!, {s14}
 800d812:	3101      	adds	r1, #1
 800d814:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d818:	e7ca      	b.n	800d7b0 <__kernel_rem_pio2f+0x438>
 800d81a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800d81e:	ed70 6a01 	vldmdb	r0!, {s13}
 800d822:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d826:	3c01      	subs	r4, #1
 800d828:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d82c:	ed00 7a01 	vstr	s14, [r0, #-4]
 800d830:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d834:	edc0 7a00 	vstr	s15, [r0]
 800d838:	e78d      	b.n	800d756 <__kernel_rem_pio2f+0x3de>
 800d83a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800d83e:	ed70 6a01 	vldmdb	r0!, {s13}
 800d842:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d846:	3c01      	subs	r4, #1
 800d848:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d84c:	ed00 7a01 	vstr	s14, [r0, #-4]
 800d850:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d854:	edc0 7a00 	vstr	s15, [r0]
 800d858:	e781      	b.n	800d75e <__kernel_rem_pio2f+0x3e6>
 800d85a:	ed31 7a01 	vldmdb	r1!, {s14}
 800d85e:	3b01      	subs	r3, #1
 800d860:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d864:	e77f      	b.n	800d766 <__kernel_rem_pio2f+0x3ee>
 800d866:	eef1 6a66 	vneg.f32	s13, s13
 800d86a:	eeb1 7a47 	vneg.f32	s14, s14
 800d86e:	edc6 6a00 	vstr	s13, [r6]
 800d872:	ed86 7a01 	vstr	s14, [r6, #4]
 800d876:	eef1 7a67 	vneg.f32	s15, s15
 800d87a:	e781      	b.n	800d780 <__kernel_rem_pio2f+0x408>

0800d87c <__kernel_sinf>:
 800d87c:	ee10 3a10 	vmov	r3, s0
 800d880:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d884:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800d888:	da04      	bge.n	800d894 <__kernel_sinf+0x18>
 800d88a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d88e:	ee17 3a90 	vmov	r3, s15
 800d892:	b35b      	cbz	r3, 800d8ec <__kernel_sinf+0x70>
 800d894:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d898:	eddf 7a15 	vldr	s15, [pc, #84]	; 800d8f0 <__kernel_sinf+0x74>
 800d89c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800d8f4 <__kernel_sinf+0x78>
 800d8a0:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d8a4:	eddf 7a14 	vldr	s15, [pc, #80]	; 800d8f8 <__kernel_sinf+0x7c>
 800d8a8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d8ac:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800d8fc <__kernel_sinf+0x80>
 800d8b0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d8b4:	eddf 7a12 	vldr	s15, [pc, #72]	; 800d900 <__kernel_sinf+0x84>
 800d8b8:	ee60 6a07 	vmul.f32	s13, s0, s14
 800d8bc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d8c0:	b930      	cbnz	r0, 800d8d0 <__kernel_sinf+0x54>
 800d8c2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800d904 <__kernel_sinf+0x88>
 800d8c6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d8ca:	eea6 0a26 	vfma.f32	s0, s12, s13
 800d8ce:	4770      	bx	lr
 800d8d0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d8d4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800d8d8:	eee0 7a86 	vfma.f32	s15, s1, s12
 800d8dc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800d8e0:	eddf 7a09 	vldr	s15, [pc, #36]	; 800d908 <__kernel_sinf+0x8c>
 800d8e4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800d8e8:	ee30 0a60 	vsub.f32	s0, s0, s1
 800d8ec:	4770      	bx	lr
 800d8ee:	bf00      	nop
 800d8f0:	2f2ec9d3 	.word	0x2f2ec9d3
 800d8f4:	b2d72f34 	.word	0xb2d72f34
 800d8f8:	3638ef1b 	.word	0x3638ef1b
 800d8fc:	b9500d01 	.word	0xb9500d01
 800d900:	3c088889 	.word	0x3c088889
 800d904:	be2aaaab 	.word	0xbe2aaaab
 800d908:	3e2aaaab 	.word	0x3e2aaaab

0800d90c <matherr>:
 800d90c:	2000      	movs	r0, #0
 800d90e:	4770      	bx	lr

0800d910 <nan>:
 800d910:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d918 <nan+0x8>
 800d914:	4770      	bx	lr
 800d916:	bf00      	nop
 800d918:	00000000 	.word	0x00000000
 800d91c:	7ff80000 	.word	0x7ff80000

0800d920 <fabsf>:
 800d920:	ee10 3a10 	vmov	r3, s0
 800d924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d928:	ee00 3a10 	vmov	s0, r3
 800d92c:	4770      	bx	lr
	...

0800d930 <floorf>:
 800d930:	ee10 3a10 	vmov	r3, s0
 800d934:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d938:	0dca      	lsrs	r2, r1, #23
 800d93a:	3a7f      	subs	r2, #127	; 0x7f
 800d93c:	2a16      	cmp	r2, #22
 800d93e:	dc2a      	bgt.n	800d996 <floorf+0x66>
 800d940:	2a00      	cmp	r2, #0
 800d942:	da11      	bge.n	800d968 <floorf+0x38>
 800d944:	eddf 7a18 	vldr	s15, [pc, #96]	; 800d9a8 <floorf+0x78>
 800d948:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d94c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d954:	dd05      	ble.n	800d962 <floorf+0x32>
 800d956:	2b00      	cmp	r3, #0
 800d958:	da23      	bge.n	800d9a2 <floorf+0x72>
 800d95a:	4a14      	ldr	r2, [pc, #80]	; (800d9ac <floorf+0x7c>)
 800d95c:	2900      	cmp	r1, #0
 800d95e:	bf18      	it	ne
 800d960:	4613      	movne	r3, r2
 800d962:	ee00 3a10 	vmov	s0, r3
 800d966:	4770      	bx	lr
 800d968:	4911      	ldr	r1, [pc, #68]	; (800d9b0 <floorf+0x80>)
 800d96a:	4111      	asrs	r1, r2
 800d96c:	420b      	tst	r3, r1
 800d96e:	d0fa      	beq.n	800d966 <floorf+0x36>
 800d970:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800d9a8 <floorf+0x78>
 800d974:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d978:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d97c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d980:	ddef      	ble.n	800d962 <floorf+0x32>
 800d982:	2b00      	cmp	r3, #0
 800d984:	bfbe      	ittt	lt
 800d986:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800d98a:	fa40 f202 	asrlt.w	r2, r0, r2
 800d98e:	189b      	addlt	r3, r3, r2
 800d990:	ea23 0301 	bic.w	r3, r3, r1
 800d994:	e7e5      	b.n	800d962 <floorf+0x32>
 800d996:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d99a:	d3e4      	bcc.n	800d966 <floorf+0x36>
 800d99c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d9a0:	4770      	bx	lr
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	e7dd      	b.n	800d962 <floorf+0x32>
 800d9a6:	bf00      	nop
 800d9a8:	7149f2ca 	.word	0x7149f2ca
 800d9ac:	bf800000 	.word	0xbf800000
 800d9b0:	007fffff 	.word	0x007fffff

0800d9b4 <scalbnf>:
 800d9b4:	b508      	push	{r3, lr}
 800d9b6:	ee10 2a10 	vmov	r2, s0
 800d9ba:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800d9be:	ed2d 8b02 	vpush	{d8}
 800d9c2:	eef0 0a40 	vmov.f32	s1, s0
 800d9c6:	d004      	beq.n	800d9d2 <scalbnf+0x1e>
 800d9c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d9cc:	d306      	bcc.n	800d9dc <scalbnf+0x28>
 800d9ce:	ee70 0a00 	vadd.f32	s1, s0, s0
 800d9d2:	ecbd 8b02 	vpop	{d8}
 800d9d6:	eeb0 0a60 	vmov.f32	s0, s1
 800d9da:	bd08      	pop	{r3, pc}
 800d9dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d9e0:	d21c      	bcs.n	800da1c <scalbnf+0x68>
 800d9e2:	4b1f      	ldr	r3, [pc, #124]	; (800da60 <scalbnf+0xac>)
 800d9e4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800da64 <scalbnf+0xb0>
 800d9e8:	4298      	cmp	r0, r3
 800d9ea:	ee60 0a27 	vmul.f32	s1, s0, s15
 800d9ee:	db10      	blt.n	800da12 <scalbnf+0x5e>
 800d9f0:	ee10 2a90 	vmov	r2, s1
 800d9f4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800d9f8:	3b19      	subs	r3, #25
 800d9fa:	4403      	add	r3, r0
 800d9fc:	2bfe      	cmp	r3, #254	; 0xfe
 800d9fe:	dd0f      	ble.n	800da20 <scalbnf+0x6c>
 800da00:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800da68 <scalbnf+0xb4>
 800da04:	eeb0 0a48 	vmov.f32	s0, s16
 800da08:	f000 f834 	bl	800da74 <copysignf>
 800da0c:	ee60 0a08 	vmul.f32	s1, s0, s16
 800da10:	e7df      	b.n	800d9d2 <scalbnf+0x1e>
 800da12:	eddf 7a16 	vldr	s15, [pc, #88]	; 800da6c <scalbnf+0xb8>
 800da16:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800da1a:	e7da      	b.n	800d9d2 <scalbnf+0x1e>
 800da1c:	0ddb      	lsrs	r3, r3, #23
 800da1e:	e7ec      	b.n	800d9fa <scalbnf+0x46>
 800da20:	2b00      	cmp	r3, #0
 800da22:	dd06      	ble.n	800da32 <scalbnf+0x7e>
 800da24:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800da28:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800da2c:	ee00 3a90 	vmov	s1, r3
 800da30:	e7cf      	b.n	800d9d2 <scalbnf+0x1e>
 800da32:	f113 0f16 	cmn.w	r3, #22
 800da36:	da06      	bge.n	800da46 <scalbnf+0x92>
 800da38:	f24c 3350 	movw	r3, #50000	; 0xc350
 800da3c:	4298      	cmp	r0, r3
 800da3e:	dcdf      	bgt.n	800da00 <scalbnf+0x4c>
 800da40:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800da6c <scalbnf+0xb8>
 800da44:	e7de      	b.n	800da04 <scalbnf+0x50>
 800da46:	3319      	adds	r3, #25
 800da48:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800da4c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800da50:	eddf 7a07 	vldr	s15, [pc, #28]	; 800da70 <scalbnf+0xbc>
 800da54:	ee07 3a10 	vmov	s14, r3
 800da58:	ee67 0a27 	vmul.f32	s1, s14, s15
 800da5c:	e7b9      	b.n	800d9d2 <scalbnf+0x1e>
 800da5e:	bf00      	nop
 800da60:	ffff3cb0 	.word	0xffff3cb0
 800da64:	4c000000 	.word	0x4c000000
 800da68:	7149f2ca 	.word	0x7149f2ca
 800da6c:	0da24260 	.word	0x0da24260
 800da70:	33000000 	.word	0x33000000

0800da74 <copysignf>:
 800da74:	ee10 3a10 	vmov	r3, s0
 800da78:	ee10 2a90 	vmov	r2, s1
 800da7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800da80:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800da84:	4313      	orrs	r3, r2
 800da86:	ee00 3a10 	vmov	s0, r3
 800da8a:	4770      	bx	lr

0800da8c <_init>:
 800da8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da8e:	bf00      	nop
 800da90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da92:	bc08      	pop	{r3}
 800da94:	469e      	mov	lr, r3
 800da96:	4770      	bx	lr

0800da98 <_fini>:
 800da98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da9a:	bf00      	nop
 800da9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da9e:	bc08      	pop	{r3}
 800daa0:	469e      	mov	lr, r3
 800daa2:	4770      	bx	lr
